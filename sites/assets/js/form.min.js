frappe.templates["grid_form"] = '<div class="grid-form-heading sortable-handle"> <div class="toolbar"> <span class="panel-title"> {%= __("Editing Row") %} #<span class="grid-form-row-index"></span></span> <button class="btn btn-default btn-xs pull-right" style="margin-left: 7px;"> <i class="octicon octicon-check visible-xs" style="padding-bottom: 2px;"></i> <span class="hidden-xs octicon octicon-triangle-up"></span></button> <button class="btn btn-default btn-xs pull-right grid-insert-row" style="margin-left: 7px;"> {%= __("Insert Above") %}</button> <button class="btn btn-danger btn-xs pull-right grid-delete-row"> <i class="octicon octicon-trashcan" style="padding-bottom: 2px; margin-top: 1px;"></i> </button> </div> </div> <div class="grid-form-body"> <div class="form-area"></div> <div class="grid-footer-toolbar clearfix hidden-xs"> <span class="text-muted"> <i class="octicon octicon-keyboard"></i> &ndash; <kbd>{%= __("Ctrl + Up") %}</kbd>, <kbd>{%= __("Ctrl + Down") %}</kbd>, <kbd>{%= __("ESC") %}</kbd> </span> <button class="btn btn-default btn-xs pull-right grid-append-row" style="margin-left: 7px;"> {%= __("Insert Below") %}</button> </div> </div> ';
frappe.templates["grid_body"] = '<div> <div class="form-grid"> <div class="grid-heading-row"></div> <div class="grid-body"> <div class="rows"></div> <div class="grid-empty text-center hide">{%= __("No Data") %}</div> <div class="small form-clickable-section grid-footer"> <div class="row"> <div class="col-sm-6 grid-buttons"> <a href="#" class="grid-add-multiple-rows btn btn-xs btn-default hide" style="margin-right: 10px;"> {%= __("Add multiple rows") %}</a> <a href="#" class="btn btn-xs btn-default grid-add-row"> {%= __("Add new row") %}</a> </div> <div class="col-sm-6 text-right"> <a href="#" class="grid-download btn btn-xs btn-default hide" style="margin-left: 10px;"> {%= __("Download") %}</a> <a href="#" class="grid-upload btn btn-xs btn-default hide" style="margin-left: 10px;"> {%= __("Upload") %}</a> </div> </div> </div> </div> </div> </div> ';
frappe.templates["print_layout"] = '<div class="form-print-wrapper"> <div class="print-toolbar row"> <div class="col-xs-2"> <select class="print-preview-select input-sm form-control"></select></div> <div class="col-xs-2"> <select class="languages input-sm form-control"></select></div> <div class="col-xs-2"> <div class="checkbox small" style="margin-top: 7px; margin-bottom: 0px;"> <label> <input type="checkbox" class="print-letterhead text-muted" style="margin-top: 1px;"/> {%= __("Letter Head") %}</label> </div> </div> <div class="col-xs-6 text-right">  <div class="btn-group"> <a class="btn-print-print btn-sm btn btn-default"> <strong>{%= __("Print") %}</strong></a> <a class="btn-print-edit btn-sm btn btn-default"> {%= __("Customize") %}</a> <a class="btn-print-preview btn-sm btn btn-default"> {%= __("Full Page") %}</a> <a class="btn-download-pdf btn-sm btn btn-default"> {%= __("PDF") %}</a> </div> </div> </div> <div class="print-preview-wrapper"> <div class="print-preview"> <div class="print-format"></div> </div> </div> </div> ';
frappe.templates["users_in_sidebar"] = '{% for (var i=0, l=users.length; i < l; i++) { var u = users[i]; %} <span class="avatar avatar-small {{ u.avatar_class || "" }}" title="{{ u.title }}"> {% if (u.icon) { %} <i class="{{ u.icon }}"></i> {% } else if(u.image) { %} <img class="media-object" src="{{ u.image }}" alt="{{ u.fullname }}"> {% } else { %} <div class="standard-image" style="background-color: {{ u.color }};">{{ u.abbr.substr(0,1) }}</div> {% } %} </span> {% } %} ';
frappe.templates["set_sharing"] = '<div class="padding"> <div class="row"> <div class="col-xs-6"><h6>{%= __("User") %}</h6></div> <div class="col-xs-2"><h6>{%= __("Can Read") %}</h6></div> <div class="col-xs-2"><h6>{%= __("Can Write") %}</h6></div> <div class="col-xs-2"><h6>{%= __("Can Share") %}</h6></div> </div> <div class="row shared-user" data-everyone=1> <div class="col-xs-6 share-all" style="height: 30px;"><b>{{ __("Everyone") }}</b></div> <div class="col-xs-2"><input type="checkbox" name="read" {% if(cint(everyone.read)) { %}checked{% } %} class="edit-share"></div> <div class="col-xs-2"><input type="checkbox" name="write" {% if(cint(everyone.write)) { %}checked{% } %} class="edit-share"></div> <div class="col-xs-2"><input type="checkbox" name="share" {% if(cint(everyone.share)) { %}checked{% } %} class="edit-share"></div> </div> {% for (var i=0, l=shared.length; i < l; i++) { var s = shared[i]; %} {% if(s && !s.everyone) { %} <div class="row shared-user" data-user="{%= s.user %}" data-name="{%= s.name %}"> <div class="col-xs-6">{%= s.user %}</div> <div class="col-xs-2"><input type="checkbox" name="read" {% if(cint(s.read)) { %}checked{% } %} class="edit-share"></div> <div class="col-xs-2"><input type="checkbox" name="write" {% if(cint(s.write)) { %}checked{% } %} class="edit-share"></div> <div class="col-xs-2"><input type="checkbox" name="share" {% if(cint(s.share)) { %}checked{% } %} class="edit-share"></div> </div> {% } %} {% } %} {% if(frappe.model.can_share(null, frm)) { %} <hr> <div class="row"> <div class="col-xs-6"><h6>{%= __("Share this document with") %}</h6></div> <div class="col-xs-2"><h6>{%= __("Can Read") %}</h6></div> <div class="col-xs-2"><h6>{%= __("Can Write") %}</h6></div> <div class="col-xs-2"><h6>{%= __("Can Share") %}</h6></div> </div> <div class="row"> <div class="col-xs-6 input-wrapper-add-share"></div> <div class="col-xs-2"><input type="checkbox" class="add-share-read" name="read"></div> <div class="col-xs-2"><input type="checkbox" class="add-share-write" name="write"></div> <div class="col-xs-2"><input type="checkbox" class="add-share-share" name="share"></div> </div> <p> <button class="btn btn-primary btn-add-share">{%= __("Add") %}</button> </p> {% } %} </div> ';
frappe.templates["form_sidebar"] = '<ul class="list-unstyled sidebar-menu sidebar-image-section hidden-xs hidden-sm hide"> <li class="divider"></li> <li class="sidebar-image-wrapper"> <div class="sidebar-image"></div> <div class="sidebar-standard-image"> <div class="standard-image"></div> </div> </li> </ul> {% if frm.meta.beta %} <div class="sidebar-menu"> <label class="label label-warning" title="{{ __("This feature is brand new and still experimental") }}">{{ __("Experimental Feature") }}</label> </div> {% endif %} <ul class="list-unstyled sidebar-menu user-actions hide"> <li class="divider"></li> </ul> <ul class="list-unstyled sidebar-menu"> <li class="divider"></li> <li style="position: relative;"> <a class="strong sidebar-comments badge-hover"> <span>{%= __("Comments") %}</span> <span class="badge n-comments">0</span> </a> </li> {% if(frappe.help.has_help(doctype)) { %} <li><a class="strong help-link" data-doctype="{{ doctype }}">{{ __("Help") }}</a></li> {% } %} </ul> <ul class="list-unstyled sidebar-menu form-assignments"> <li class="divider"></li> <li class="h6 assigned-to-label">{%= __("Assigned To") %}</li> <li><a class="strong add-assignment">{%= __("Assign") %} <i class="octicon octicon-plus" style="margin-left: 2px;"></i></a></li> </ul> <ul class="list-unstyled sidebar-menu form-attachments"> <li class="divider"></li> <li class="h6 attachments-label">{%= __("Attachments") %}</li> <li><a class="strong add-attachment">{%= __("Attach File") %} <i class="octicon octicon-plus" style="margin-left: 2px;"></i></li></a> </ul> <ul class="list-unstyled sidebar-menu"> <li class="divider"></li> <li class="h6 tags-label">{%= __("Tags") %}</li> <li class="form-tags"> <div class="tag-area"></div> <div class="clearfix"></div> </li> </ul> <ul class="list-unstyled sidebar-menu"> <li class="divider"></li> <li class="h6 shared-with-label">{%= __("Shared With") %}</li> <li class="form-shared"></li> </ul> <ul class="list-unstyled sidebar-menu"> <li class="divider"></li> <li class="h6 viewers-label">{%= __("Currently Viewing") %}</li> <li class="form-viewers"></li> </ul> <ul class="list-unstyled sidebar-menu text-muted"> <li class="liked-by-parent"> <span class="liked-by"> <i class="octicon octicon-heart like-action text-extra-muted"></i> <span class="like-count"></span> </span> </li> <li class="modified-by"></li> <li class="created-by"></li> </ul> {% if(frappe.get_form_sidebar_extension) { %} {{ frappe.get_form_sidebar_extension() }} {% } %} ';
frappe.templates["form_dashboard"] = '<div class="form-dashboard hidden"> <h4 class="form-headline hidden form-dashboard-section"> </h4> <div class="progress-area hidden form-dashboard-section"> </div> <div class="form-heatmap hidden form-dashboard-section"> <div id="heatmap-{{ frm.doctype }}"></div> <div class="text-muted small heatmap-message hidden"></div> </div> <div class="form-chart form-dashboard-section hidden"></div> <div class="form-stats form-dashboard-section hidden"></div> <div class="form-links form-dashboard-section hidden"> <div class="transactions"></div> </div> </div>';
frappe.templates["form_document_flow"] = '<div class="document-flow"> {% for dt in doctypes %} <span class="document-flow-link-wrapper"> <a data-doctype="{{ dt }}" class="document-flow-link {% if (dt===frm.doctype) { %} strong disabled {% } %} " style="color: inherit;"> <span class="indicator {% if (dt===frm.doctype) { %} blue {% } else { %} darkgrey {% } %}"></span><br> <span class="document-flow-link-label">{{ __(dt) }}</span> </a> </span> {% endfor %} </div> ';
frappe.templates["form_links"] = '<div class="form-documents"> <h5 style="margin: 5px 0px;">Related Documents</h5> {% for (var i=0; i < transactions.length; i++) { %} {% if((i % 2)===0) { %}<div class="row">{% } %} <div class="col-xs-6"> <h6 class="uppercase">{{ transactions[i].label }}</h5> {% for (var j=0; j < transactions[i].items.length; j++) { var doctype = transactions[i].items[j]; %} <div class="document-link" data-doctype="{{ doctype }}"> <a class="badge-link small">{{ __(doctype) }}</a> <span class="text-muted small count"></span> <span class="open-notification hidden" title="{{ __("Open {0}", [__(doctype)])}}"></span> </div> {% } %} </div> {% if((i % 2)===1) { %}</div>{% } %} {% } %}  {% if((i % 2)===0) { %}</div>{% } %} </div>';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/views/formview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.views.formview');

frappe.views.FormFactory = frappe.views.Factory.extend({
	make: function(route) {
		var me = this,
			dt = route[1];

		if(!frappe.views.formview[dt]) {
			frappe.model.with_doctype(dt, function() {
				me.page = frappe.container.add_page("Form/" + dt);
				frappe.views.formview[dt] = me.page;
				me.page.frm = new _f.Frm(dt, me.page, true);
				me.show_doc(route);
			});
		} else {
			me.show_doc(route);
		}


		if(!this.initialized) {
			$(document).on("page-change", function() {
				frappe.ui.form.close_grid_form();
			});

			frappe.realtime.on("new_communication", function(data) {
				frappe.timeline.new_communication(data);
			});

			frappe.realtime.on("delete_communication", function(data) {
				frappe.timeline.delete_communication(data);
			});

			frappe.realtime.on('update_communication', function(data) {
				frappe.timeline.update_communication(data);
			});

			frappe.realtime.on("doc_viewers", function(data) {
				frappe.ui.form.set_viewers(data);
			});
		}


		this.initialized = true;
	},
	show_doc: function(route) {
		var dt = route[1],
			dn = route.slice(2).join("/"),
			me = this;

		if(frappe.model.new_names[dn]) {
			dn = frappe.model.new_names[dn];
			frappe.set_route("Form", dt, dn);
			return;
		}

		frappe.model.with_doc(dt, dn, function(dn, r) {
			if(r && r['403']) return; // not permitted

			if(!(locals[dt] && locals[dt][dn])) {
				// doc not found, but starts with New,
				// make a new doc and set it
				var new_str = __("New") + " ";
				if(dn && dn.substr(0, new_str.length)==new_str) {
					var new_name = frappe.model.make_new_doc_and_get_name(dt, true);
					if(new_name===dn) {
						me.load(dt, dn);
					} else {
						frappe.set_route("Form", dt, new_name)
					}
				} else {
					frappe.show_not_found(route);
				}
				return;
			}
			me.load(dt, dn);
		});

	},
	load: function(dt, dn) {
		frappe.container.change_to("Form/" + dt);
		frappe.views.formview[dt].frm.refresh(dn);
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/legacy/form.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

/* Form page structure

	+ this.parent (either FormContainer or Dialog)
 		+ this.wrapper
			+ this.toolbar
			+ this.form_wrapper
					+ this.head
					+ this.body
						+ this.layout
				+ this.sidebar
			+ this.footer
*/

frappe.provide('_f');
frappe.provide('frappe.ui.form');

frappe.ui.form.Controller = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.setup && this.setup();
	}
});

_f.frms = {};

_f.Frm = function(doctype, parent, in_form) {
	this.docname = '';
	this.doctype = doctype;
	this.hidden = false;
	this.refresh_if_stale_for = 120;

	var me = this;
	this.opendocs = {};
	this.sections = [];
	this.grids = [];
	this.cscript = new frappe.ui.form.Controller({frm:this});
	this.events = {};
	this.pformat = {};
	this.fetch_dict = {};
	this.parent = parent;
	this.tinymce_id_list = [];

	this.setup_meta(doctype);

	// show in form instead of in dialog, when called using url (router.js)
	this.in_form = in_form ? true : false;

	// notify on rename
	var me = this;
	$(document).on('rename', function(event, dt, old_name, new_name) {
		if(dt==me.doctype)
			me.rename_notify(dt, old_name, new_name)
	});
}

_f.Frm.prototype.check_doctype_conflict = function(docname) {
	var me = this;
	if(this.doctype=='DocType' && docname=='DocType') {
		msgprint(__('Allowing DocType, DocType. Be careful!'))
	} else if(this.doctype=='DocType') {
		if (frappe.views.formview[docname] || frappe.pages['List/'+docname]) {
			window.location.reload();
			// msgprint(__("Cannot open {0} when its instance is open", ['DocType']))
			// throw 'doctype open conflict'
		}
	} else {
		if (frappe.views.formview.DocType && frappe.views.formview.DocType.frm.opendocs[this.doctype]) {
			window.location.reload();
			// msgprint(__("Cannot open instance when its {0} is open", ['DocType']))
			// throw 'doctype open conflict'
		}
	}
}

_f.Frm.prototype.setup = function() {

	var me = this;
	this.fields = [];
	this.fields_dict = {};
	this.state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);

	// wrapper
	this.wrapper = this.parent;
	frappe.ui.make_app_page({
		parent: this.wrapper,
		single_column: this.meta.hide_toolbar
	});
	this.page = this.wrapper.page;
	this.layout_main = this.page.main.get(0);

	this.toolbar = new frappe.ui.form.Toolbar({
		frm: this,
		page: this.page
	});

	// print layout
	this.setup_print_layout();

	// 2 column layout
	this.setup_std_layout();

	// client script must be called after "setup" - there are no fields_dict attached to the frm otherwise
	this.script_manager = new frappe.ui.form.ScriptManager({
		frm: this
	});
	this.script_manager.setup();
	this.watch_model_updates();

	if(!this.meta.hide_toolbar) {
		this.footer = new frappe.ui.form.Footer({
			frm: this,
			parent: $('<div>').appendTo(this.page.main.parent())
		})
		$("body").attr("data-sidebar", 1);	
	}
	this.setup_drag_drop();

	this.setup_done = true;
}

_f.Frm.prototype.setup_drag_drop = function() {
	var me = this;
	$(this.wrapper).on('dragenter dragover', false)
		.on('drop', function (e) {
			var dataTransfer = e.originalEvent.dataTransfer;
			if (!(dataTransfer && dataTransfer.files && dataTransfer.files.length > 0)) {
				return;
			}

			e.stopPropagation();
			e.preventDefault();

			if(me.doc.__islocal) {
				msgprint(__("Please save before attaching."));
				throw "attach error";
			}

			if(me.attachments.max_reached()) {
				msgprint(__("Maximum Attachment Limit for this record reached."));
				throw "attach error";
			}

			frappe.upload.upload_file(dataTransfer.files[0], me.attachments.get_args(), {
				callback: function(attachment, r) {
					me.attachments.attachment_uploaded(attachment, r);
				},
				confirm_is_private: true
			});
		});
}

_f.Frm.prototype.setup_print_layout = function() {
	var me = this;
	this.print_preview = new frappe.ui.form.PrintPreview({
		frm: this
	});

	// show edit button for print view
	this.page.wrapper.on('view-change', function() {
		me.toolbar.set_primary_action();
	});
}

_f.Frm.prototype.print_doc = function() {
	if(this.print_preview.wrapper.is(":visible")) {
		this.hide_print();
		return;
	}
	if(!frappe.model.can_print(this.doc.doctype, this)) {
		msgprint(__("You are not allowed to print this document"));
		return;
	}

	this.print_preview.refresh_print_options().trigger("change");
	this.page.set_view("print");
	this.print_preview.set_user_lang();
}

_f.Frm.prototype.set_hidden = function(status) {
	// set hidden if hide_first is set
	this.hidden = status;
	var form_page = this.page.wrapper.find('.form-page');
	form_page.toggleClass('hidden', this.hidden);
	this.toolbar.refresh();
	if(status===true) {
		msg = __('Edit {0} properties', [__(this.doctype)]);
		this.layout.show_message('<div style="padding-left: 15px; padding-right: 15px;">\
			<a class="text-muted" onclick="cur_frm.set_hidden(false)">' + msg + '</a></div>');
	} else {
		// clear message
		this.layout.show_message();
		frappe.utils.scroll_to(form_page);
	}
}


_f.Frm.prototype.hide_print = function() {
	if(this.setup_done && this.page.current_view_name==="print") {
		this.page.set_view(this.page.previous_view_name==="print" ?
			"main" : (this.page.previous_view_name || "main"));
	}
}

_f.Frm.prototype.watch_model_updates = function() {
	// watch model updates
	var me = this;

	// on main doc
	frappe.model.on(me.doctype, "*", function(fieldname, value, doc) {
		// set input
		if(doc.name===me.docname) {
			me.dirty();
			me.fields_dict[fieldname]
				&& me.fields_dict[fieldname].refresh(fieldname);

			me.layout.refresh_dependency();
			me.script_manager.trigger(fieldname, doc.doctype, doc.name);
		}
	})

	// on table fields
	var table_fields = frappe.get_children("DocType", me.doctype, "fields", {fieldtype:"Table"});

	// using $.each to preserve df via closure
	$.each(table_fields, function(i, df) {
		frappe.model.on(df.options, "*", function(fieldname, value, doc) {
			if(doc.parent===me.docname && doc.parentfield===df.fieldname) {
				me.dirty();
				me.fields_dict[df.fieldname].grid.set_value(fieldname, value, doc);
				me.script_manager.trigger(fieldname, doc.doctype, doc.name);
			}
		});
	});
}

_f.Frm.prototype.setup_std_layout = function() {
	this.form_wrapper = $('<div></div>').appendTo(this.layout_main);
	this.body 			= $('<div></div>').appendTo(this.form_wrapper);

	// only tray
	this.meta.section_style='Simple'; // always simple!

	// layout
	this.layout = new frappe.ui.form.Layout({
		parent: this.body,
		doctype: this.doctype,
		frm: this,
	});
	this.layout.make();

	this.fields_dict = this.layout.fields_dict;
	this.fields = this.layout.fields_list;

	this.document_flow = new frappe.ui.form.DocumentFlow({
		frm: this
	});

	this.dashboard = new frappe.ui.form.Dashboard({
		frm: this,
	});

	// state
	this.states = new frappe.ui.form.States({
		frm: this
	});
}

// email the form
_f.Frm.prototype.email_doc = function(message) {
	new frappe.views.CommunicationComposer({
		doc: this.doc,
		frm: this,
		subject: __(this.meta.name) + ': ' + this.docname,
		recipients: this.doc.email || this.doc.email_id || this.doc.contact_email,
		attach_document_print: true,
		message: message,
		real_name: this.doc.real_name || this.doc.contact_display || this.doc.contact_name
	});
}

// rename the form
_f.Frm.prototype.rename_doc = function() {
	frappe.model.rename_doc(this.doctype, this.docname);
}

_f.Frm.prototype.share_doc = function() {
	this.shared.show();
}

// notify this form of renamed records
_f.Frm.prototype.rename_notify = function(dt, old, name) {
	// from form
	if(this.meta.istable)
		return;

	if(this.docname == old)
		this.docname = name;
	else
		return;

	// cleanup
	if(this && this.opendocs[old] && frappe.meta.docfield_copy[dt]) {
		// delete docfield copy
		frappe.meta.docfield_copy[dt][name] = frappe.meta.docfield_copy[dt][old];
		delete frappe.meta.docfield_copy[dt][old];
	}

	delete this.opendocs[old];
	this.opendocs[name] = true;

	if(this.meta.in_dialog || !this.in_form) {
		return;
	}

	frappe.re_route[window.location.hash] = '#Form/' + encodeURIComponent(this.doctype) + '/' + encodeURIComponent(name);
	frappe.set_route('Form', this.doctype, name);
}

// SETUP

_f.Frm.prototype.setup_meta = function(doctype) {
	this.meta = frappe.get_doc('DocType',this.doctype);
	this.perm = frappe.perm.get_perm(this.doctype); // for create
	if(this.meta.istable) { this.meta.in_dialog = 1 }
}

_f.Frm.prototype.refresh_header = function(is_a_different_doc) {
	// set title
	// main title
	if(!this.meta.in_dialog || this.in_form) {
		frappe.utils.set_title(this.meta.issingle ? this.doctype : this.docname);
	}

	if(frappe.ui.toolbar.recent)
		frappe.ui.toolbar.recent.add(this.doctype, this.docname, 1);

	// show / hide buttons
	if(this.toolbar) {
		if (is_a_different_doc) {
			this.toolbar.current_status = undefined;
		}

		this.toolbar.refresh();
	}

	this.document_flow.refresh();
	this.dashboard.refresh();

	if(this.meta.is_submittable &&
		! this.is_dirty() &&
		! this.is_new() &&
		this.doc.docstatus===0) {
		this.dashboard.add_comment(__('Submit this document to confirm'), true);
	}

	this.clear_custom_buttons();

	this.show_web_link();
}

_f.Frm.prototype.show_web_link = function() {
	var doc = this.doc, me = this;
	if(!doc.__islocal && doc.__onload && doc.__onload.is_website_generator) {
		me.web_link && me.web_link.remove();
		if(doc.__onload.published) {
			me.add_web_link("/" + doc.route)
		}
	}
}

_f.Frm.prototype.add_web_link = function(path) {
	this.web_link = this.sidebar.add_user_action("See on Website",
		function() {}).attr("href", path || this.doc.route).attr("target", "_blank");
}

_f.Frm.prototype.check_doc_perm = function() {
	// get perm
	var dt = this.parent_doctype?this.parent_doctype : this.doctype;
	this.perm = frappe.perm.get_perm(dt, this.doc);

	if(!this.perm[0].read) {
		return 0;
	}
	return 1
}

_f.Frm.prototype.refresh = function(docname) {
	var is_a_different_doc = docname ? true : false;

	if(docname) {
		// record switch
		if(this.docname != docname && (!this.meta.in_dialog || this.in_form) &&
			!this.meta.istable) {
				frappe.utils.scroll_to(0);
				this.hide_print();
			}
			frappe.ui.form.close_grid_form();
		this.docname = docname;
	}

	cur_frm = this;

	if(this.docname) { // document to show

		// set the doc
		this.doc = frappe.get_doc(this.doctype, this.docname);

		// check permissions
		if(!this.check_doc_perm()) {
			frappe.show_not_permitted(__(this.doctype) + " " + __(this.docname));
			return;
		}

		// read only (workflow)
		this.read_only = frappe.workflow.is_read_only(this.doctype, this.docname);

		// check if doctype is already open
		if (!this.opendocs[this.docname]) {
			this.check_doctype_conflict(this.docname);
		} else {
			if(this.doc && (!this.doc.__unsaved) && this.doc.__last_sync_on &&
				(new Date() - this.doc.__last_sync_on) > (this.refresh_if_stale_for * 1000)) {
				this.reload_doc();
				return;
			}
		}

		// do setup
		if(!this.setup_done) this.setup();

		// load the record for the first time, if not loaded (call 'onload')
		this.cscript.is_onload = false;
		if(!this.opendocs[this.docname]) {
			var me = this;
			this.cscript.is_onload = true;
			this.setnewdoc();
			$(document).trigger("form-load", [this]);
			$(this.page.wrapper).on('hide',  function(e) {
				$(document).trigger("form-unload", [me]);
			});
		} else {
			this.render_form(is_a_different_doc);
			if (this.doc.localname) {
				// trigger form-rename and remove .localname
				delete this.doc.localname;
				$(document).trigger("form-rename", [this]);
			}
		}

		// if print format is shown, refresh the format
		if(this.print_preview.wrapper.is(":visible")) {
			this.print_preview.preview();
		}

		if(is_a_different_doc) {
			if(this.show_print_first && this.doc.docstatus===1) {
				// show print view
				this.print_doc();
			} else {
				if(this.hide_first && !this.doc.__unsaved && !this.doc.__islocal) {
					this.set_hidden(true);
				} else {
					if(this.hidden) {
						this.set_hidden(false);
					}
				}
			}
		}

		this.show_if_needs_refresh();
	}
}

_f.Frm.prototype.show_if_needs_refresh = function() {
	if(this.doc.__needs_refresh) {
		if(this.doc.__unsaved) {
			this.dashboard.set_headline_alert(__("This form has been modified after you have loaded it")
				+ '<a class="btn btn-xs btn-primary pull-right" onclick="cur_frm.reload_doc()">'
				+ __("Refresh") + '</a>', "alert-warning");
		} else {
			this.reload_doc();
		}
	}
}

_f.Frm.prototype.render_form = function(is_a_different_doc) {
	if(!this.meta.istable) {
		this.layout.doc = this.doc;
		this.layout.attach_doc_and_docfields()

		this.sidebar = new frappe.ui.form.Sidebar({
			frm: this,
			page: this.page
		});
		this.sidebar.make();

		// header must be refreshed before client methods
		// because add_custom_button
		this.refresh_header(is_a_different_doc);

		// clear layout message
		this.layout.show_message();

		// call trigger
		this.script_manager.trigger("refresh");

		// trigger global trigger
		// to use this
		$(document).trigger('form_refresh', [this]);

		// fields
		this.refresh_fields();


		// call onload post render for callbacks to be fired
		if(this.cscript.is_onload) {
			this.script_manager.trigger("onload_post_render");
		}

		// focus on first input

		if(this.doc.docstatus==0) {
			var first = this.form_wrapper.find('.form-layout :input:first');
			if(!in_list(["Date", "Datetime"], first.attr("data-fieldtype"))) {
				first.focus();
			}
		}
	} else {
		this.refresh_header(is_a_different_doc);
	}

	$(this.wrapper).trigger('render_complete');

	if(!this.hidden) {
		this.layout.show_empty_form_message();
	}

	this.scroll_to_element();
}

_f.Frm.prototype.refresh_field = function(fname) {
	if(this.fields_dict[fname] && this.fields_dict[fname].refresh) {
		this.fields_dict[fname].refresh();
		this.layout.refresh_dependency();
	}
}

_f.Frm.prototype.refresh_fields = function() {
	this.layout.refresh(this.doc);
	this.layout.primary_button = $(this.wrapper).find(".btn-primary");

	// cleanup activities after refresh
	this.cleanup_refresh(this);
}


_f.Frm.prototype.cleanup_refresh = function() {
	var me = this;
	if(me.fields_dict['amended_from']) {
		if (me.doc.amended_from) {
			unhide_field('amended_from');
			if (me.fields_dict['amendment_date']) unhide_field('amendment_date');
		} else {
			hide_field('amended_from');
			if (me.fields_dict['amendment_date']) hide_field('amendment_date');
		}
	}

	if(me.fields_dict['trash_reason']) {
		if(me.doc.trash_reason && me.doc.docstatus == 2) {
			unhide_field('trash_reason');
		} else {
			hide_field('trash_reason');
		}
	}

	if(me.meta.autoname && me.meta.autoname.substr(0,6)=='field:' && !me.doc.__islocal) {
		var fn = me.meta.autoname.substr(6);

		if (me.doc[fn]) {
			me.toggle_display(fn, false);
		}
	}

	if(me.meta.autoname=="naming_series:" && !me.doc.__islocal) {
		me.toggle_display("naming_series", false);
	}
}

_f.Frm.prototype.setnewdoc = function() {
	// moved this call to refresh function
	// this.check_doctype_conflict(docname);
	var me = this;

	// hide any open grid
	this.script_manager.trigger("before_load", this.doctype, this.docname, function() {
		me.script_manager.trigger("onload");
		me.opendocs[me.docname] = true;
		me.render_form();

		frappe.after_ajax(function() {
			me.trigger_link_fields();
		});

		frappe.breadcrumbs.add(me.meta.module, me.doctype)
	});

	// update seen
	if(this.meta.track_seen) {
		$('.list-id[data-name="'+ me.docname +'"]').addClass('seen');
	}
}

_f.Frm.prototype.trigger_link_fields = function() {
	// trigger link fields which have default values set
	if (this.is_new() && this.doc.__run_link_triggers) {
		$.each(this.fields_dict, function(fieldname, field) {
			if (field.df.fieldtype=="Link" && this.doc[fieldname]) {
				// triggers add fetch, sets value in model and runs triggers
				field.set_value(this.doc[fieldname]);
			}
		});

		delete this.doc.__run_link_triggers;
	}
}

_f.Frm.prototype.runscript = function(scriptname, callingfield, onrefresh) {
	var me = this;
	if(this.docname) {
		// send to run
		if(callingfield)
			$(callingfield.input).set_working();

		frappe.call({
			method: "runserverobj",
			args: {'docs':this.doc, 'method':scriptname },
			btn: callingfield.$input,
			callback: function(r) {
				if(!r.exc) {
					if(onrefresh) {
						onrefresh(r);
					}

					me.refresh_fields();
				}
			}
		});
	}
}

_f.Frm.prototype.copy_doc = function(onload, from_amend) {
	this.validate_form_action("Create");
	var newdoc = frappe.model.copy_doc(this.doc, from_amend);

	newdoc.idx = null;
	newdoc.__run_link_triggers = false;
	if(onload) {
		onload(newdoc);
	}
	frappe.set_route('Form', newdoc.doctype, newdoc.name);
}

_f.Frm.prototype.reload_doc = function() {
	this.check_doctype_conflict(this.docname);

	var me = this;
	var onsave = function(r, rtxt) {
		me.refresh();
	}

	if(!me.doc.__islocal) {
		frappe.model.remove_from_locals(me.doctype, me.docname);
		frappe.model.with_doc(me.doctype, me.docname, function() {
			me.refresh();
		})
	}
}

var validated;
_f.Frm.prototype.save = function(save_action, callback, btn, on_error) {
	btn && $(btn).prop("disabled", true);
	$(document.activeElement).blur();

	frappe.ui.form.close_grid_form();

	// let any pending js process finish
	var me = this;
	setTimeout(function() { me._save(save_action, callback, btn, on_error) }, 100);
}

_f.Frm.prototype._save = function(save_action, callback, btn, on_error) {
	var me = this;
	if(!save_action) save_action = "Save";
	this.validate_form_action(save_action);

	if((!this.meta.in_dialog || this.in_form) && !this.meta.istable) {
		frappe.utils.scroll_to(0);
	}
	var after_save = function(r) {
		if(!r.exc) {
			if (["Save", "Update", "Amend"].indexOf(save_action)!==-1) {
				frappe.utils.play_sound("click");
			}

			me.script_manager.trigger("after_save");
			me.refresh();
		} else {
			if(on_error)
				on_error();
		}
		callback && callback(r);
	}

	if(save_action != "Update") {
		// validate
		validated = true;
		$.when(this.script_manager.trigger("validate"), this.script_manager.trigger("before_save"))
			.done(function() {
				// done is called after all ajaxes in validate & before_save are completed :)

				if(!validated) {
					btn && $(btn).prop("disabled", false);
					if(on_error) {
						on_error();
					}
					return;
				}

				frappe.ui.form.save(me, save_action, after_save, btn);
			});

	} else {
		frappe.ui.form.save(me, save_action, after_save, btn);
	}
}


_f.Frm.prototype.savesubmit = function(btn, callback, on_error) {
	var me = this;
	this.validate_form_action("Submit");
	frappe.confirm(__("Permanently Submit {0}?", [this.docname]), function() {
		validated = true;
		me.script_manager.trigger("before_submit").done(function() {
			if(!validated) {
				if(on_error)
					on_error();
				return;
			}

			me.save('Submit', function(r) {
				if(!r.exc) {
					frappe.utils.play_sound("submit");
					callback && callback();
					me.script_manager.trigger("on_submit");
				}
			}, btn, on_error);
		});
	}, on_error);
};

_f.Frm.prototype.savecancel = function(btn, callback, on_error) {
	var me = this;
	this.validate_form_action('Cancel');
	frappe.confirm(__("Permanently Cancel {0}?", [this.docname]), function() {
		validated = true;
		me.script_manager.trigger("before_cancel").done(function() {
			if(!validated) {
				if(on_error)
					on_error();
				return;
			}

			var after_cancel = function(r) {
				if(!r.exc) {
					frappe.utils.play_sound("cancel");
					me.refresh();
					callback && callback();
					me.script_manager.trigger("after_cancel");
				} else {
					on_error();
				}
			}
			frappe.ui.form.save(me, "cancel", after_cancel, btn);
		});
	}, on_error);
}

// delete the record
_f.Frm.prototype.savetrash = function() {
	this.validate_form_action("Delete");
	frappe.model.delete_doc(this.doctype, this.docname, function(r) {
		window.history.back();
	})
}

_f.Frm.prototype.amend_doc = function() {
	if(!this.fields_dict['amended_from']) {
		alert('"amended_from" field must be present to do an amendment.');
		return;
	}
	this.validate_form_action("Amend");
	var me = this;
    var fn = function(newdoc) {
      newdoc.amended_from = me.docname;
      if(me.fields_dict && me.fields_dict['amendment_date'])
	      newdoc.amendment_date = dateutil.obj_to_str(new Date());
    }
    this.copy_doc(fn, 1);
	frappe.utils.play_sound("click");
}

_f.Frm.prototype.disable_save = function() {
	// IMPORTANT: this function should be called in refresh event
	this.save_disabled = true;
	this.toolbar.current_status = null;
	this.page.clear_primary_action();
}

_f.Frm.prototype.enable_save = function() {
	this.save_disabled = false;
	this.toolbar.set_primary_action();
}

_f.Frm.prototype.save_or_update = function() {
	if(this.save_disabled) return;

	if(this.doc.docstatus===0) {
		this.save();
	} else if(this.doc.docstatus===1 && this.doc.__unsaved) {
		this.save("Update");
	}
}

_f.Frm.prototype.dirty = function() {
	this.doc.__unsaved = 1;
	$(this.wrapper).trigger('dirty');
}

_f.Frm.prototype.get_docinfo = function() {
	return frappe.model.docinfo[this.doctype][this.docname];
}

_f.Frm.prototype.is_dirty = function() {
	return this.doc.__unsaved;
}

_f.Frm.prototype.is_new = function() {
	return this.doc.__islocal;
}


_f.Frm.prototype.reload_docinfo = function(callback) {
	var me = this;
	frappe.call({
		method: "frappe.desk.form.load.get_docinfo",
		args: {
			doctype: me.doctype,
			name: me.doc.name
		},
		callback: function(r) {
			// docinfo will be synced
			if(callback) callback(r.docinfo);
			me.timeline.refresh();
			me.assign_to.refresh();
			me.attachments.refresh();
		}
	})
}


_f.Frm.prototype.get_perm = function(permlevel, access_type) {
	return this.perm[permlevel] ? this.perm[permlevel][access_type] : null;
}


_f.Frm.prototype.set_intro = function(txt, append) {
	this.dashboard.set_headline_alert(txt);
	//frappe.utils.set_intro(this, this.body, txt, append);
}

_f.Frm.prototype.set_footnote = function(txt) {
	frappe.utils.set_footnote(this, this.body, txt);
}


_f.Frm.prototype.add_custom_button = function(label, fn, group) {
	// temp! old parameter used to be icon
	if(group && group.indexOf("icon")!==-1) group = null;
	return this.page.add_inner_button(label, fn, group);
}

_f.Frm.prototype.clear_custom_buttons = function() {
	this.page.clear_inner_toolbar();
	this.page.clear_user_actions();
}

_f.Frm.prototype.add_fetch = function(link_field, src_field, tar_field) {
	if(!this.fetch_dict[link_field]) {
		this.fetch_dict[link_field] = {'columns':[], 'fields':[]}
	}
	this.fetch_dict[link_field].columns.push(src_field);
	this.fetch_dict[link_field].fields.push(tar_field);
}

_f.Frm.prototype.set_print_heading = function(txt) {
	this.pformat[this.docname] = txt;
}

_f.Frm.prototype.action_perm_type_map = {
	"Create": "create",
	"Save": "write",
	"Submit": "submit",
	"Update": "submit",
	"Cancel": "cancel",
	"Amend": "amend",
	"Delete": "delete"
};

_f.Frm.prototype.validate_form_action = function(action) {
	var perm_to_check = this.action_perm_type_map[action];

	if (!this.perm[0][perm_to_check]) {
		frappe.throw (__("No permission to '{0}' {1}", [__(action), __(this.doc.doctype)]));
	}
};

_f.Frm.prototype.get_handlers = function(fieldname, doctype, docname) {
	return this.script_manager.get_handlers(fieldname, doctype || this.doctype, docname || this.docname)
}

_f.Frm.prototype.has_perm = function(ptype) {
	return frappe.perm.has_perm(this.doctype, 0, ptype, this.doc);
}

_f.Frm.prototype.scroll_to_element = function() {
	if (frappe.route_options && frappe.route_options.scroll_to) {
		var scroll_to = frappe.route_options.scroll_to;
		delete frappe.route_options.scroll_to;

		var selector = [];
		for (var key in scroll_to) {
			var value = scroll_to[key];
			selector.push(repl('[data-%(key)s="%(value)s"]', {key: key, value: value}));
		}

		selector = $(selector.join(" "));
		if (selector.length) {
			frappe.utils.scroll_to(selector);
		}
	} else {
		frappe.utils.scroll_to(0);
	}
}


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/legacy/clientscriptAPI.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

get_server_fields = function(method, arg, table_field, doc, dt, dn, allow_edit, call_back) {
	console.warn("This function 'get_server_fields' has been deprecated and will be removed soon.");
	frappe.dom.freeze();
	if($.isPlainObject(arg)) arg = JSON.stringify(arg);
	return $c('runserverobj',
		args={'method': method, 'docs': JSON.stringify(doc), 'arg': arg },
	function(r, rt) {
		frappe.dom.unfreeze();
		if (r.message)  {
			var d = locals[dt][dn];
			var field_dict = r.message;
			for(var key in field_dict) {
				d[key] = field_dict[key];
				if (table_field)
					refresh_field(key, d.name, table_field);
				else
					refresh_field(key);
			}
		}
		if(call_back){
			doc = locals[doc.doctype][doc.name];
			call_back(doc, dt, dn);
		}
    }
  );
}


set_multiple = function (dt, dn, dict, table_field) {
	var d = locals[dt][dn];
	for(var key in dict) {
		d[key] = dict[key];
		if (table_field)
			refresh_field(key, d.name, table_field);
		else
			refresh_field(key);
	}
}

refresh_many = function (flist, dn, table_field) {
	for(var i in flist) {
		if (table_field)
			refresh_field(flist[i], dn, table_field);
		else
			refresh_field(flist[i]);
	}
}

set_field_tip = function(n,txt) {
	var df = frappe.meta.get_docfield(cur_frm.doctype, n, cur_frm.docname);
	if(df)df.description = txt;

	if(cur_frm && cur_frm.fields_dict) {
		if(cur_frm.fields_dict[n])
			cur_frm.fields_dict[n].comment_area.innerHTML = replace_newlines(txt);
		else
			console.log('[set_field_tip] Unable to set field tip: ' + n);
	}
}

refresh_field = function(n, docname, table_field) {
	// multiple
	if(typeof n==typeof [])
		refresh_many(n, docname, table_field);

	if (n && typeof n==='string' && table_field){
		var grid = cur_frm.fields_dict[table_field].grid,
			field = frappe.utils.filter_dict(grid.docfields, {fieldname: n});
		if (field && field.length){
			field = field[0];
			var meta = frappe.meta.get_docfield(field.parent, field.fieldname, docname);
			$.extend(field, meta);
			if (docname){
				cur_frm.fields_dict[table_field].grid.grid_rows_by_docname[docname].refresh_field(n);
			} else {
				cur_frm.fields_dict[table_field].grid.refresh();
			}
		}
	} else if(cur_frm) {
		cur_frm.refresh_field(n)
	}
}

set_field_options = function(n, txt) {
	cur_frm.set_df_property(n, 'options', txt)
}

set_field_permlevel = function(n, level) {
	cur_frm.set_df_property(n, 'permlevel', level)
}

toggle_field = function(n, hidden) {
	var df = frappe.meta.get_docfield(cur_frm.doctype, n, cur_frm.docname);
	if(df) {
		df.hidden = hidden;
		refresh_field(n);
	}
	else {
		console.log((hidden ? "hide_field" : "unhide_field") + " cannot find field " + n);
	}
}

hide_field = function(n) {
	if(cur_frm) {
		if(n.substr) toggle_field(n, 1);
		else { for(var i in n) toggle_field(n[i], 1) }
	}
}

unhide_field = function(n) {
	if(cur_frm) {
		if(n.substr) toggle_field(n, 0);
		else { for(var i in n) toggle_field(n[i], 0) }
	}
}

get_field_obj = function(fn) {
	return cur_frm.fields_dict[fn];
}

// set missing values in given doc
set_missing_values = function(doc, dict) {
	// dict contains fieldname as key and "default value" as value
	var fields_to_set = {};

	for (var i in dict) {
		var v = dict[i];
		if (!doc[i]) {
			fields_to_set[i] = v;
		}
	}

	if (fields_to_set) { set_multiple(doc.doctype, doc.name, fields_to_set); }
}

_f.Frm.prototype.get_doc = function() {
	return locals[this.doctype][this.docname];
}

_f.Frm.prototype.field_map = function(fnames, fn) {
	if(typeof fnames==='string') {
		if(fnames == '*') {
			fnames = keys(this.fields_dict);
		} else {
			fnames = [fnames];
		}
	}
	for (var i=0, l=fnames.length; i<l; i++) {
		var fieldname = fnames[i];
		var field = frappe.meta.get_docfield(cur_frm.doctype, fieldname, cur_frm.docname);
		if(field) {
			fn(field);
			cur_frm.refresh_field(fieldname);
		};
	}
}

_f.Frm.prototype.get_docfield = function(fieldname1, fieldname2) {
	if(fieldname2) {
		// for child
		var doctype = this.get_docfield(fieldname1).options;
		return frappe.meta.get_docfield(doctype, fieldname2, this.docname);
	} else {
		// for parent
		return frappe.meta.get_docfield(this.doctype, fieldname1, this.docname);
	}
}

_f.Frm.prototype.set_df_property = function(fieldname, property, value, docname, table_field) {
	if (!docname && !table_field){
		var field = this.get_docfield(fieldname);
	} else {
		var grid = cur_frm.fields_dict[table_field].grid,
		fname = frappe.utils.filter_dict(grid.docfields, {'fieldname': fieldname});
		if (fname && fname.length)
			var field = frappe.meta.get_docfield(fname[0].parent, fieldname, docname);
	}
	if(field) {
		field[property] = value;
		refresh_field(fieldname, table_field);
	};
}

_f.Frm.prototype.toggle_enable = function(fnames, enable) {
	cur_frm.field_map(fnames, function(field) {
		field.read_only = enable ? 0 : 1; });
}

_f.Frm.prototype.toggle_reqd = function(fnames, mandatory) {
	cur_frm.field_map(fnames, function(field) { field.reqd = mandatory ? true : false; });
}

_f.Frm.prototype.toggle_display = function(fnames, show) {
	cur_frm.field_map(fnames, function(field) { field.hidden = show ? 0 : 1; });
}

_f.Frm.prototype.call_server = function(method, args, callback) {
	return $c_obj(cur_frm.doc, method, args, callback);
}

_f.Frm.prototype.get_files = function() {
	return cur_frm.attachments
		? frappe.utils.sort(cur_frm.attachments.get_attachments(), "file_name", "string")
		: [] ;
}

_f.Frm.prototype.set_query = function(fieldname, opt1, opt2) {
	if(opt2) {
		this.fields_dict[opt1].grid.get_field(fieldname).get_query = opt2;
	} else {
		this.fields_dict[fieldname].get_query = opt1;
	}
}

_f.Frm.prototype.set_value_if_missing = function(field, value) {
	this.set_value(field, value, true);
}

_f.Frm.prototype.clear_table = function(fieldname) {
	frappe.model.clear_table(this.doc, fieldname);
}

_f.Frm.prototype.add_child = function(fieldname, values) {
	var doc = frappe.model.add_child(this.doc, frappe.meta.get_docfield(this.doctype, fieldname).options, fieldname);
	if(values) {
		$.extend(doc, values);
	}
	return doc;
}

_f.Frm.prototype.set_value = function(field, value, if_missing) {
	var me = this;
	var _set = function(f, v) {
		var fieldobj = me.fields_dict[f];
		if(fieldobj) {
			if(!if_missing || !frappe.model.has_value(me.doctype, me.doc.name, f)) {
				if(fieldobj.df.fieldtype==="Table" && $.isArray(v)) {

					frappe.model.clear_table(me.doc, fieldobj.df.fieldname);

					for (var i=0, j=v.length; i < j; i++) {
						var d = v[i];
						var child = frappe.model.add_child(me.doc, fieldobj.df.options,
							fieldobj.df.fieldname, i+1);
						$.extend(child, d);
					}

					me.refresh_field(f);

				} else {
					frappe.model.set_value(me.doctype, me.doc.name, f, v);
				}
			}
		} else {
			msgprint("Field " + f + " not found.");
			throw "frm.set_value";
		}
	}

	if(typeof field=="string") {
		_set(field, value)
	} else if($.isPlainObject(field)) {
		for (var f in field) {
			var v = field[f];
			if(me.get_field(f)) {
				_set(f, v);
			}
		}
	}
}

_f.Frm.prototype.call = function(opts, args, callback) {
	var me = this;
	if(typeof opts==='string') {
		// called as frm.call('do_this', {with_arg: 'arg'});
		opts = {
			method: opts,
			doc: this.doc,
			args: args,
			callback: callback
		};
	}
	if(!opts.doc) {
		if(opts.method.indexOf(".")===-1)
			opts.method = frappe.model.get_server_module_name(me.doctype) + "." + opts.method;
		opts.original_callback = opts.callback;
		opts.callback = function(r) {
			if($.isPlainObject(r.message)) {
				if(opts.child) {
					// update child doc
					opts.child = locals[opts.child.doctype][opts.child.name];

					var std_field_list = ["doctype"].concat(frappe.model.std_fields_list);
					for (key in r.message) {
						if (std_field_list.indexOf(key)===-1) {
							opts.child[key] = r.message[key];
						}
					}

					me.fields_dict[opts.child.parentfield].refresh();
				} else {
					// update parent doc
					me.set_value(r.message);
				}
			}
			opts.original_callback && opts.original_callback(r);
		}
	} else {
		opts.original_callback = opts.callback;
		opts.callback = function(r) {
			if(!r.exc) me.refresh_fields();

			opts.original_callback && opts.original_callback(r);
		}

	}
	return frappe.call(opts);
}

_f.Frm.prototype.get_field = function(field) {
	return cur_frm.fields_dict[field];
};


_f.Frm.prototype.set_read_only = function() {
	var perm = [];
	var docperms = frappe.perm.get_perm(cur_frm.doc.doctype);
	for (var i=0, l=docperms.length; i<l; i++) {
		var p = docperms[i];
		perm[p.permlevel || 0] = {read:1};
	}
	cur_frm.perm = perm;
}

_f.Frm.prototype.trigger = function(event) {
	this.script_manager.trigger(event);
};

_f.Frm.prototype.get_formatted = function(fieldname) {
	return frappe.format(this.doc[fieldname],
			frappe.meta.get_docfield(this.doctype, fieldname, this.docname),
			{no_icon:true}, this.doc);
}

_f.Frm.prototype.open_grid_row = function() {
	return frappe.ui.form.get_open_grid_form();
}

_f.Frm.prototype.is_new = function() {
	return this.doc.__islocal;
}

_f.Frm.prototype.get_title = function() {
	if(this.meta.title_field) {
		return this.doc[this.meta.title_field];
	} else {
		return this.doc.name;
	}
}

_f.Frm.prototype.set_indicator_formatter = function(fieldname, get_color, get_text) {
	// get doctype from parent
	if(frappe.meta.docfield_map[this.doctype][fieldname]) {
		doctype = this.doctype;
	} else {
		frappe.meta.get_table_fields(this.doctype).every(function(df) {
			if(frappe.meta.docfield_map[df.options][fieldname]) {
				doctype = df.options;
				return false;
			} else {
				return true;
			}
		})
	}

	frappe.meta.get_docfield(doctype, fieldname, this.doc.name).formatter =
		function(value, df, options, doc) {
			if(value) {
				return repl('<a class="indicator %(color)s" href="#Form/%(doctype)s/%(name)s">%(label)s</a>', {
					color: get_color(doc),
					doctype: df.options,
					name: value,
					label: get_text ? get_text(doc) : value
				});
			} else {
				return '';
			}
		};

}

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/toolbar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form");
frappe.ui.form.Toolbar = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.refresh();
		this.add_update_button_on_dirty();
		this.setup_editable_title();
	},
	refresh: function() {
		this.make_menu();
		this.set_title();
		this.page.clear_user_actions();
		this.show_title_as_dirty();
		this.set_primary_action();

		if(this.frm.meta.hide_toolbar) {
			this.page.hide_menu();
		} else {
			if(this.frm.doc.__islocal) {
				this.page.hide_menu();
				this.print_icon && this.print_icon.addClass("hide");
			} else {
				this.page.show_menu();
				this.print_icon && this.print_icon.removeClass("hide");
			}
		}
	},
	set_title: function() {
		if(this.frm.meta.title_field) {
			var title = strip_html((this.frm.doc[this.frm.meta.title_field] || "").trim() || this.frm.docname);
			if(this.frm.doc.__islocal || title === this.frm.docname || this.frm.meta.autoname==="hash") {
				this.page.set_title_sub("");
			} else {
				this.page.set_title_sub(this.frm.docname);
			}
		} else {
			var title = this.frm.docname;
		}

		var me = this;
		title = __(title);
		this.page.set_title(title);
		if(this.frm.meta.title_field) {
			frappe.utils.set_title(title + " - " + this.frm.docname);
		}
		this.page.$title_area.toggleClass("editable-title",
			!!(this.is_title_editable() || this.can_rename()));

		this.set_indicator();
	},
	is_title_editable: function() {
		if (this.frm.meta.title_field==="title"
			&& this.frm.perm[0].write
			&& !this.frm.get_docfield("title").options) {
			return true;
		} else {
			return false;
		}
	},
	can_rename: function() {
		return this.frm.perm[0].write && this.frm.meta.allow_rename;
	},
	setup_editable_title: function() {
		var me = this;
		this.page.$title_area.find(".title-text").on("click", function() {
			if(me.is_title_editable()) {
				frappe.prompt({fieldname: "title", fieldtype:"Data",
					label: __("Title"), reqd: 1, "default": me.frm.doc.title },
					function(data) {
						if(data.title) {
							me.frm.set_value("title", data.title);
							if(!me.frm.doc.__islocal) {
								me.frm.save_or_update();
							} else {
								me.set_title();
							}
						}
					}, __("Edit Title"), __("Update"));
			}
			if(me.can_rename()) {
				me.frm.rename_doc();
			}
		});
	},
	get_dropdown_menu: function(label) {
		return this.page.add_dropdown(label);
	},
	set_indicator: function() {
		var indicator = frappe.get_indicator(this.frm.doc);
		if(indicator) {
			this.page.set_indicator(indicator[0], indicator[1]);
		} else {
			this.page.clear_indicator();
		}
	},
	make_menu: function() {
		this.page.clear_icons();
		this.page.clear_menu();
		var me = this;
		var p = this.frm.perm[0];
		var docstatus = cint(this.frm.doc.docstatus);
		var is_submittable = frappe.model.is_submittable(this.frm.doc.doctype)

		var print_settings = frappe.model.get_doc(":Print Settings", "Print Settings")
		var allow_print_for_draft = cint(print_settings.allow_print_for_draft);
		var allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled);

		// Print
		if(!is_submittable || docstatus == 1  ||
			(allow_print_for_cancelled && docstatus == 2)||
	 		(allow_print_for_draft && docstatus == 0)) {
			if(frappe.model.can_print(null, me.frm)) {
				this.page.add_menu_item(__("Print"), function() {
					me.frm.print_doc();}, true);
				this.print_icon = this.page.add_action_icon("icon-print", function() {
					me.frm.print_doc();});
			}
		}

		// email
		if(frappe.model.can_email(null, me.frm) && me.frm.doc.docstatus < 2) {
			this.page.add_menu_item(__("Email"), function() {
				me.frm.email_doc();}, true);
		}

		// Linked With
		if(!me.frm.meta.issingle) {
			this.page.add_menu_item(__('Links'), function() {
				me.show_linked_with();
			}, true)
		}

		// copy
		if(in_list(frappe.boot.user.can_create, me.frm.doctype) && !me.frm.meta.allow_copy) {
			this.page.add_menu_item(__("Duplicate"), function() {
				me.frm.copy_doc();}, true);
		}

		// rename
		if(this.can_rename()) {
			this.page.add_menu_item(__("Rename"), function() {
				me.frm.rename_doc();}, true);
		}

		// reload
		this.page.add_menu_item(__("Reload"), function() {
			me.frm.reload_doc();}, true);

		// delete
		if((cint(me.frm.doc.docstatus) != 1) && !me.frm.doc.__islocal
			&& frappe.model.can_delete(me.frm.doctype)) {
			this.page.add_menu_item(__("Delete"), function() {
				me.frm.savetrash();}, true);
		}

		if(in_list(user_roles, "System Manager")) {
			this.page.add_menu_item(__("Customize"), function() {
				frappe.set_route("Form", "Customize Form", {
					doc_type: me.frm.doctype
				})
			}, true);

			if (frappe.boot.developer_mode===1 && me.frm.meta.issingle) {
				// edit doctype
				this.page.add_menu_item(__("Edit DocType"), function() {
					frappe.set_route('Form', 'DocType', me.frm.doctype);
				}, true);
			}
		}

		// New
		if(p[CREATE] && !this.frm.meta.issingle) {
			this.page.add_menu_item(__("New {0} (Ctrl+B)", [__(me.frm.doctype)]), function() {
				frappe.new_doc(me.frm.doctype, true);}, true);
		}

	},
	can_save: function() {
		return this.get_docstatus()===0;
	},
	can_submit: function() {
		return this.get_docstatus()===0
			&& !this.frm.doc.__islocal
			&& !this.frm.doc.__unsaved
			&& this.frm.perm[0].submit
			&& !this.has_workflow();
	},
	can_update: function() {
		return this.get_docstatus()===1
			&& !this.frm.doc.__islocal
			&& this.frm.perm[0].submit
			&& this.frm.doc.__unsaved
	},
	can_cancel: function() {
		return this.get_docstatus()===1
			&& this.frm.perm[0].cancel
			&& !this.read_only
			&& !this.has_workflow();
	},
	can_amend: function() {
		return this.get_docstatus()===2
			&& this.frm.perm[0].amend
			&& !this.read_only;
	},
	has_workflow: function() {
		if(this._has_workflow === undefined)
			this._has_workflow = frappe.get_list("Workflow", {document_type: this.frm.doctype}).length;
		return this._has_workflow;
	},
	get_docstatus: function() {
		return cint(this.frm.doc.docstatus);
	},
	show_linked_with: function() {
		if(!this.frm.linked_with) {
			this.frm.linked_with = new frappe.ui.form.LinkedWith({
				frm: this.frm
			});
		}
		this.frm.linked_with.show();
	},
	set_primary_action: function(dirty) {
		if (!dirty) {
			// don't clear actions menu if dirty
			this.page.clear_user_actions();
		}

		var status = this.get_action_status();
		if (status) {
			if (status !== this.current_status) {
				this.set_page_actions(status);
			}
		} else {
			this.page.clear_actions();
		}
	},
	get_action_status: function() {
		var status = null;
		if (this.frm.page.current_view_name==='print' || this.frm.hidden) {
			status = "Edit";
		} else if (this.can_submit()) {
			status = "Submit";
		} else if (this.can_save()) {
			if (!this.frm.save_disabled) {
				status = "Save";
			}
		} else if (this.can_update()) {
			status = "Update";
		} else if (this.can_cancel()) {
			status = "Cancel";
		} else if (this.can_amend()) {
			status = "Amend";
		}
		return status;
	},
	set_page_actions: function(status) {
		var me = this;
		this.page.clear_actions();

		if(status!== 'Edit') {
			var perm_to_check = this.frm.action_perm_type_map[status];
			if(!this.frm.perm[0][perm_to_check]) {
				return;
			}
		}

		if(status === "Edit") {
			this.page.set_primary_action(__("Edit"), function() {
				me.frm.page.set_view('main');
				me.frm.set_hidden(false);
			}, 'octicon octicon-pencil');
		} else if(status === "Cancel") {
			this.page.set_secondary_action(__(status), function() {
				me.frm.savecancel(this);
			}, "octicon octicon-circle-slash");
		} else {
			var click = {
				"Save": function() {
					me.frm.save('Save', null, this);
				},
				"Submit": function() {
					me.frm.savesubmit(this);
				},
				"Update": function() {
					me.frm.save('Update', null, this);
				},
				"Amend": function() {
					me.frm.amend_doc();
				}
			}[status];

			var icon = {
				"Save": "octicon octicon-check",
				"Submit": "octicon octicon-lock",
				"Update": "octicon octicon-check",
				"Amend": "octicon octicon-split"
			}[status];

			this.page.set_primary_action(__(status), click, icon);
		}

		this.current_status = status;
	},
	make_cancel_amend_button: function() {
		var me = this;
		var docstatus = cint(this.frm.doc.docstatus);
		var p = this.frm.perm[0];
		var has_workflow = this.has_workflow();

		if(has_workflow) {
			return;
		} else if(docstatus==1 && p[CANCEL]) {
			this.page.set_secondary_action(__('Cancel'), function() {
				me.frm.savecancel(this) }, 'icon-ban-circle');
		} else if(docstatus==2 && p[AMEND]) {
			this.page.set_secondary_action(__('Amend'), function() {
				me.frm.amend_doc() }, 'icon-pencil', true);
		}
	},
	add_update_button_on_dirty: function() {
		var me = this;
		$(this.frm.wrapper).on("dirty", function() {
			me.show_title_as_dirty();

			// clear workflow actions
			me.frm.page.clear_actions_menu();

			// enable save action
			if(!me.frm.save_disabled) {
				me.set_primary_action(true);
			}
		});
	},
	show_title_as_dirty: function() {
		if(this.frm.save_disabled)
			return;

		if(this.frm.doc.__unsaved) {
			this.page.set_indicator(__("Not Saved"), "orange");
		}

		$(this.frm.wrapper).attr("data-state", this.frm.doc.__unsaved ? "dirty" : "clean");
	}
})


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/dashboard.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.form.Dashboard = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.wrapper = $(frappe.render_template('form_dashboard',
			{frm: this.frm})).prependTo(this.frm.layout.wrapper);

		this.headline = this.wrapper.find('.form-headline');
		this.progress_area = this.wrapper.find(".progress-area");
		this.heatmap_area = this.wrapper.find('.form-heatmap');
		this.chart_area = this.wrapper.find('.form-chart');
		this.stats_area = this.wrapper.find('.form-stats');
		this.links_area = this.wrapper.find('.form-links');
		this.transactions_area = this.links_area.find('.transactions');

	},
	reset: function() {
		this.wrapper.addClass('hidden');
		this.clear_headline();

		// clear progress
		this.progress_area.empty().addClass('hidden');

		// clear links
		this.links_area.addClass('hidden');
		this.links_area.find('.count, .open-notification').addClass('hidden');

		// clear stats
		this.stats_area.empty().addClass('hidden');

		// clear custom
		this.wrapper.find('.custom').remove();
	},
	set_headline: function(html) {
		this.headline.html(html).removeClass('hidden');
		this.show();
	},
	clear_headline: function() {
		if(this.headline) {
			this.headline.empty().addClass('hidden');
		}
	},

	add_comment: function(text, permanent) {
		var me = this;
		this.set_headline_alert(text);
		if(!permanent) {
			setTimeout(function() {
				me.clear_headline();
			}, 10000);
		}
	},

	clear_comment: function() {
		this.clear_headline();
	},

	set_headline_alert: function(text, alert_class) {
		if(text) {
			if(!alert_class) alert_class = "alert-warning";
			this.set_headline(repl('<div class="alert %(alert_class)s">%(text)s</div>', {
				"alert_class": alert_class || "",
				"text": text
			}));
		} else {
			this.clear_headline();
		}
	},

	add_section: function(html) {
		return $('<div class="form-dashboard-section custom">'+html+'</div>').appendTo(this.wrapper);
	},

	add_progress: function(title, percent, message) {
		var progress_chart = this.make_progress_chart(title);

		if(!$.isArray(percent)) {
			percent = this.format_percent(title, percent);
		}

		var progress = $('<div class="progress"></div>').appendTo(progress_chart);
		$.each(percent, function(i, opts) {
			$(repl('<div class="progress-bar %(progress_class)s" style="width: %(width)s" \
				title="%(title)s"></div>', opts)).appendTo(progress);
		});

		if(message) {
			$('<p class="text-muted small">' + message + '</p>').appendTo(this.progress_area);
		}

		this.show();
	},
	format_percent: function(title, percent) {
		var width = cint(percent) < 1 ? 1 : cint(percent);
		var progress_class = "";
		if(width < 10)
			progress_class = "progress-bar-danger";
		if(width > 99.9)
			progress_class = "progress-bar-success";

		return [{
			title: title,
			width: width + '%',
			progress_class: progress_class
		}];
	},
	make_progress_chart: function(title) {
		var progress_chart = $('<div class="progress-chart" title="'+(title || '')+'"></div>')
			.appendTo(this.progress_area.removeClass('hidden'));
		return progress_chart;
	},

	refresh: function() {
		this.reset();
		if(this.frm.doc.__islocal) {
			return;
		}

		if(!this.data) {
			this.init_data();
		}

		var show = false;

		if(this.data && (this.data.transactions || []).length) {
			if(this.data.docstatus && this.frm.doc.docstatus !== this.data.docstatus) {
				// limited docstatus
				return;
			}
			this.render_links();
			this.set_open_count();
			show = true;
		}

		if(this.data.heatmap) {
			this.render_heatmap();
			show = true;
		}

		if(show) {
			this.show();
		}
	},

	init_data: function() {
		this.data = this.frm.meta.__dashboard || {};
		if(!this.data.transactions) this.data.transactions = [];
		if(!this.data.internal_links) this.data.internal_links = {};
		this.filter_permissions();
	},

	filter_permissions: function() {
		// filter out transactions for which the user
		// does not have permission
		var transactions = [];
		(this.data.transactions || []).forEach(function(group) {
			var items = [];
			group.items.forEach(function(doctype) {
				if(frappe.model.can_read(doctype)) {
					items.push(doctype);
				}
			});

			// only add thie group, if there is atleast
			// one item with permission
			if(items.length) {
				group.items = items;
				transactions.push(group);
			}
		});
		this.data.transactions = transactions;
	},
	render_links: function() {
		var me = this;
		this.links_area.removeClass('hidden');
		if(this.data_rendered) {
			return;
		}

		$(frappe.render_template('form_links',
			{transactions: this.data.transactions}))
			.appendTo(this.transactions_area)

		// bind links
		this.transactions_area.find(".badge-link").on('click', function() {
			me.open_document_list($(this).parent());
		});

		// bind open notifications
		this.transactions_area.find('.open-notification').on('click', function() {
			me.open_document_list($(this).parent(), true);
		});

		this.data_rendered = true;
	},
	open_document_list: function($link, show_open) {
		// show document list with filters
		var doctype = $link.attr('data-doctype'),
			names = $link.attr('data-names') || [];

		if(this.data.internal_links[doctype]) {
			if(names.length) {
				frappe.route_options = {'name': ['in', names]};
			} else {
				return false;
			}
		} else {
			frappe.route_options = this.get_document_filter(doctype);
			if(show_open) {
				$.extend(frappe.route_options, frappe.ui.notifications.get_filters(doctype));
			}
		}

		frappe.set_route("List", doctype);
	},
	get_document_filter: function(doctype) {
		// return the default filter for the given document
		// like {"customer": frm.doc.name}
		var filter = {};
		var fieldname = this.data.non_standard_fieldnames
			? (this.data.non_standard_fieldnames[doctype] || this.data.fieldname)
			: this.data.fieldname;
		filter[fieldname] = this.frm.doc.name;
		return filter;
	},
	set_open_count: function() {
		if(!this.data.transactions) {
			return;
		}

		// list all items from the transaction list
		var items = [],
			me = this;

		this.data.transactions.forEach(function(group) {
			group.items.forEach(function(item) { items.push(item); });
		});

		method = this.data.method || 'frappe.desk.notifications.get_open_count';

		frappe.call({
			type: "GET",
			method: method,
			args: {
				doctype: this.frm.doctype,
				name: this.frm.doc.name,
			},
			callback: function(r) {
				if(r.message.timeline_data) {
					me.update_heatmap(r.message.timeline_data);
				}

				// update badges
				$.each(r.message.count, function(i, d) {
					me.frm.dashboard.set_badge_count(d.name, cint(d.open_count), cint(d.count));
				});

				// update from internal links
				$.each(me.data.internal_links, function(doctype, link) {
					var table_fieldname = link[0], link_fieldname = link[1];
					var names = [];
					(me.frm.doc[table_fieldname] || []).forEach(function(d) {
						var value = d[link_fieldname];
						if(value && names.indexOf(value)===-1) {
							names.push(value);
						}
					});
					me.frm.dashboard.set_badge_count(doctype, 0, names.length, names);
				});

				me.frm.dashboard_data = r.message;
				me.frm.trigger('dashboard_update');
			}
		});

	},
	set_badge_count: function(doctype, open_count, count, names) {
		var $link = $(this.transactions_area)
			.find('.document-link[data-doctype="'+doctype+'"]');

		if(open_count) {
			$link.find('.open-notification')
				.removeClass('hidden')
				.html((open_count > 5) ? '5+' : open_count);
		}

		if(count) {
			$link.find('.count')
				.removeClass('hidden')
				.html((count > 9) ? '9+' : count);
		}

		if(this.data.internal_links[doctype]) {
			if(names && names.length) {
				$link.attr('data-names', names ? names.join(',') : '');
			} else {
				$link.find('a').attr('disabled', true);
			}
		}
	},

	update_heatmap: function(data) {
		if(this.heatmap) {
			this.heatmap.update(data);
		}
	},

	// heatmap
	render_heatmap: function() {
		if(!this.heatmap) {
			this.heatmap = new CalHeatMap();
			this.heatmap.init({
				itemSelector: "#heatmap-" + this.frm.doctype,
				domain: "month",
				subDomain: "day",
				start: moment().subtract(1, 'year').add(1, 'month').toDate(),
				cellSize: 9,
				cellPadding: 2,
				domainGutter: 2,
				range: 12,
				domainLabelFormat: function(date) {
					return moment(date).format("MMM").toUpperCase();
				},
				displayLegend: false,
				legend: [5, 10, 15, 20]
				// subDomainTextFormat: "%d",
			});

			// center the heatmap
			this.heatmap_area.removeClass('hidden').find('svg').css({'margin': 'auto'});

			// message
			var heatmap_message = this.heatmap_area.find('.heatmap-message');
			if(this.data.heatmap_message) {
				heatmap_message.removeClass('hidden').html(this.data.heatmap_message);
			} else {
				heatmap_message.addClass('hidden');
			}
 		}
	},

	// stats
	add_stats: function(html) {
		this.stats_area.html(html).removeClass('hidden');
		this.show();
	},

	//graphs
	setup_chart: function(opts) {
		var me = this;

		this.chart_area.removeClass('hidden');

		$.extend(opts, {
			wrapper: me.wrapper,
			bind_to: ".form-chart",
			padding: {
				right: 30,
				bottom: 30
			}
		});

		this.chart = new frappe.ui.Chart(opts);
		if(this.chart) {
			this.show();
			this.chart.set_chart_size(me.wrapper.width() - 60);
		}
	},
	show: function() {
		this.wrapper.removeClass('hidden');
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/document_flow.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.document_flow');

frappe.ui.form.DocumentFlow = Class.extend({
	init: function(opts) {
		$.extend(this, opts);

		this.module = frappe.get_meta(this.frm.doctype).module
		if (!frappe.document_flow || !frappe.document_flow[this.module]) {
			return;
		}
		this.doctypes = frappe.document_flow[this.module][this.frm.doctype];
		if (!this.doctypes) {
			return;
		}

		this.wrapper = $('<div class="document-flow-wrapper hidden"></div>').prependTo(this.frm.layout.wrapper);
	},

	refresh: function() {
		if(this.doctypes) {
			this.reset();
			this.render();
		}
	},

	reset: function() {
		this.wrapper.empty().addClass('hidden');
		this.linked_with = {};
	},

	render: function() {
		var me = this;

		$(frappe.render_template('form_document_flow', {
			frm: this.frm,
			doctypes: this.doctypes,
		})).appendTo(this.wrapper.removeClass('hidden'));

		this.wrapper.on('click', '.document-flow-link', function() {
			var doctype = $(this).attr("data-doctype");
			if (me.frm.doctype != doctype) {
				me.get_linked_docs(doctype);
				return false;
			}
		});

		if (!this.frm.doc.__islocal) {
			this.mark_completed_flow()
		}

	},

	get_linked_docs: function(for_doctype) {
		if(!this.linked_with[for_doctype]) {
			this.linked_with[for_doctype] = new frappe.ui.form.LinkedWith({
				frm: this.frm,
				for_doctype: for_doctype
			});
		}

		this.linked_with[for_doctype].show();
	},

	mark_completed_flow: function() {
		var me = this;
		frappe.call({
			method: "frappe.desk.form.document_flow.get_document_completion_status",
			args: {
				doctypes: me.doctypes,
				frm_doctype: me.frm.doctype,
				frm_docname: me.frm.docname
			},
			callback: function(r){
				if(!r.message) {
					return;
				}
				$.each(me.doctypes, function(i, doctype) {
					if (r.message[doctype] && me.frm.doctype!=doctype) {
						me.wrapper.find("[data-doctype='"+doctype+"']a .indicator")
							.removeClass("darkgrey")
							.addClass("black")
					}
				})
			}
		})
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/save.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form");

frappe.ui.form.save = function(frm, action, callback, btn) {
	$(btn).prop("disabled", true);

	// specified here because there are keyboard shortcuts to save
	var working_label = {
		"Save": __("Saving"),
		"Submit": __("Submitting"),
		"Update": __("Updating"),
		"Amend": __("Amending"),
		"Cancel": __("Cancelling")
	}[toTitle(action)];

	var freeze_message = working_label ? __(working_label) : "";

	var save = function() {
		check_name(function() {
			if(check_mandatory()) {
				_call({
					method: "frappe.desk.form.save.savedocs",
					args: { doc: frm.doc, action:action},
					callback: function(r) {
						$(document).trigger("save", [frm.doc]);
						callback(r);
					},
					btn: btn,
					freeze_message: freeze_message
				});
			} else {
				$(btn).prop("disabled", false);
			}
		});

	};

	var cancel = function() {
		var args = {
			doctype: frm.doc.doctype,
			name: frm.doc.name
		};

		// update workflow state value if workflow exists
		var workflow_state_fieldname = frappe.workflow.get_state_fieldname(frm.doctype);
		if(workflow_state_fieldname) {
			$.extend(args, {
				workflow_state_fieldname: workflow_state_fieldname,
				workflow_state: frm.doc[workflow_state_fieldname]

			});
		}

		_call({
			method: "frappe.desk.form.save.cancel",
			args: args,
			callback: function(r) {
				$(document).trigger("save", [frm.doc]);
				callback(r);
			},
			btn: btn,
			freeze_message: freeze_message
		});
	};

	var check_name = function(callback) {
		var doc = frm.doc;
		var meta = locals.DocType[doc.doctype];
		if(doc.__islocal && (meta && meta.autoname
				&& meta.autoname.toLowerCase()=='prompt')) {
			var d = frappe.prompt(__("Name"), function(values) {
				var newname = values.value;
				if(newname) {
					doc.__newname = strip(newname);
				} else {
					msgprint(__("Name is required"));
					throw "name required";
				}

				callback();

			}, __('Enter the name of the new {0}', [doc.doctype]), __("Create"));

			if(doc.__newname) {
				d.set_value("value", doc.__newname);
			}

			d.onhide = function() {
				$(btn).prop("disabled", false);
			}
		} else {
			callback();
		}
	};

	var check_mandatory = function() {
		var me = this;
		var has_errors = false;
		frm.scroll_set = false;

		if(frm.doc.docstatus==2) return true; // don't check for cancel

		$.each(frappe.model.get_all_docs(frm.doc), function(i, doc) {

			if(doc.parent && doc.__unedited) {
				frappe.model.remove_from_locals(doc.doctype, doc.name);
				return;
			}

			var error_fields = [];
			var folded = false;

			$.each(frappe.meta.docfield_list[doc.doctype] || [], function(i, docfield) {
				if(docfield.fieldname) {
					var df = frappe.meta.get_docfield(doc.doctype,
						docfield.fieldname, frm.doc.name);

					if(df.fieldtype==="Fold") {
						folded = frm.layout.folded;
					}

					if(df.reqd && !frappe.model.has_value(doc.doctype, doc.name, df.fieldname)) {
						has_errors = true;
						error_fields[error_fields.length] = __(df.label);

						// scroll to field
						if(!me.scroll_set) {
							scroll_to(doc.parentfield || df.fieldname);
						}

						if(folded) {
							frm.layout.unfold();
							folded = false;
						}
					}

				}
			});
			if(error_fields.length)
				msgprint(__('Mandatory fields required in {0}', [(doc.parenttype
					? (__(frappe.meta.docfield_map[doc.parenttype][doc.parentfield].label) + ' ('+ __("Table") + ')')
					: __(doc.doctype))]) + '\n' + error_fields.join('\n'));
		});

		return !has_errors;
	};

	var scroll_to = function(fieldname) {
		var f = cur_frm.fields_dict[fieldname];
		if(f) {
			$(document).scrollTop($(f.wrapper).offset().top - 60);
		}
		frm.scroll_set = true;
	};

	var _call = function(opts) {
		// opts = {
		// 	method: "some server method",
		// 	args: {args to be passed},
		// 	callback: callback,
		// 	btn: btn
		// }
		$(opts.btn).prop("disabled", true);

		if(frappe.ui.form.is_saving) {
			// this is likely to happen if the user presses the shortcut cmd+s for a longer duration or uses double click
			// no need to show this to user, as they can see "Saving" in freeze message
			console.log("Already saving. Please wait a few moments.")
			throw "saving";
		}
		frappe.ui.form.is_saving = true;

		return frappe.call({
			freeze: true,
			freeze_message: opts.freeze_message,
			method: opts.method,
			args: opts.args,
			btn: opts.btn,
			callback: function(r) {
				opts.callback && opts.callback(r);
			},
			always: function(r) {
				frappe.ui.form.is_saving = false;

				var doc = r.docs && r.docs[0];
				if(doc) {
					frappe.ui.form.update_calling_link(doc.name);
				}
			}
		})
	};

	if(action==="cancel") {
		cancel();
	} else {
		save();
	}
}

frappe.ui.form.update_calling_link = function(name) {
	if(frappe._from_link) {
		// set value
		frappe.model.set_value(frappe._from_link.doctype,
			frappe._from_link.docname, frappe._from_link.df.fieldname, name);

		// refresh field
		frappe._from_link.refresh();

		// if from form, switch
		if(frappe._from_link.frm) {
			frappe.set_route("Form", frappe._from_link.frm.doctype, frappe._from_link.frm.docname);
			setTimeout(function() { frappe.utils.scroll_to(frappe._from_link_scrollY); }, 100);
		}

		frappe._from_link = null;
	}
}



/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/script_manager.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form.handlers");

frappe.ui.form.get_event_handler_list = function(doctype, fieldname) {
	if(!frappe.ui.form.handlers[doctype]) {
		frappe.ui.form.handlers[doctype] = {};
	}
	if(!frappe.ui.form.handlers[doctype][fieldname]) {
		frappe.ui.form.handlers[doctype][fieldname] = [];
	}
	return frappe.ui.form.handlers[doctype][fieldname];
}

frappe.ui.form.on = frappe.ui.form.on_change = function(doctype, fieldname, handler) {
	var add_handler = function(fieldname, handler) {
		var handler_list = frappe.ui.form.get_event_handler_list(doctype, fieldname);
		handler_list.push(handler);

		// add last handler to events so it can be called as
		// frm.events.handler(frm)
		if(cur_frm && cur_frm.doctype===doctype) {
			cur_frm.events[fieldname] = handler;
		}
	}

	if (!handler && $.isPlainObject(fieldname)) {
		// a dict of handlers {fieldname: handler, ...}
		for (var key in fieldname) {
			var fn = fieldname[key];
			if (typeof fn === "function") {
				add_handler(key, fn);
			}
		}
	} else {
		add_handler(fieldname, handler);
	}
}

// remove standard event handlers
frappe.ui.form.off = function(doctype, fieldname, handler) {
	var handler_list = frappe.ui.form.get_event_handler_list(doctype, fieldname);
	if(handler_list.length) {
		frappe.ui.form.handlers[doctype][fieldname] = [];
	}

	if(cur_frm && cur_frm.doctype===doctype && cur_frm.events[fieldname]) {
		delete cur_frm.events[fieldname];
	}

	if(cur_frm && cur_frm.cscript && cur_frm.cscript[fieldname]) {
		delete cur_frm.cscript[fieldname];
	}
}


frappe.ui.form.trigger = function(doctype, fieldname, callback) {
	cur_frm.script_manager.trigger(fieldname, doctype, null, callback);
}

frappe.ui.form.ScriptManager = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
	},
	make: function(ControllerClass) {
		this.frm.cscript = $.extend(this.frm.cscript, new ControllerClass({frm: this.frm}));
	},
	trigger: function(event_name, doctype, name, callback) {
		var me = this;
		doctype = doctype || this.frm.doctype;
		name = name || this.frm.docname;
		handlers = this.get_handlers(event_name, doctype, name, callback);
		if(callback) handlers.push(callback);

		return $.when.apply($, $.map(handlers, function(fn) { return fn(); }));
	},
	get_handlers: function(event_name, doctype, name, callback) {
		var handlers = [];
		var me = this;
		if(frappe.ui.form.handlers[doctype] && frappe.ui.form.handlers[doctype][event_name]) {
			$.each(frappe.ui.form.handlers[doctype][event_name], function(i, fn) {
				handlers.push(function() { return fn(me.frm, doctype, name) });
			});
		}
		if(this.frm.cscript[event_name]) {
			handlers.push(function() { return me.frm.cscript[event_name](me.frm.doc, doctype, name); });
		}
		if(this.frm.cscript["custom_" + event_name]) {
			handlers.push(function() { return me.frm.cscript["custom_" + event_name](me.frm.doc, doctype, name); });
		}
		return handlers;
	},
	setup: function() {
		var doctype = this.frm.meta;
		var me = this;

		// js
		var cs = doctype.__js;
		if(cs) {
			var tmp = eval(cs);
		}

		function setup_add_fetch(df) {
			if((df.fieldtype==="Read Only" || df.read_only==1)
				&& df.options && df.options.indexOf(".")!=-1) {
				var parts = df.options.split(".");
				me.frm.add_fetch(parts[0], parts[1], df.fieldname);
			}
		}

		// setup add fetch
		$.each(this.frm.fields, function(i, field) {
			setup_add_fetch(field.df);
			if(field.df.fieldtype==="Table") {
				$.each(frappe.meta.get_docfields(field.df.options, me.frm.docname), function(i, df) {
					setup_add_fetch(df);
				});
			}
		});

		// css
		doctype.__css && frappe.dom.set_style(doctype.__css);

		this.trigger('setup');
	},
	log_error: function(caller, e) {
		show_alert("Error in Client Script.");
		console.group && console.group();
		console.log("----- error in client script -----");
		console.log("method: " + caller);
		console.log(e);
		console.log("error message: " + e.message);
		console.trace && console.trace();
		console.log("----- end of error message -----");
		console.group && console.groupEnd();
	},
	validate_link_and_fetch: function(df, doctype, docname, value, callback) {
		var me = this;

		if(value) {
			var fetch = '';

			if(this.frm && this.frm.fetch_dict[df.fieldname])
				fetch = this.frm.fetch_dict[df.fieldname].columns.join(', ');

			return frappe.call({
				method:'frappe.desk.form.utils.validate_link',
				type: "GET",
				args: {
					'value': value,
					'options': doctype,
					'fetch': fetch
				},
				no_spinner: true,
				callback: function(r) {
					if(r.message=='Ok') {
						if(r.fetch_values)
							me.set_fetch_values(df, docname, r.fetch_values);
						if(callback) callback(r.valid_value);
					} else {
						if(callback) callback("");
					}
				}
			});
		} else if(callback) {
			callback(value);
		}
	},
	set_fetch_values: function(df, docname, fetch_values) {
		var fl = this.frm.fetch_dict[df.fieldname].fields;
		for(var i=0; i < fl.length; i++) {
			frappe.model.set_value(df.parent, docname, fl[i], fetch_values[i], df.fieldtype);
		}
	},
	copy_from_first_row: function(parentfield, current_row, fieldnames) {
		var doclist = this.frm.doc[parentfield];
		if(doclist.length===1 || doclist[0]===current_row) return;

		$.each(fieldnames, function(i, fieldname) {
			current_row[fieldname] = doclist[0][fieldname];
		});
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/grid.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.form.get_open_grid_form = function() {
	return $(".grid-row-open").data("grid_row");
}

frappe.ui.form.close_grid_form = function() {
	var open_form = frappe.ui.form.get_open_grid_form();
	open_form && open_form.hide_form();

	// hide editable row too
	if(frappe.ui.form.editable_row) {
		frappe.ui.form.editable_row.toggle_editable_row(false);
	}
}


frappe.ui.form.Grid = Class.extend({
	init: function(opts) {
		var me = this;
		$.extend(this, opts);
		this.fieldinfo = {};
		this.doctype = this.df.options;
		this.meta = frappe.get_meta(this.doctype);
		this.fields_map = {};
		this.template = null;
		this.multiple_set = false;
		if(this.frm.meta.__form_grid_templates
			&& this.frm.meta.__form_grid_templates[this.df.fieldname]) {
				this.template = this.frm.meta.__form_grid_templates[this.df.fieldname];
		}

		this.is_grid = true;
	},

	allow_on_grid_editing: function() {
		if(frappe.utils.is_xs()) {
			return false;
		} else if(this.meta.editable_grid) {
			return true;
		} else {
			return false;
		}
	},
	make: function() {
		var me = this;

		this.wrapper = $(frappe.render_template("grid_body", {}))
			.appendTo(this.parent)
			.attr("data-fieldname", this.df.fieldname);

		this.wrapper.find(".grid-add-row").click(function() {
			me.add_new_row(null, null, true);
			me.set_focus_on_row();
			return false;
		});

		this.custom_buttons = {};
		this.grid_buttons = this.wrapper.find('.grid-buttons');

		this.setup_allow_bulk_edit();

	},
	make_head: function() {
		// labels
		if(!this.header_row) {
			this.header_row = new frappe.ui.form.GridRow({
				parent: $(this.parent).find(".grid-heading-row"),
				parent_df: this.df,
				docfields: this.docfields,
				frm: this.frm,
				grid: this
			});
		}
	},
	refresh: function(force) {
		!this.wrapper && this.make();
		var me = this,
			$rows = $(me.parent).find(".rows"),
			data = this.get_data();

		this.setup_fields();
		this.display_status = frappe.perm.get_field_display_status(this.df, this.frm.doc,
			this.perm);

		if(this.display_status==="None") return;

		if(!force && this.data_rows_are_same(data)) {
			// soft refresh
			this.header_row && this.header_row.refresh();
			for(var i in this.grid_rows) {
				this.grid_rows[i].refresh();
			}
		} else {
			// redraw
			var _scroll_y = $(document).scrollTop();

			this.make_head();

			if(!this.grid_rows) {
				this.grid_rows = [];
			}

			this.truncate_rows(data);
			this.grid_rows_by_docname = {};


			for(var ri=0;ri < data.length; ri++) {
				var d = data[ri];

				if(this.grid_rows[ri]) {
					var grid_row = this.grid_rows[ri];
					grid_row.doc = d;
					grid_row.refresh();
				} else {
					var grid_row = new frappe.ui.form.GridRow({
						parent: $rows,
						parent_df: this.df,
						docfields: this.docfields,
						doc: d,
						frm: this.frm,
						grid: this
					});
					this.grid_rows.push(grid_row);
				}

				this.grid_rows_by_docname[d.name] = grid_row;
			}

			this.wrapper.find(".grid-empty").toggleClass("hide", !!data.length);

			// toolbar
			this.setup_toolbar();

			// sortable
			if(this.is_sortable() && !this.sortable_setup_done) {
				this.make_sortable($rows);
				this.sortable_setup_done = true;
			}

			this.last_display_status = this.display_status;
			this.last_docname = this.frm.docname;
			frappe.utils.scroll_to(_scroll_y);
		}
	},
	setup_toolbar: function() {
		if(this.is_editable()) {
			this.wrapper.find(".grid-footer").toggle(true);

			// show, hide buttons to add rows
			if(this.cannot_add_rows) {
				// add 'hide' to buttons
				this.wrapper.find(".grid-add-row, .grid-add-multiple-rows")
					.addClass('hide');
			} else {
				// show buttons
				this.wrapper.find(".grid-add-row").removeClass('hide');

				if(this.multiple_set) {
					this.wrapper.find(".grid-add-multiple-rows").removeClass('hide')
				}
			}

		} else {
			this.wrapper.find(".grid-footer").toggle(false);
		}

	},
	truncate_rows: function(data) {
		if(this.grid_rows.length > data.length) {
			// remove extra rows
			for(var i=data.length; i < this.grid_rows.length; i++) {
				var grid_row = this.grid_rows[i];
				grid_row.wrapper.remove();
			}
			this.grid_rows.splice(data.length);
		}
	},
	setup_fields: function() {
		var me = this;
		if (this.frm && this.frm.docname) {
			// use doc specific docfield object
			this.df = frappe.meta.get_docfield(this.frm.doctype, this.df.fieldname,
					this.frm.docname);
		} else {
			// use non-doc specific docfield
			this.df = frappe.meta.get_docfield(this.df.options, this.df.fieldname);
		}

		this.docfields = frappe.meta.get_docfields(this.doctype, this.frm.docname);

		this.docfields.forEach(function(df) {
			me.fields_map[df.fieldname] = df;
		});
	},
	refresh_row: function(docname) {
		this.grid_rows_by_docname[docname] &&
			this.grid_rows_by_docname[docname].refresh();
	},
	data_rows_are_same: function(data) {
		if(this.grid_rows) {
			var same = data.length==this.grid_rows.length
				&& this.display_status==this.last_display_status
				&& this.frm.docname==this.last_docname
				&& !$.map(this.grid_rows, function(g, i) {
					return (g && g.doc && g.doc.name==data[i].name) ? null : true;
				}).length;

			return same;
		}
	},
	make_sortable: function($rows) {
		var me =this;
		if ('ontouchstart' in window) {
			return;
		}

		new Sortable($rows.get(0), {
			handle: ".sortable-handle",
			onUpdate: function(event, ui) {
				me.frm.doc[me.df.fieldname] = [];
				$rows.find(".grid-row").each(function(i, item) {
					var doc = locals[me.doctype][$(item).attr('data-name')];
					doc.idx = i + 1;
					me.frm.doc[me.df.fieldname].push(doc);
				});

				// re-order grid-rows by name
				me.grid_rows = [];
				me.frm.doc[me.df.fieldname].forEach(function(d) {
					me.grid_rows.push(me.grid_rows_by_docname[d.name]);
				});

				me.refresh();

				me.frm.dirty();
			}
		});

		$(this.frm.wrapper).trigger("grid-make-sortable", [this.frm]);
	},
	get_data: function() {
		var data = this.frm.doc[this.df.fieldname] || [];
		data.sort(function(a, b) { return a.idx - b.idx});
		return data;
	},
	set_column_disp: function(fieldname, show) {
		if($.isArray(fieldname)) {
			var me = this;
			for(var i=0, l=fieldname.length; i<l; i++) {
				var fname = fieldname[i];
				me.get_docfield(fname).hidden = show ? 0 : 1;
			}
		} else {
			this.get_docfield(fieldname).hidden = show ? 0 : 1;
		}

		this.refresh(true);
	},
	toggle_reqd: function(fieldname, reqd) {
		this.get_docfield(fieldname).reqd = reqd;
		this.refresh();
	},
	toggle_enable: function(fieldname, enable) {
		this.get_docfield(fieldname).read_only = enable ? 0 : 1;;
		this.refresh();
	},
	get_docfield: function(fieldname) {
		return frappe.meta.get_docfield(this.doctype, fieldname, this.frm ? this.frm.docname : null);
	},
	get_grid_row: function(docname) {
		return this.grid_rows_by_docname[docname];
	},
	get_field: function(fieldname) {
		// Note: workaround for get_query
		if(!this.fieldinfo[fieldname])
			this.fieldinfo[fieldname] = {
			}
		return this.fieldinfo[fieldname];
	},
	set_value: function(fieldname, value, doc) {
		if(this.display_status!=="None" && this.grid_rows_by_docname[doc.name]) {
			this.grid_rows_by_docname[doc.name].refresh_field(fieldname);
		}
	},
	add_new_row: function(idx, callback, show) {
		if(this.is_editable()) {
			var d = frappe.model.add_child(this.frm.doc, this.df.options, this.df.fieldname, idx);
			d.__unedited = true;
			this.frm.script_manager.trigger(this.df.fieldname + "_add", d.doctype, d.name);
			this.refresh();

			if(show) {
				if(idx) {
					// always open inserted rows
					this.wrapper.find("[data-idx='"+idx+"']").data("grid_row")
						.toggle_view(true, callback);
				} else {
					if(!this.allow_on_grid_editing()) {
						// open last row only if on-grid-editing is disabled
						this.wrapper.find(".grid-row:last").data("grid_row")
							.toggle_view(true, callback);
					}
				}
			}

			return d;
		}
	},

	set_focus_on_row: function(idx) {
		var me = this;
		if(!idx) {
			idx = me.grid_rows.length - 1;
		}
		setTimeout(function() {
			me.grid_rows[idx].row
				.find('input,textarea,select').filter(':visible:first').focus();
		}, 100);
	},

	setup_visible_columns: function() {
		if(this.visible_columns) return;

		var total_colsize = 1,
			fields = this.editable_fields || this.docfields;

		this.visible_columns = [];

		for(var ci in fields) {
			var _df = fields[ci];

			// get docfield if from fieldname
			df = this.fields_map[_df.fieldname];

			if(!df) {
				throw 'field not found: ' + _df.fieldname;
			}

			// map columns
			if(_df.columns) {
				df.colsize = _df.columns;
			}

			if(!df.hidden
				&& (this.editable_fields || df.in_list_view)
				&& this.frm.get_perm(df.permlevel, "read")
				&& !in_list(frappe.model.layout_fields, df.fieldtype)) {
					if(!df.colsize) {
						var colsize = 2;
						switch(df.fieldtype) {
							case "Text":
							case "Small Text":
								colsize = 3;
								break;
							case "Check":
								colsize = 1;
								break;
						}
						df.colsize = colsize;
					}

					total_colsize += df.colsize
					if(total_colsize > 11)
						return false;
					this.visible_columns.push([df, df.colsize]);
				}
		}

		// redistribute if total-col size is less than 12
		var passes = 0;
		while(total_colsize < 11 && passes < 12) {
			for(var i in this.visible_columns) {
				var df = this.visible_columns[i][0];
				var colsize = this.visible_columns[i][1];
				if(colsize > 1 && colsize < 11
					&& !in_list(frappe.model.std_fields_list, df.fieldname)) {

					if (passes < 3 && ["Int", "Currency", "Float", "Check", "Percent"].indexOf(df.fieldtype)!==-1) {
						// don't increase col size of these fields in first 3 passes
						continue;
					}

					this.visible_columns[i][1] += 1;
					total_colsize++;
				}

				if(total_colsize > 10)
					break;
			}
			passes++;
		}
	},


	is_editable: function() {
		return this.display_status=="Write" && !this.static_rows
	},
	is_sortable: function() {
		return this.sortable_status || this.is_editable();
	},
	only_sortable: function(status) {
		if(status===undefined ? true : status) {
			this.sortable_status = true;
			this.static_rows = true;
		}
	},
	set_multiple_add: function(link, qty) {
		if(this.multiple_set) return;
		var me = this;
		var link_field = frappe.meta.get_docfield(this.df.options, link);
		var btn = $(this.wrapper).find(".grid-add-multiple-rows");

		// show button
		btn.removeClass('hide');

		// open link selector on click
		btn.on("click", function() {
			new frappe.ui.form.LinkSelector({
				doctype: link_field.options,
				fieldname: link,
				qty_fieldname: qty,
				target: me,
				txt: ""
			});
			return false;
		});
		this.multiple_set = true;
	},
	setup_allow_bulk_edit: function() {
		var me = this;
		if(this.frm.get_docfield(this.df.fieldname).allow_bulk_edit) {
			// download
			me.setup_download();

			// upload
			$(this.wrapper).find(".grid-upload").removeClass("hide").on("click", function() {
				frappe.prompt({fieldtype:"Attach", label:"Upload File"},
					function(data) {
						var data = frappe.utils.csv_to_array(frappe.upload.get_string(data.upload_file));
						// row #2 contains fieldnames;
						var fieldnames = data[2];

						me.frm.clear_table(me.df.fieldname);
						$.each(data, function(i, row) {
							if(i > 4) {
								var blank_row = true;
								$.each(row, function(ci, value) {
									if(value) {
										blank_row = false;
										return false;
									}
								});

								if(!blank_row) {
									var d = me.frm.add_child(me.df.fieldname);
									$.each(row, function(ci, value) {
										var fieldname = fieldnames[ci];
										var df = frappe.meta.get_docfield(me.df.options, fieldname);

										// convert date formatting
										if(df.fieldtype==="Date" && value) {
											value = frappe.datetime.user_to_str(value);
										}
										d[fieldnames[ci]] = value;
									});
								}
							}
						});

						me.frm.refresh_field(me.df.fieldname);
						frappe.msgprint({message:__('Table updated'), title:__('Success'), indicator:'green'})

					}, __("Edit via Upload"), __("Update"));
				return false;
			});
		}
	},
	setup_download: function() {
		var me = this;
		$(this.wrapper).find(".grid-download").removeClass("hide").on("click", function() {
			var data = [];
			var docfields = [];
			data.push([__("Bulk Edit {0}", [me.df.label])]);
			data.push([]);
			data.push([]);
			data.push([]);
			data.push(["------"]);
			$.each(frappe.get_meta(me.df.options).fields, function(i, df) {
				if(frappe.model.is_value_type(df.fieldtype)) {
					data[1].push(df.label);
					data[2].push(df.fieldname);
					data[3].push(df.description || "");
					docfields.push(df);
				}
			});

			// add data
			$.each(me.frm.doc[me.df.fieldname] || [], function(i, d) {
				row = [];
				$.each(data[2], function(i, fieldname) {
					var value = d[fieldname];

					// format date
					if(docfields[i].fieldtype==="Date" && value) {
						value = frappe.datetime.str_to_user(value);
					}

					row.push(value || "");
				});
				data.push(row);
			});

			frappe.tools.downloadify(data, null, me.df.label);
			return false;
		});
	},
	add_custom_button: function(label, click) {
		// add / unhide a custom button
		var btn = this.custom_buttons[label];
		if(!btn) {
			btn = $('<button class="btn btn-default btn-xs btn-custom">' + label + '</button>')
				.css('margin-right', '10px')
				.prependTo(this.grid_buttons)
				.on('click', click);
			this.custom_buttons[label] = btn;
		} else {
			btn.removeClass('hidden');
		}
	},
	clear_custom_buttons: function() {
		// hide all custom buttons
		this.grid_buttons.find('.btn-custom').addClass('hidden');
	}
});

frappe.ui.form.GridRow = Class.extend({
	init: function(opts) {
		this.on_grid_fields_dict = {};
		this.on_grid_fields = [];
		this.columns = {};
		this.columns_list = [];
		$.extend(this, opts);
		this.make();
	},
	make: function() {
		var me = this;
		this.wrapper = $('<div class="grid-row"></div>').appendTo(this.parent).data("grid_row", this);
		this.row = $('<div class="data-row row sortable-handle"></div>').appendTo(this.wrapper)
			.on("click", function() {
				if(me.grid.allow_on_grid_editing() && me.grid.is_editable()) {
					// pass
				} else {
					me.toggle_view();
					return false;
				}
			});

		if(this.grid.template && !this.grid.meta.editable_grid) {
			this.render_template();
		} else {
			this.render_row();
		}
		if(this.doc) {
			this.set_data();
		}
	},
	set_data: function() {
		this.wrapper.data({
			"doc": this.doc
		})
	},
	set_row_index: function() {
		if(this.doc) {
			this.wrapper
				.attr('data-name', this.doc.name)
				.attr("data-idx", this.doc.idx)
				.find(".row-index, .grid-form-row-index").html(this.doc.idx)

		}
	},
	remove: function() {
		if(this.grid.is_editable()) {
			if(this.get_open_form()) {
				this.hide_form();
			}

			this.frm.script_manager.trigger("before_" + this.grid.df.fieldname + "_remove",
				this.doc.doctype, this.doc.name);

			//this.wrapper.toggle(false);
			frappe.model.clear_doc(this.doc.doctype, this.doc.name);

			this.frm.script_manager.trigger(this.grid.df.fieldname + "_remove",
				this.doc.doctype, this.doc.name);
			this.frm.dirty();
			this.grid.refresh();
		}
	},
	insert: function(show) {
		var idx = this.doc.idx;
		this.toggle_view(false);
		this.grid.add_new_row(idx, null, show);
	},
	refresh: function() {
		if(this.doc) {
			this.doc = locals[this.doc.doctype][this.doc.name];
		}
		// re write columns
		this.visible_columns = null;

		if(this.grid.template && !this.grid.meta.editable_grid) {
			this.render_template();
		} else {
			this.render_row(true);
		}

		// refersh form fields
		if(this.grid_form) {
			this.grid_form.layout && this.grid_form.layout.refresh(this.doc);
		}
	},
	render_template: function() {
		if(this.row_display) {
			this.row_display.remove();
		}
		var index_html = '';

		// row index
		if(this.doc) {
			if(!this.row_index) {
				this.row_index = $('<div style="float: left; margin-left: 15px; margin-top: 8px; \
					margin-right: -20px;"></div>').appendTo(this.row);
			}
			this.row_index.html(this.doc.idx);
		}

		this.row_display = $('<div class="row-data template-row">'+
			+'</div>').appendTo(this.row)
			.html(frappe.render(this.grid.template, {
				doc: this.doc ? frappe.get_format_helper(this.doc) : null,
				frm: this.frm,
				row: this
			}));
	},
	render_row: function(refresh) {
		var me = this;
		this.set_row_index();

		// index (1, 2, 3 etc)
		if(!this.row_index) {
			this.row_index = $('<div class="row-index col col-xs-1">' + (this.doc ? this.doc.idx : "&nbsp;")+ '</div>')
				.appendTo(this.row)
				.on('click', function() { me.toggle_view(); });
		} else {
			this.row_index.html(this.doc ? this.doc.idx : "&nbsp;");
		}

		this.setup_columns();
		this.add_open_form_button();

		if(this.doc) {
			$(this.frm.wrapper).trigger("grid-row-render", [this]);
		}
	},

	make_editable: function() {
		this.row.toggleClass('editable-row', this.grid.is_editable());
	},

	add_open_form_button: function() {
		var me = this;
		if(this.doc) {
			// remove row
			if(!this.open_form_button) {
				this.open_form_button = $('<a class="close btn-open-row">\
					<span class="octicon octicon-triangle-down"></span></a>')
					.appendTo($('<div class="col col-xs-1"></div>').appendTo(this.row))
					.on('click', function() { me.toggle_view(); return false; });

				if(this.row.width() < 400) {
					// narrow
					this.open_form_button.css({'margin-right': '-2px'});
				}
			}
		}
	},

	setup_columns: function() {
		var me = this;
		this.focus_set = false;
		this.grid.setup_visible_columns();

		for(var ci in this.grid.visible_columns) {
			var df = this.grid.visible_columns[ci][0],
				colsize = this.grid.visible_columns[ci][1],
				txt = this.doc ?
					frappe.format(this.doc[df.fieldname], df, null, this.doc) :
					__(df.label);

			if(this.doc && df.fieldtype === "Select") {
				txt = __(txt);
			}

			if(!this.columns[df.fieldname]) {
				var column = this.make_column(df, colsize, txt, ci);
			} else {
				var column = this.columns[df.fieldname];
				this.refresh_field(df.fieldname, txt);
			}

		}

	},

	make_column: function(df, colsize, txt, ci) {
		var	me = this;
		var add_class = ((["Text", "Small Text"].indexOf(df.fieldtype)!==-1) ?
			" grid-overflow-no-ellipsis" : "");
		add_class += (["Int", "Currency", "Float", "Percent"].indexOf(df.fieldtype)!==-1) ?
			" text-right": "";
		add_class += (["Check"].indexOf(df.fieldtype)!==-1) ?
			" text-center": "";

		$col = $('<div class="col grid-static-col col-xs-'+colsize+' '+add_class+'"></div>')
			.attr("data-fieldname", df.fieldname)
			.attr("data-fieldtype", df.fieldtype)
			.data("df", df)
			.appendTo(this.row)
			.on('click', function() {
				if(frappe.ui.form.editable_row===me) {
					return;
				}
				out = me.toggle_editable_row();
				var col = this;
				setTimeout(function() {
					$(col).find(':input:first').focus();
				}, 500);
				return out;
			});

		$col.field_area = $('<div class="field-area"></div>').appendTo($col).toggle(false);
		$col.static_area = $('<div class="static-area text-ellipsis"></div>').appendTo($col).html(txt);
		$col.df = df;
		$col.column_index = ci;

		this.columns[df.fieldname] = $col;
		this.columns_list.push($col);

		return $col;
	},

	toggle_editable_row: function(show) {
		var me = this;
		// show static for field based on
		// whether grid is editable
		if(this.grid.allow_on_grid_editing() && this.grid.is_editable() && this.doc && show !== false) {

			// disable other editale row
			if(frappe.ui.form.editable_row
				&& frappe.ui.form.editable_row !== this) {
				frappe.ui.form.editable_row.toggle_editable_row(false);
			};

			this.row.toggleClass('editable-row', true);

			// setup controls
			this.columns_list.forEach(function(column) {
				me.make_control(column);
				column.static_area.toggle(false);
				column.field_area.toggle(true);
			});
			frappe.ui.form.editable_row = this;
			return false;
		} else {
			this.row.toggleClass('editable-row', false);
			this.columns_list.forEach(function(column) {
				column.static_area.toggle(true);
				column.field_area && column.field_area.toggle(false);
			});
			frappe.ui.form.editable_row = null;
		}
	},


	make_control: function(column) {
		if(column.field) return;

		var me = this,
			parent = column.field_area,
			df = column.df;


		// no text editor in grid
		if (df.fieldtype=='Text Editor') {
			df.fieldtype = 'Text';
		}

		var field = frappe.ui.form.make_control({
			df: df,
			parent: parent,
			only_input: true,
			with_link_btn: true,
			doctype: this.doc.doctype,
			docname: this.doc.name,
			frm: this.grid.frm
		});

		// sync get_query
		field.get_query = this.grid.get_field(df.fieldname).get_query;
		field.refresh();
		if(field.$input) {
			field.$input.addClass('input-sm');
			field.$input
				.attr('data-col-idx', column.column_index)
				.attr('placeholder', __(df.label));
		}
		this.set_arrow_keys(field);
		column.field = field;
		this.on_grid_fields_dict[df.fieldname] = field;
		this.on_grid_fields.push(field);

	},

	set_arrow_keys: function(field) {
		var me = this;
		if(field.$input) {
			field.$input.on('keydown', function(e) {
				var values = me.frm.doc[me.grid.df.fieldname];
				var fieldname = $(this).attr('data-fieldname');
				// TAB
				if(e.which==TAB) {
					// last column
					if(me.grid.wrapper.find('input:enabled:last').get(0)===this) {
						setTimeout(function() {
							if(me.doc.idx === values.length) {
								// last row
								me.grid.add_new_row(null, null, true);
								me.grid.grid_rows[me.grid.grid_rows.length - 1].toggle_editable_row();
								me.grid.set_focus_on_row();
							} else {
								me.grid.grid_rows[me.doc.idx].toggle_editable_row();
								me.grid.set_focus_on_row(me.doc.idx+1);
							}
						}, 500);
					}
				} else if(e.which==UP_ARROW) {
					if(me.doc.idx > 1) {
						var prev = me.grid.grid_rows[me.doc.idx-2];
						prev.toggle_editable_row();
						setTimeout(function() {
							var input = prev.columns[fieldname].field.$input;
							if(input) {
								input.focus();
							}
						}, 400)
					}
				} else if(e.which==DOWN_ARROW) {
					if(me.doc.idx < values.length) {
						var next = me.grid.grid_rows[me.doc.idx];
						next.toggle_editable_row();
						setTimeout(function() {
							var input = next.columns[fieldname].field.$input;
							if(input) {
								input.focus();
							}
						}, 400)
					}
				}

			});
		}
	},

	get_open_form: function() {
		return frappe.ui.form.get_open_grid_form();
	},

	toggle_view: function(show, callback) {
		if(!this.doc) {
			return this;
		}

		this.doc = locals[this.doc.doctype][this.doc.name];
		// hide other
		var open_row = this.get_open_form();

		if (show===undefined) show = !!!open_row;

		// call blur
		document.activeElement && document.activeElement.blur();

		if(show && open_row) {
			if(open_row==this) {
				// already open, do nothing
				callback && callback();
				return;
			} else {
				// close other views
				open_row.toggle_view(false);
			}
		}

		if(show) {
			this.show_form();
		} else {
			this.hide_form();
		}
		callback && callback();

		return this;
	},
	show_form: function() {
		if(!this.grid_form) {
			this.grid_form = new frappe.ui.form.GridRowForm({
				row: this
			});
		}
		this.grid_form.render();
		this.row.toggle(false);
		// this.form_panel.toggle(true);
		frappe.dom.freeze("", "dark");
		cur_frm.cur_grid = this;
		this.wrapper.addClass("grid-row-open");
		if(!frappe.dom.is_element_in_viewport(this.wrapper)) {
			frappe.utils.scroll_to(this.wrapper, true, 15);
		}
		this.frm.script_manager.trigger(this.doc.parentfield + "_on_form_rendered");
		this.frm.script_manager.trigger("form_render", this.doc.doctype, this.doc.name);
	},
	hide_form: function() {
		frappe.dom.unfreeze();
		this.row.toggle(true);
		this.refresh();
		cur_frm.cur_grid = null;
		this.wrapper.removeClass("grid-row-open");
	},
	open_prev: function() {
		if(this.grid.grid_rows[this.doc.idx-2]) {
			this.grid.grid_rows[this.doc.idx-2].toggle_view(true);
		}
	},
	open_next: function() {
		if(this.grid.grid_rows[this.doc.idx]) {
			this.grid.grid_rows[this.doc.idx].toggle_view(true);
		} else {
			this.grid.add_new_row(null, null, true);
		}
	},
	refresh_field: function(fieldname, txt) {
		if(txt===undefined) {
			var txt = frappe.format(this.doc[fieldname], this.grid.get_docfield(fieldname),
				null, this.frm.doc);
		}

		// reset static value
		var column = this.columns[fieldname];
		if(column) {
			column.static_area.html(txt || "");
		}

		// reset field value
		var field = this.on_grid_fields_dict[fieldname];
		if(field) {
			field.docname = this.doc.name;
			field.refresh();
		}

		// in form
		if(this.grid_form) {
			this.grid_form.refresh_field(fieldname);
		}
	},
	get_visible_columns: function(blacklist) {
		var me = this;
		var visible_columns = $.map(this.docfields, function(df) {
			var visible = !df.hidden && df.in_list_view && me.grid.frm.get_perm(df.permlevel, "read")
				&& !in_list(frappe.model.layout_fields, df.fieldtype) && !in_list(blacklist, df.fieldname);

			return visible ? df : null;
		});
		return visible_columns;
	},
	set_field_property: function(fieldname, property, value) {
		// set a field property for open form / grid form
		var me = this;

		var set_property = function(field) {
			if(!field) return;
			field.df[property] = value;
			field.refresh();
		}

		// set property in grid form
		if(this.grid_form) {
			set_property(this.grid_form.fields_dict[fieldname]);
			this.grid_form.layout && this.grid_form.layout.refresh_sections();
		}

		// set property in on grid fields
		set_property(this.on_grid_fields_dict[fieldname]);
	},
	toggle_reqd: function(fieldname, reqd) {
		this.set_field_property(fieldname, 'reqd', reqd ? 1 : 0);
	},
	toggle_display: function(fieldname, show) {
		this.set_field_property(fieldname, 'hidden', show ? 0 : 1);
	},
	toggle_editable: function(fieldname, editable) {
		this.set_field_property(fieldname, 'read_only', editable ? 0 : 1);
	},
});

frappe.ui.form.GridRowForm = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.wrapper = $('<div class="form-in-grid"></div>')
			.appendTo(this.row.wrapper);

	},
	render: function() {
		var me = this;
		this.make_form();
		this.form_area.empty();

		this.layout = new frappe.ui.form.Layout({
			fields: this.row.docfields,
			body: this.form_area,
			no_submit_on_enter: true,
			frm: this.row.frm,
		});
		this.layout.make();

		this.fields = this.layout.fields;
		this.fields_dict = this.layout.fields_dict;

		this.layout.refresh(this.row.doc);

		// copy get_query to fields
		for(var fieldname in (this.row.grid.fieldinfo || {})) {
			var fi = this.row.grid.fieldinfo[fieldname];
			$.extend(me.fields_dict[fieldname], fi);
		}

		this.toggle_add_delete_button_display(this.wrapper);

		this.row.grid.open_grid_row = this;

		this.set_focus();
	},
	make_form: function() {
		if(!this.form_area) {
			$(frappe.render_template("grid_form", {grid:this})).appendTo(this.wrapper);
			this.form_area = this.wrapper.find(".form-area");
			this.row.set_row_index();
			this.set_form_events();
		}
	},
	set_form_events: function() {
		var me = this;
		this.wrapper.find(".grid-delete-row")
			.click(function() { me.row.remove(); return false; })
		this.wrapper.find(".grid-insert-row")
			.click(function() { me.row.insert(true); return false; })
		this.wrapper.find(".grid-append-row")
			.click(function() {
				me.row.toggle_view(false);
				me.row.grid.add_new_row(me.doc.idx+1, null, true);
				return false;
		})
		this.wrapper.find(".grid-form-heading, .grid-footer-toolbar").on("click", function() {
			me.row.toggle_view();
			return false;
		});
	},
	toggle_add_delete_button_display: function($parent) {
		$parent.find(".grid-delete-row, .grid-insert-row, .grid-append-row")
			.toggle(this.row.grid.is_editable());
	},
	refresh_field: function(fieldname) {
		if(this.fields_dict[fieldname]) {
			this.fields_dict[fieldname].refresh();
			this.layout && this.layout.refresh_dependency();
		}
	},
	set_focus: function() {
		// wait for animation and then focus on the first row
		var me = this;
		setTimeout(function() {
			if(me.row.frm.doc.docstatus===0) {
				var first = me.form_area.find(":input:first");
				if(first.length && !in_list(["Date", "Datetime", "Time"], first.attr("data-fieldtype"))) {
					try {
						first.get(0).focus();
					} catch(e) {
						//
					}
				}
			}
		}, 500);
	},
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/linked_with.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form");

frappe.ui.form.LinkedWith = Class.extend({
	init: function(opts) {
		var me = this;
		$.extend(this, opts);
	},
	show: function() {
		if(!this.dialog)
			this.make_dialog();

		this.dialog.fields_dict.list.$wrapper.html('<div class="text-muted text-center">'
			+ __("Loading") + '...</div>');

		this.dialog.show();
	},
	make_dialog: function() {
		var me = this;

		this.dialog = new frappe.ui.Dialog({
			hide_on_page_refresh: true,
			title: __("Linked With"),
			fields: [
				{ fieldtype: "HTML", label: "list" }
			]
		});

		this.dialog.$wrapper.find(".modal-dialog").addClass("linked-with-dialog");

		this.dialog.on_page_show = function() {
			// execute ajax calls sequentially
			// 1. get linked doctypes
			// 2. load all doctypes
			// 3. load linked docs
			$.when(me.get_linked_doctypes())
				.then(function() { return me.load_doctypes() })
				.then(function() {
					if (me.links_not_permitted_or_missing()) {
						return;
					}

					return me.get_linked_docs();
				});
		}

	},

	load_doctypes: function() {
		var me = this;
		var already_loaded = Object.keys(locals.DocType);
		var doctypes_to_load = [];
		$.each(Object.keys(me.frm.__linked_doctypes), function(i, v) {
			if (already_loaded.indexOf(v)===-1) {
				doctypes_to_load.push(v);
			}
		});

		// load all doctypes sequentially using with_doctype
		return $.when.apply($, $.map(doctypes_to_load, function(dt) {
			return frappe.model.with_doctype(dt, function() {
				if (frappe.listview_settings[dt]) {
					// add additional fields to __linked_doctypes
					me.frm.__linked_doctypes[dt].add_fields = frappe.listview_settings[dt].add_fields;
				}
			}, /*async*/ false);
		}));
	},

	links_not_permitted_or_missing: function() {
		var me = this;
		var links = [];
		$.each(me.frm.__linked_doctypes, function(doctype, tmp) {
			if(frappe.model.can_get_report(doctype)) {
				links.push({label: __(doctype), value: doctype});
			}
		});

		links = frappe.utils.sort(links, "label");

		if(!links) {
			me.dialog.fields_dict.list.$wrapper.html("<div class='alert alert-warning'>"
			+ me.frm.doctype + ": "
			+ (me.frm.__linked_doctypes ? __("Not Linked to any record.") : __("Not enough permission to see links."))
			+ "</div>")
			return true;
		}

		return false;
	},

	get_linked_doctypes: function() {
		var me = this;
		if (this.frm.__linked_doctypes) {
			return;
		}

		return frappe.call({
			method: "frappe.desk.form.linked_with.get_linked_doctypes",
			args: {
				doctype: this.frm.doctype
			},
			callback: function(r) {
				me.frm.__linked_doctypes = r.message;
			}
		});
	},

	get_linked_docs: function() {
		var me = this;
		return frappe.call({
			method:"frappe.desk.form.linked_with.get_linked_docs",
			args: {
				doctype: me.frm.doctype,
				name: me.frm.docname,
				linkinfo: me.frm.__linked_doctypes,
				for_doctype: me.for_doctype
			},
			callback: function(r) {
				var parent = me.dialog.fields_dict.list.$wrapper.empty();

				if(keys(r.message || {}).length) {
					$.each(keys(r.message).sort(), function(i, doctype) {

						if (Object.keys(locals.DocType).indexOf(doctype)=== -1) {
							frappe.model.with_doctype(doctype, function() {
								if (frappe.listview_settings[doctype]) {
									// add additional fields to __linked_doctypes
									me.frm.__linked_doctypes[doctype] = {}
									me.frm.__linked_doctypes[doctype].add_fields = frappe.listview_settings[doctype].add_fields;
								}
							}, /*async*/ false);
						}

						var listview = frappe.views.get_listview(doctype, me);
						listview.no_delete = true;

						var wrapper = $('<div class="panel panel-default"><div>').appendTo(parent);
						$('<div class="panel-heading">').html(__(doctype).bold()).appendTo(wrapper);
						var body = $('<div class="panel-body">').appendTo(wrapper);

						$.each(r.message[doctype], function(i, d) {
							d.doctype = doctype;
							listview.render($('<div class="list-row"></div>')
								.appendTo(body), d, me);
						})
					})
				} else {
					parent.html(__("Not Linked to any record."));
				}
			}
		});
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/workflow.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.form.States = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.state_fieldname = frappe.workflow.get_state_fieldname(this.frm.doctype);

		// no workflow?
		if(!this.state_fieldname)
			return;

		this.update_fields = frappe.workflow.get_update_fields(this.frm.doctype);

		var me = this;
		$(this.frm.wrapper).bind("render_complete", function() {
			me.refresh();
		});
	},

	setup_help: function() {
		var me = this;
		this.frm.page.add_action_item(__("Help"), function() {
			frappe.workflow.setup(me.frm.doctype);
			var state = me.get_state();
			var d = new frappe.ui.Dialog({
				title: "Workflow: "
					+ frappe.workflow.workflows[me.frm.doctype].name
			})
			var next_html = $.map(frappe.workflow.get_transitions(me.frm.doctype, state),
				function(d) {
					return d.action.bold() + __(" by Role ") + d.allowed;
				}).join(", ") || __("None: End of Workflow").bold();

			$(d.body).html("<p>"+__("Current status")+": " + state.bold() + "</p>"
				+ "<p>"+__("Document is only editable by users of role")+": "
					+ frappe.workflow.get_document_state(me.frm.doctype,
						state).allow_edit.bold() + "</p>"
				+ "<p>"+__("Next actions")+": "+ next_html +"</p>"
				+ (me.frm.doc.__islocal ? ("<div class='alert alert-info'>"
					+__("Workflow will start after saving.")+"</div>") : "")
				+ "<p class='help'>"+__("Note: Other permission rules may also apply")+"</p>"
				).css({padding: '15px'});
			d.show();
		}, true);
	},

	refresh: function() {
		// hide if its not yet saved
		if(this.frm.doc.__islocal) {
			this.set_default_state();
			return;
		}

		// state text
		var state = this.get_state();

		if(state) {
			// show actions from that state
			this.show_actions(state);
		}
	},

	show_actions: function(state) {
		var added = false,
			me = this;

		this.frm.page.clear_actions_menu();

		// if the loaded doc is dirty, don't show workflow buttons
		if (this.frm.doc.__unsaved===1) {
			return;
		}

		$.each(frappe.workflow.get_transitions(this.frm.doctype, state), function(i, d) {
			if(in_list(user_roles, d.allowed)) {
				added = true;
				me.frm.page.add_action_item(__(d.action), function() {
					var action = d.action;
					// capture current state
					var doc_before_action = copy_dict(me.frm.doc);

					// set new state
					var next_state = frappe.workflow.get_next_state(me.frm.doctype,
							me.frm.doc[me.state_fieldname], action);
					me.frm.doc[me.state_fieldname] = next_state;
					var new_state = frappe.workflow.get_document_state(me.frm.doctype, next_state);
					var new_docstatus = cint(new_state.doc_status);


					if(new_state.update_field) {
						me.frm.set_value(new_state.update_field, new_state.update_value);
					}

					// revert state on error
					var on_error = function() {
						// reset in locals
						frappe.model.add_to_locals(doc_before_action);
						me.frm.refresh();
					}

					// success - add a comment
					var success = function() {
						me.frm.timeline.insert_comment("Workflow", next_state);
					}
					if(new_docstatus==1 && me.frm.doc.docstatus==0) {
						me.frm.savesubmit(null, success, on_error);
					} else if(new_docstatus==0 && me.frm.doc.docstatus==0) {
						me.frm.save("Save", success, null, on_error);
					} else if(new_docstatus==1 && me.frm.doc.docstatus==1) {
						me.frm.save("Update", success, null, on_error);
					} else if(new_docstatus==2 && me.frm.doc.docstatus==1) {
						me.frm.savecancel(null, success, on_error);
					} else {
						msgprint(__("Document Status transition from ") + me.frm.doc.docstatus + " "
							+ __("to") +
							new_docstatus + " " + __("is not allowed."));
						msgprint(__("Document Status transition from {0} to {1} is not allowed", [me.frm.doc.docstatus, new_docstatus]));
						return false;
					}

					return false;

				});
			}
		});

		if(added) {
			this.frm.page.btn_primary.addClass("hide");
			this.frm.toolbar.current_status = "";
			this.setup_help();
		}
	},

	set_default_state: function() {
		var default_state = frappe.workflow.get_default_state(this.frm.doctype, this.frm.doc.docstatus);
		if(default_state) {
			this.frm.set_value(this.state_fieldname, default_state);
		}
	},

	get_state: function() {
		if(!this.frm.doc[this.state_fieldname]) {
			this.set_default_state();
		}
		return this.frm.doc[this.state_fieldname];
	},

	bind_action: function() {
		var me = this;
		this.dropdown.on("click", "[data-action]", function() {
		})
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/print.js
 */
frappe.provide("frappe.ui.form");

frappe.ui.form.PrintPreview = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
		this.bind_events();
	},
	make: function() {
		this.wrapper = this.frm.page.add_view("print", frappe.render_template("print_layout", {}));

		// only system manager can edit
		this.wrapper.find(".btn-print-edit").toggle(frappe.user.has_role("System Manager"));
	},
	bind_events: function() {
		var me = this;
		this.wrapper.find(".btn-print-close").click(function() {
			me.frm.hide_print();
		});

		// hide print view on pressing escape, only if there is no focus on any input
		$(document).on("keydown", function(e) {
			if (e.which===27 && me.frm && e.target===document.body) {
				me.frm.hide_print();
			}
		});

		this.print_formats = frappe.meta.get_print_formats(this.frm.meta.name);
		this.print_letterhead = this.wrapper
			.find(".print-letterhead")
			.on("change", function() { me.print_sel.trigger("change"); })
			.prop("checked", cint(
				(frappe.model.get_doc(":Print Settings", "Print Settings")
					|| {with_letterhead: 1}).with_letterhead) ? true : false);
		this.print_sel = this.wrapper
			.find(".print-preview-select")
			.on("change", function() {
				me.multilingual_preview()
			});

		//On selection of language get code and pass it to preview method
		this.language_sel = this.wrapper
			.find(".languages")
			.on("change", function(){
				me.lang_code = me.language_sel.val()
				me.multilingual_preview()
			});

		this.wrapper.find(".btn-print-print").click(function() {
			if(me.is_old_style()) {
				me.print_old_style();
			} else {
				me.printit();
			}
		});

		this.wrapper.find(".btn-print-preview").click(function() {
			if(me.is_old_style()) {
				me.new_page_preview_old_style();
			} else {
				me.new_page_preview();
			}
		});

		this.wrapper.find(".btn-download-pdf").click(function() {
			if(!me.is_old_style()) {
				var w = window.open(
					frappe.urllib.get_full_url("/api/method/frappe.utils.print_format.download_pdf?"
					+"doctype="+encodeURIComponent(me.frm.doc.doctype)
					+"&name="+encodeURIComponent(me.frm.doc.name)
					+"&format="+me.selected_format()
					+"&no_letterhead="+(me.with_letterhead() ? "0" : "1")
					+(me.lang_code ? ("&_lang="+me.lang_code) : "")));
				if(!w) {
					msgprint(__("Please enable pop-ups")); return;
				}
			}
		});

		this.wrapper.find(".btn-print-edit").on("click", function() {
			var print_format = me.get_print_format();
			if(print_format && print_format.name) {
				if(print_format.print_format_builder) {
					frappe.route_options = {"doc": print_format, "make_new": false};
					frappe.set_route("print-format-builder");
				} else {
					frappe.set_route("Form", "Print Format", print_format.name);
				}
			} else {
				// start a new print format
				frappe.prompt({fieldname:"print_format_name", fieldtype:"Data", reqd: 1,
					label:"New Print Format Name"}, function(data) {
						frappe.route_options = {
							make_new: true,
							doctype: me.frm.doctype,
							name: data.print_format_name
						};
						frappe.set_route("print-format-builder");
				}, __("New Custom Print Format"), __("Start"));
			}
		});
	},
	set_user_lang: function(){
		this.lang_code = this.frm.doc.language;
		// Load all languages in the field
		this.language_sel.empty()
			.add_options(frappe.get_languages())
			.val(this.lang_code);
		this.preview();
	},
	multilingual_preview: function(){
		var me = this;
		if(this.is_old_style()) {
			me.wrapper.find(".btn-download-pdf").toggle(false);
			me.set_style();
			me.preview_old_style();
		} else {
			me.wrapper.find(".btn-download-pdf").toggle(true);
			me.preview();
		}
	},
	preview: function() {
		var me = this;
		this.get_print_html(function(out) {
			me.wrapper.find(".print-format").html(out.html);
			me.set_style(out.style);
		});
	},
	printit: function() {
		this.new_page_preview(true);
	},
	new_page_preview: function(printit) {
		var me = this;
		var w = window.open(frappe.urllib.get_full_url("/print?"
			+"doctype="+encodeURIComponent(me.frm.doc.doctype)
			+"&name="+encodeURIComponent(me.frm.doc.name)
			+(printit ? "&trigger_print=1" : "")
			+"&format="+me.selected_format()
			+"&no_letterhead="+(me.with_letterhead() ? "0" : "1")
			+(me.lang_code ? ("&_lang="+me.lang_code) : "")));
		if(!w) {
			msgprint(__("Please enable pop-ups")); return;
		}
	},
	get_print_html: function(callback) {
		frappe.call({
			method: "frappe.www.print.get_html_and_style",
			args: {
				doc: this.frm.doc,
				print_format: this.selected_format(),
				no_letterhead: !this.with_letterhead() ? 1 : 0,
				_lang: this.lang_code
			},
			callback: function(r) {
				if(!r.exc) {
					callback(r.message);
				}
			}
		});
	},
	preview_old_style: function() {
		var me = this;
		this.with_old_style({
			format: me.print_sel.val(),
			callback: function(html) {
				me.wrapper.find(".print-format").html('<div class="alert alert-warning">'
					+__("Warning: This Print Format is in old style and cannot be generated via the API.")
					+'</div>'
					+ html);
			},
			no_letterhead: !this.with_letterhead(),
			only_body: true,
			no_heading: true
		});
	},
	refresh_print_options: function() {
		this.print_formats = frappe.meta.get_print_formats(this.frm.doctype);
		return this.print_sel
			.empty().add_options(this.print_formats);
	},
	with_old_style: function(opts) {
		frappe.require("/assets/js/print_format_v3.min.js", function() {
			_p.build(opts.format, opts.callback, opts.no_letterhead, opts.only_body, opts.no_heading);
		});
	},
	print_old_style: function() {
		var me = this;
		frappe.require("/assets/js/print_format_v3.min.js", function() {
			_p.build(me.print_sel.val(), _p.go,
				!me.with_letterhead());
		});
	},
	new_page_preview_old_style: function() {
		var me = this;
		frappe.require("/assets/js/print_format_v3.min.js", function() {
			_p.build(me.print_sel.val(), _p.preview, !me.with_letterhead());
		});
	},
	selected_format: function() {
		return this.print_sel.val() || this.frm.meta.default_print_format || "Standard";
	},
	is_old_style: function(format) {
		return this.get_print_format(format).print_format_type==="Client";
	},
	get_print_format: function(format) {
		if (!format) {
			format = this.selected_format();
		}

		if(locals["Print Format"] && locals["Print Format"][format]) {
			return locals["Print Format"][format]
		} else {
			return {}
		}
	},
	with_letterhead: function() {
		return this.print_letterhead.is(":checked") ? 1 : 0;
	},
	set_style: function(style) {
		frappe.dom.set_style(style || frappe.boot.print_css, "print-style");
	}
})


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/sidebar.js
 */
frappe.provide("frappe.ui.form");
frappe.ui.form.Sidebar = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
	},

	make: function() {
		var sidebar_content = frappe.render_template("form_sidebar", {doctype: this.frm.doctype, frm:this.frm});

		this.sidebar = $('<div class="form-sidebar overlay-sidebar hidden-xs hidden-sm"></div>')
			.html(sidebar_content)
			.appendTo(this.page.sidebar.empty());

		this.comments = this.sidebar.find(".sidebar-comments");
		this.user_actions = this.sidebar.find(".user-actions");
		this.image_section = this.sidebar.find(".sidebar-image-section");
		this.image_wrapper = this.image_section.find('.sidebar-image-wrapper');

		this.make_assignments();
		this.make_attachments();
		this.make_shared();
		this.make_viewers();
		this.make_tags();
		this.make_like();

		this.bind_events();
		frappe.ui.form.setup_user_image_event(this.frm);

		this.refresh();

	},

	bind_events: function() {
		var me = this;

		// scroll to comments
		this.comments.on("click", function() {
			frappe.utils.scroll_to(me.frm.footer.wrapper.find(".form-comments"), true);
		});

		this.like_icon.on("click", function() {
			frappe.ui.toggle_like(me.like_icon, me.frm.doctype, me.frm.doc.name, function() {
				me.refresh_like();
			});
		})
	},

	refresh: function() {
		if(this.frm.doc.__islocal) {
			this.sidebar.toggle(false);
		} else {
			this.sidebar.toggle(true);
			this.frm.assign_to.refresh();
			this.frm.attachments.refresh();
			this.frm.shared.refresh();
			this.frm.viewers.refresh();
			this.frm.tags && this.frm.tags.refresh(this.frm.doc._user_tags);
			this.sidebar.find(".modified-by").html(__("{0} edited this {1}",
				["<strong>" + frappe.user.full_name(this.frm.doc.modified_by) + "</strong>",
				"<br>" + comment_when(this.frm.doc.modified)]));
			this.sidebar.find(".created-by").html(__("{0} created this {1}",
				["<strong>" + frappe.user.full_name(this.frm.doc.owner) + "</strong>",
				"<br>" + comment_when(this.frm.doc.creation)]));

			this.refresh_like();
			frappe.ui.form.set_user_image(this.frm);
		}
	},

	refresh_comments: function() {
		var comments = $.map(this.frm.timeline.get_communications(), function(c) {
			return (c.communication_type==="Communication" || (c.communication_type=="Comment" && c.comment_type==="Comment")) ? c : null;
		});
		this.comments.find(".n-comments").html(comments.length);
	},

	make_tags: function() {
		var me = this;
		if (this.frm.meta.issingle) {
			this.sidebar.find(".form-tags").toggle(false);
			return;
		}

		this.frm.tags = new frappe.ui.TagEditor({
			parent: this.sidebar.find(".tag-area"),
			frm: this.frm,
			on_change: function(user_tags) {
				me.frm.doc._user_tags = user_tags;
			}
		});
	},
	make_attachments: function() {
		var me = this;
		this.frm.attachments = new frappe.ui.form.Attachments({
			parent: me.sidebar.find(".form-attachments"),
			frm: me.frm
		});
	},
	make_assignments: function() {
		this.frm.assign_to = new frappe.ui.form.AssignTo({
			parent: this.sidebar.find(".form-assignments"),
			frm: this.frm
		});
	},
	make_shared: function() {
		this.frm.shared = new frappe.ui.form.Share({
			frm: this.frm,
			parent: this.sidebar.find(".form-shared")
		});
	},
	make_viewers: function() {
		this.frm.viewers = new frappe.ui.form.Viewers({
			frm: this.frm,
			parent: this.sidebar.find(".form-viewers")
		});
	},
	add_user_action: function(label, click) {
		return $('<a>').html(label).appendTo($('<li class="user-action-row">')
			.appendTo(this.user_actions.removeClass("hide"))).on("click", click);
	},
	clear_user_actions: function() {
		this.user_actions.addClass("hide")
		this.user_actions.find(".user-action-row").remove();
	},

	make_like: function() {
		this.like_wrapper = this.sidebar.find(".liked-by");
		this.like_icon = this.sidebar.find(".liked-by .octicon-heart");
		this.like_count = this.sidebar.find(".liked-by .like-count");
		frappe.ui.setup_like_popover(this.sidebar.find(".liked-by-parent"), ".liked-by");
	},

	refresh_like: function() {
		if (!this.like_icon) {
			return;
		}

		this.like_wrapper.attr("data-liked-by", this.frm.doc._liked_by);

		this.like_icon.toggleClass("text-extra-muted not-liked",
			!frappe.ui.is_liked(this.frm.doc))
			.attr("data-doctype", this.frm.doctype)
			.attr("data-name", this.frm.doc.name);

		this.like_count.text(JSON.parse(this.frm.doc._liked_by || "[]").length);
	},

	refresh_image: function() {
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/user_image.js
 */
frappe.ui.form.set_user_image = function(frm) {

	var image_section = frm.sidebar.image_section;
	var image_field = frm.meta.image_field;
	var image = frm.doc[image_field];
	var title_image = frm.page.$title_area.find('.title-image');


	image_section.toggleClass('hide', image_field ? false : true);
	title_image.toggleClass('hide', image_field ? false : true);

	if(!image_field) {
		return;
	}

	// if image field has value
	if (image) {
		image_section
			.find(".sidebar-image")
			.css("background-image", 'url("' + image + '")')
			.removeClass("hide");

		image_section
			.find('.sidebar-standard-image')
			.addClass('hide');

		title_image
			.css('background-color', '')
			.css("background-image", 'url("' + image + '")')
			.html('');

	} else {
		image_section
			.find(".sidebar-image")
			.css("background-image", null)
			.addClass("hide");

		var title = frm.get_title();

		image_section
			.find('.sidebar-standard-image')
			.removeClass('hide')
			.find('.standard-image')
			.css({'background-color': frappe.get_palette(title)})
			.html(frappe.get_abbr(title));

		title_image.css("background-image", '')
			.css({'background-color': frappe.get_palette(title)})
			.html(frappe.get_abbr(title));

	}

}

frappe.ui.form.setup_user_image_event = function(frm) {
	// re-draw image on change of user image
	if(frm.meta.image_field) {
		frappe.ui.form.on(frm.doctype, frm.meta.image_field, function(frm) {
			frappe.ui.form.set_user_image(frm);
		});
	}

	// bind click on image_wrapper
	frm.sidebar.image_wrapper.on('click', function() {
		var field = frm.get_field(frm.meta.image_field);
		if(!field.$input) {
			field.make_input();
		}
		field.$input.trigger('click');
	});
}

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/share.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form");

frappe.ui.form.Share = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
	},
	refresh: function() {
		this.render_sidebar();
	},
	render_sidebar: function() {
		var me = this;
		this.parent.empty();

		var shared = this.shared || this.frm.get_docinfo().shared;
		var users = [];
		for (var i=0, l=shared.length; i < l; i++) {
			var s = shared[i];

			if (s.everyone) {
				users.push({
					icon: "octicon octicon-megaphone text-muted",
					avatar_class: "avatar-empty share-doc-btn shared-with-everyone",
					title: __("Shared with everyone")
				});
			} else {
				var user_info = frappe.user_info(s.user);
				users.push({
					image: user_info.image,
					fullname: user_info.fullname,
					abbr: user_info.abbr,
					color: user_info.color,
					title: __("Shared with {0}", [user_info.fullname])
				});
			}
		}

		if (!me.frm.doc.__islocal) {
			users.push({
				icon: "octicon octicon-plus text-muted",
				avatar_class: "avatar-empty share-doc-btn",
				title: __("Share")
			});
		}

		this.parent.append(frappe.render_template("users_in_sidebar", {"users": users}));
		this.parent.find(".avatar").on("click", function() {
			me.frm.share_doc();
		});
	},
	show: function() {
		var me = this;
		var d = new frappe.ui.Dialog({
			title: __("Share {0} with", [this.frm.doc.name]),
		});

		this.dialog = d;
		this.dirty = false;

		frappe.call({
			method: "frappe.share.get_users",
			args: {
				doctype: this.frm.doctype,
				name: this.frm.doc.name
			},
			callback: function(r) {
				me.render_shared(r.message || []);
			}
		});

		$(d.body).html('<p class="text-muted">' + __("Loading...") + '</p>');

		d.onhide = function() {
			// reload comments
			if(me.dirty) me.frm.reload_docinfo();
		}

		d.show();
	},
	render_shared: function(shared) {
		if(shared)
			this.shared = shared;
		var d = this.dialog;
		$(d.body).empty();

		var everyone = {};
		$.each(this.shared, function(i, s) {
			// pullout everyone record from shared list
			if (s && s.everyone) {
				everyone = s;
			}
		});

		$(frappe.render_template("set_sharing", {frm: this.frm, shared: this.shared, everyone: everyone}))
			.appendTo(d.body);

		if(frappe.model.can_share(null, this.frm)) {
			this.make_user_input();
			this.add_share_button();
			this.set_edit_share_events();
		} else {
			// if cannot share, disable sharing settings.
			$(d.body).find(".edit-share").prop("disabled", true);
		}
	},
	make_user_input: function() {
		// make add-user input
		this.dialog.share_with = frappe.ui.form.make_control({
			parent: $(this.dialog.body).find(".input-wrapper-add-share"),
			df: {
				fieldtype: "Link",
				label: __("Share With"),
				fieldname: "share_with",
				options: "User",
				filters: {
					"user_type": "System User",
					"name": ["!=", user]
				}
			},
			only_input: true,
			render_input: true
		});

	},
	add_share_button: function() {
		var me = this, d = this.dialog;
		$(d.body).find(".btn-add-share").on("click", function() {
			var user = d.share_with.get_value();
			if(!user) {
				return;
			}
			frappe.call({
				method: "frappe.share.add",
				args: {
					doctype: me.frm.doctype,
					name: me.frm.doc.name,
					user: user,
					read: $(d.body).find(".add-share-read").prop("checked") ? 1 : 0,
					write: $(d.body).find(".add-share-write").prop("checked") ? 1 : 0,
					share: $(d.body).find(".add-share-share").prop("checked") ? 1 : 0
				},
				btn: this,
				callback: function(r) {
					$.each(me.shared, function(i, s) {
						if(s && s.user===r.message.user) {
							// re-adding / remove the old share rule.
							delete me.shared[i];
						}
					})
					me.dirty = true;
					me.shared.push(r.message);
					me.render_shared();
					me.frm.shared.refresh();
				}
			});
		});
	},
	set_edit_share_events: function() {
		var me = this, d = this.dialog;
		$(d.body).find(".edit-share").on("click", function() {
			var user = $(this).parents(".shared-user:first").attr("data-user") || "",
				value = $(this).prop("checked") ? 1 : 0,
				property = $(this).attr("name")
				everyone = cint($(this).parents(".shared-user:first").attr("data-everyone"));

			frappe.call({
				method: "frappe.share.set_permission",
				args: {
					doctype: me.frm.doctype,
					name: me.frm.doc.name,
					user: user,
					permission_to: property,
					value: value,
					everyone: everyone
				},
				callback: function(r) {
					var found = null;
					$.each(me.shared, function(i, s) {
						// update shared object
						if(s && (s.user===user || (everyone && s.everyone===1))) {
							if(!r.message) {
								delete me.shared[i];
							} else {
								me.shared[i] = $.extend(s, r.message);
							}
							found = true;
							return false;
						}
					});

					if (!found) {
						me.shared.push(r.message);
					}

					me.dirty = true;
					me.render_shared();
					me.frm.shared.refresh();
				}
			});
		});
	},
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/form_viewers.js
 */
frappe.provide("frappe.ui.form");

frappe.ui.form.Viewers = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
	},
	refresh: function(data_updated) {
		var me = this;
		this.parent.empty();

		var viewers = this.frm.get_docinfo().viewers || {};

		var users = [];
		var new_users = [];
		for (var i=0, l=(viewers.current || []).length; i < l; i++) {
			var username = viewers.current[i];
			if (username===user) {
				// current user
				continue;
			}

			var user_info = frappe.user_info(username);
			users.push({
				image: user_info.image,
				fullname: user_info.fullname,
				abbr: user_info.abbr,
				color: user_info.color,
				title: __("{0} is currently viewing this document", [user_info.fullname])
			});

			if (viewers.new.indexOf(username)!==-1) {
				new_users.push(user_info.fullname);
			}
		}

		if (users.length) {
			this.parent.parent().removeClass("hidden");
			this.parent.append(frappe.render_template("users_in_sidebar", {"users": users}));
		} else {
			this.parent.parent().addClass("hidden");
		}

		if (data_updated && new_users.length) {
			// new user viewing this document, who wasn't viewing in the past
			if (new_users.length===1) {
				show_alert(__("{0} is currently viewing this document", [new_users[0]]));
			} else {
				show_alert(__("{0} are currently viewing this document", [frappe.utils.comma_and(new_users)]));
			}

		}
	}
});

frappe.ui.form.set_viewers = function(data) {
	var doctype = data.doctype;
	var docname = data.docname;
	var past_viewers = (frappe.model.get_docinfo(doctype, docname).viewers || {}).past || [];
	var new_viewers = [];
	var viewers = data.viewers || [];

	for (i=0, l=viewers.length; i < l; i++) {
		var username = viewers[i];
		if (past_viewers.indexOf(username)===-1) {
			new_viewers.push(username);
		}
	}

	frappe.model.set_docinfo(doctype, docname, "viewers", {
		past: past_viewers.concat(new_viewers),
		new: new_viewers,
		current: viewers
	});

	if (cur_frm.doc && cur_frm.doc.doctype===doctype && cur_frm.doc.name==docname) {
		cur_frm.viewers.refresh(true);
	}
}

frappe.templates["form_footer"] = '<div class="form-footer"> <div class="after-save"> <div class="form-comments"></div> </div> <div class="pull-right scroll-to-top"> <a onclick="scroll(0,0)"><i class="icon-chevron-up text-muted"></i></a> </div> </div> ';
frappe.templates["timeline"] = '<div class="timeline"> <div class="timeline-head"> <div class="comment-input-header"> <span class="small text-muted">{%= __("Add a comment") %}</span> <button class="btn btn-default btn-comment btn-xs pull-right"> {%= __("Comment") %} </button> </div> <div class="comment-input-container"> <textarea class="form-control comment-input"></textarea> <input type="data" class="hidden mention-input"> </div> </div> <div class="timeline-new-email"> <button class="btn btn-default btn-new-email btn-xs"> {%= __("New Email") %} </button> </div> <div class="timeline-items"> </div> </div> ';
frappe.templates["timeline_item"] = '<div class="media timeline-item {% if (data.user_content) { %} user-content {% } else { %} notification-content {% } %}" data-doctype="{{ data.doctype }}" data-name="{%= data.name %}"> {% if (data.user_content) { %} <span class="pull-left avatar avatar-medium" style="margin-top: 1px"> {% if(data.user_info.image) { %} <div class="avatar-frame" style="background-image: url({%= data.user_info.image %})"></div> {% } else { %} <div class="standard-image" style="background-color: {{ data.user_info.color }}"> {{ data.user_info.abbr }}</div> {% } %} </span> {% } %} <div class="pull-left media-body" style="max-width: calc(100% - 50px); padding-right: 0px;"> <div class="media-content-wrapper"> <div class="pull-right close-btn-container"> <span class="small text-muted"> {%= data.delete %} </span> </div> {% if(data.communication_type==="Communication" || (data.communication_type==="Comment" && data.comment_type==="Comment")) { %} <div class="comment-header small"> <i class="{%= data.icon %} icon-fixed-width"></i> <span title="{%= data.comment_by %}">{%= data.fullname %}</span> <span> {% if (data.timeline_doctype===data.frm.doc.doctype && data.timeline_name===data.frm.doc.name) { %} &ndash; <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}" class="text-muted"> <strong>{{ __(data.reference_doctype) }}</strong> {{ data.reference_name }} </a> {% } %} </span> <span class="text-muted" style="font-weight: normal;"> &ndash; {%= data.comment_on %}</span> {% if(data.communication_type==="Communication") { %} {% if (frappe.model.can_read(\'Communication\')) { %} <a href="#Form/{%= data.doctype %}/{%= data.name %}" class="text-muted"> {% } %} {% if (data.delivery_status) { if (in_list(["Sent", "Opened", "Clicked"], data.delivery_status)) { var indicator_class = "green"; } else if (data.delivery_status === "Sending") { var indicator_class = "orange"; } else { var indicator_class = "red"; } %} <span class="text-muted">&ndash;</span> <span class="indicator-right {%= indicator_class %} delivery-status-indicator" title="{%= data.delivery_status %}"> {%= data.delivery_status %}</span> {% } else { %} {% if (frappe.model.can_read(\'Communication\')) { %} <span class="text-muted">&ndash;</span> {%= __("Details") %} {% } %} {% } %} {% if (frappe.model.can_read(\'Communication\')) { %} </a> {% } %} {% if (data.communication_medium === "Email") { %} <a class="text-muted reply-link pull-right" data-name="{%= data.name %}">{%= __("Reply") %}</a> {% } %} {% } %} <span class="comment-likes" data-liked-by=\'{{ JSON.stringify(data._liked_by) }}\'> <i class="octicon octicon-heart like-action {% if (!data.liked_by_user) { %} text-extra-muted not-liked {% } %} " data-doctype="{%= data.doctype %}" data-name="{%= data.name %}"></i> <span class="likes-count text-muted">{{ (data._liked_by || []).length }}</span> </span> </div> <div class="reply"> <div> {%= data.content_html %} </div> </div> {% } else if(in_list(["Assignment Completed", "Assigned", "Shared", "Unshared"], data.comment_type)) { %} <div class="small"> <i class="{%= data.icon %} icon-fixed-width"></i> {% if (data.timeline_doctype===data.frm.doc.doctype && data.timeline_name===data.frm.doc.name) { %} <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}"> <strong>{{ __(data.reference_doctype) }}</strong> {{ data.reference_name }} </a> &ndash; {% } %} {% if(data.link_doctype && data.link_name) { %} <a href="#Form/{%= data.link_doctype %}/{%= data.link_name %}"> {% } %} {%= __(data.content) %} {% if(data.link_doctype && data.link_name) { %} </a> {% } %} <span class="text-muted" style="font-weight: normal;"> &ndash; {%= data.comment_on %}</span> </div> {% } else { %} <div class="small"> <i class="{%= data.icon %} icon-fixed-width"></i> {% if (data.comment_type == "Like") { %} <span title="{%= data.comment_by %}"> {% if (data.timeline_doctype===data.frm.doc.doctype && data.timeline_name===data.frm.doc.name) { %} <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}"> <strong>{{ __(data.reference_doctype) }}</strong> {{ data.reference_name }} </a> &ndash; {% } %} {%= __("Liked by {0}", [data.fullname]) %} </span> {% } else { %} <span title="{%= data.comment_by %}">{%= data.fullname %}</span> {%= __(data.content) %} {% if (data.timeline_doctype===data.frm.doc.doctype && data.timeline_name===data.frm.doc.name) { %} &ndash; <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}"> <strong>{{ __(data.reference_doctype) }}</strong> {{ data.reference_name }} </a> {% } %} {% } %} <span class="text-muted" style="font-weight: normal;"> &ndash; {%= data.comment_on %}</span> </div> {% } %} {% if(data.attachments && data.attachments.length) { %} <div style="margin: 10px 0px"> {% $.each(data.attachments, function(i, a) { %} <div class="text-ellipsis"> <a href="{%= encodeURI(a.file_url).replace(/#/g, \'%23\') %}" class="text-muted small" target="_blank"> <i class="icon-paperclip"></i> {%= a.file_url.split("/").slice(-1)[0] %} {% if (a.is_private) { %} <i class="icon icon-lock text-warning"></i> {% } %} </a> </div> {% }); %} </div> {% } %} </div> </div> </div> ';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/footer/footer.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.form.Footer = Class.extend({
	init: function(opts) {
		var me = this;
		$.extend(this, opts);
		this.make();
		this.make_comments();
		// render-complete
		$(this.frm.wrapper).on("render_complete", function() {
			me.refresh();
		});
	},
	make: function() {
		var me = this;
		this.wrapper = $(frappe.render_template("form_footer", {}))
			.appendTo(this.parent);
		this.wrapper.find(".btn-save").click(function() {
			me.frm.save('Save', null, this);
		})

	},
	make_comments: function() {
		this.frm.timeline = new frappe.ui.form.Timeline({
			parent: this.wrapper.find(".form-comments"),
			frm: this.frm
		})
	},
	refresh: function() {
		if(this.frm.doc.__islocal) {
			this.parent.addClass("hide");
		} else {
			this.parent.removeClass("hide");
			this.frm.timeline.refresh();
		}
	},
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/footer/attachments.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form");

frappe.ui.form.Attachments = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
	},
	make: function() {
		var me = this;
		this.parent.find(".add-attachment").click(function() {
			me.new_attachment();
		});
		this.add_attachment_wrapper = this.parent.find(".add_attachment").parent();
		this.attachments_label = this.parent.find(".attachments-label");
	},
	max_reached: function() {
		// no of attachments
		var n = keys(this.get_attachments()).length;

		// button if the number of attachments is less than max
		if(n < this.frm.meta.max_attachments || !this.frm.meta.max_attachments) {
			return false;
		}
		return true;
	},
	refresh: function() {
		var me = this;

		if(this.frm.doc.__islocal) {
			this.parent.toggle(false);
			return;
		}
		this.parent.toggle(true);
		this.parent.find(".attachment-row").remove();

		var max_reached = this.max_reached();
		this.add_attachment_wrapper.toggleClass("hide", !max_reached);

		// add attachment objects
		var attachments = this.get_attachments();
		if(attachments.length) {
			attachments.forEach(function(attachment) {
				me.add_attachment(attachment)
			});
		} else {
			this.attachments_label.removeClass("has-attachments");
		}

	},
	get_attachments: function() {
		return this.frm.get_docinfo().attachments;
	},
	add_attachment: function(attachment) {
		var file_name = attachment.file_name;
		var file_url = this.get_file_url(attachment);
		var fileid = attachment.name;
		if (!file_name) {
			file_name = file_url;
		}

		var me = this;
		var $attach = $(repl('<li class="attachment-row">\
				<a class="close" data-owner="%(owner)s">&times;</a>\
				%(lock_icon)s\
				<a href="%(file_url)s" target="_blank" title="%(file_name)s" \
					class="text-ellipsis" style="max-width: calc(100% - 43px);">\
					<span>%(file_name)s</span></a>\
			</li>', {
				lock_icon: attachment.is_private ? '<i class="icon icon-lock icon-fixed-width text-warning"></i> ': "",
				file_name: file_name,
				file_url: frappe.urllib.get_full_url(file_url)
			}))
			.insertAfter(this.attachments_label.addClass("has-attachments"));

		var $close =
			$attach.find(".close")
			.data("fileid", fileid)
			.click(function() {
				var remove_btn = this;
				frappe.confirm(__("Are you sure you want to delete the attachment?"),
					function() {
						me.remove_attachment($(remove_btn).data("fileid"))
					}
				);
				return false
			});

		if(!frappe.model.can_write(this.frm.doctype, this.frm.name)) {
			$close.remove();
		}
	},
	get_file_url: function(attachment) {
		var file_url = attachment.file_url;
		if (!file_url) {
			if (attachment.file_name.indexOf('files/') === 0) {
				file_url = '/' + attachment.file_name;
			}
			else {
				file_url = '/files/' + attachment.file_name;
			}
		}
		// hash is not escaped, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
		return encodeURI(file_url).replace(/#/g, '%23');
	},
	get_file_id_from_file_url: function(file_url) {
		var fid;
		$.each(this.get_attachments(), function(i, attachment) {
			if (attachment.file_url === file_url) {
				fid = attachment.name;
				return false;
			}
		});
		return fid;
	},
	remove_attachment_by_filename: function(filename, callback) {
		this.remove_attachment(this.get_file_id_from_file_url(filename), callback);
	},
	remove_attachment: function(fileid, callback) {
		if (!fileid) {
			if (callback) callback();
			return;
		}

		var me = this;
		return frappe.call({
			method: 'frappe.desk.form.utils.remove_attach',
			args: {
				fid: fileid,
				dt: me.frm.doctype,
				dn: me.frm.docname
			},
			callback: function(r,rt) {
				if(r.exc) {
					if(!r._server_messages)
						msgprint(__("There were errors"));
					return;
				}
				me.remove_fileid(fileid);
				me.frm.get_docinfo().communications.push(r.message);
				me.frm.timeline.refresh();
				if (callback) callback();
			}
		});
	},
	new_attachment: function(fieldname) {
		var me = this;
		if (this.dialog) {
			// remove upload dialog
			this.dialog.$wrapper.remove();
		}

		// make upload dialog
		this.dialog = frappe.ui.get_upload_dialog({
			"args": me.get_args(),
			"callback": function(attachment, r) { me.attachment_uploaded(attachment, r) },
			"max_width": me.frm.cscript ? me.frm.cscript.attachment_max_width : null,
			"max_height": me.frm.cscript ? me.frm.cscript.attachment_max_height : null
		});
	},
	get_args: function() {
		return {
			from_form: 1,
			doctype: this.frm.doctype,
			docname: this.frm.docname,
		}
	},
	attachment_uploaded:  function(attachment, r) {
		this.dialog && this.dialog.hide();
		this.update_attachment(attachment, r.message.comment);

		if(this.fieldname) {
			this.frm.set_value(this.fieldname, attachment.file_url);
		}
	},
	update_attachment: function(attachment, comment) {
		if(attachment.name) {
			this.add_to_attachments(attachment);
			this.refresh();
			if(comment) {
				this.frm.get_docinfo().communications.push(comment);
				this.frm.timeline.refresh();
			}
		}
	},
	add_to_attachments: function (attachment) {
		var form_attachments = this.get_attachments();
		for(var i in form_attachments) {
			// prevent duplicate
			if(form_attachments[i]["name"] === attachment.name) return;
		}
		form_attachments.push(attachment);
	},
	remove_fileid: function(fileid) {
		var attachments = this.get_attachments();
		var new_attachments = [];
		$.each(attachments, function(i, attachment) {
			if(attachment.name!=fileid) {
				new_attachments.push(attachment);
			}
		});
		this.frm.get_docinfo().attachments = new_attachments;
		this.refresh();
	}
});

frappe.ui.get_upload_dialog = function(opts){
	dialog = new frappe.ui.Dialog({
	    title: __('Upload Attachment'),
		no_focus: true,
	    fields: [
			{fieldtype: "Section Break"},
			{"fieldtype": "Link" , "fieldname": "file" , "label": __("Select uploaded file"), "options": "File"},
	    ],
	});

	var btn = dialog.set_primary_action(__("Attach"));
	btn.removeClass("btn-primary").addClass("btn-default");

	dialog.show();
	var upload_area = $('<div style="padding-bottom: 25px;"></div>').prependTo(dialog.body);

	var fd = dialog.fields_dict;
	$(fd.file.input).change(function() {
	    frappe.call({
			'method': 'frappe.client.get_value',
			'args': {
			'doctype': 'File',
			'fieldname': 'file_url',
			  'filters': {
			      'name': dialog.get_value("file")
			    }
			},
			callback: function(r){
			    dialog.$wrapper.find('[name="file_url"]').val(r.message.file_url);
			}
	    });
	});
	frappe.upload.make({
		parent: upload_area,
		args: opts.args,
		callback: function(attachment, r) {
			dialog.hide();
			if(opts.callback){
				opts.callback(attachment, r);
			}
		},
		on_select: function() {
			btn.removeClass("btn-default").addClass("btn-primary");
		},
		onerror: function() {
			dialog.hide();
		},
		btn: btn,
		max_width: opts.max_width,
		max_height: opts.max_height,
	});

	return dialog;
}


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/footer/timeline.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.timeline');

frappe.ui.form.Timeline = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
	},
	make: function() {
		var me = this;
		this.wrapper = $(frappe.render_template("timeline",
			{})).appendTo(this.parent);

		this.list = this.wrapper.find(".timeline-items");
		this.input = this.wrapper.find(".form-control");

		this.comment_button = this.wrapper.find(".btn-comment")
			.on("click", function() {
				me.add_comment(this);
			});

		this.input.keydown("meta+return ctrl+return", function(e) {
			me.comment_button.trigger("click");
		});

		this.email_button = this.wrapper.find(".btn-new-email")
			.on("click", function() {
				new frappe.views.CommunicationComposer({
					doc: me.frm.doc,
					txt: frappe.markdown(me.input.val()),
					frm: me.frm,
					recipients: me.get_recipient()
				})
			});

		this.list.on("click", ".toggle-blockquote", function() {
			$(this).parent().siblings("blockquote").toggleClass("hidden");
		});

		this.setup_comment_like();

		this.setup_mentions();

		this.list.on("click", ".btn-more", function() {
			var communications = me.get_communications();
			frappe.call({
				btn: this,
				method: "frappe.desk.form.load.get_communications",
				args: {
					doctype: me.frm.doc.doctype,
					name: me.frm.doc.name,
					start: communications.length
				},
				callback: function(r) {
					if (!r.exc) {
						if (r.message) {
							var new_communications = r.message;
							var communications = me.get_communications().concat(new_communications);
							frappe.model.set_docinfo(me.frm.doc.doctype, me.frm.doc.name, "communications", communications);

						} else {
							me.more = false;
						}

						me.refresh();
					}
				}
			});
		});

	},

	refresh: function(scroll_to_end) {
		var me = this;

		this.last_type = "Comment";

		if(this.frm.doc.__islocal) {
			this.wrapper.toggle(false);
			return;
		}
		this.wrapper.toggle(true);
		this.list.empty();

		// var communications = [].concat(this.get_communications());

		var communications = this.get_communications();

		$.each(communications.sort(function(a, b) { return a.creation > b.creation ? -1 : 1 }),
			function(i, c) {
				if(c.content) {
					c.frm = me.frm;
					me.render_timeline_item(c);
				}
		});

		// more btn
		if (this.more===undefined && communications.length===20) {
			this.more = true;
		}

		if (this.more) {
			var $more = $('<div class="timeline-item">\
				<button class="btn btn-default btn-xs btn-more">More</button>\
			</div>').appendTo(me.list);
		}

		// created
		me.render_timeline_item({"content": __("Created"), "comment_type": "Created", "communication_type": "Comment",
			"sender": this.frm.doc.owner, "creation": this.frm.doc.creation, "frm": this.frm});

		this.wrapper.find(".is-email").prop("checked", this.last_type==="Email").change();

		this.frm.sidebar.refresh_comments();

	},

	render_timeline_item: function(c) {
		var me = this;
		this.prepare_timeline_item(c);

		var $timeline_item = $(frappe.render_template("timeline_item", {data:c}))
			.appendTo(me.list)
			.on("click", ".close", function() {
				var name = $(this).parents(".timeline-item:first").attr("data-name");
				me.delete_comment(name);
				return false;
			});


		if(c.communication_type=="Communication" && c.communication_medium==="Email") {
			this.last_type = c.communication_medium;
			this.add_reply_btn_event($timeline_item, c);
		}

	},

	add_reply_btn_event: function($timeline_item, c) {
		var me = this;
		$timeline_item.find(".reply-link").on("click", function() {
			var name = $(this).attr("data-name");
			var last_email = null;

			// find the email tor reply to
			me.get_communications().forEach(function(c) {
				if(c.name==name) {
					last_email = c;
					return false;
				}
			});

			// make the composer
			new frappe.views.CommunicationComposer({
				doc: me.frm.doc,
				txt: "",
				frm: me.frm,
				last_email: last_email
			});
		});
	},

	prepare_timeline_item: function(c) {
		if(c.communication_type=="Comment" && (c.comment_type || "Comment") === "Comment" && frappe.model.can_delete("Communication")) {
			c["delete"] = '<a class="close" href="#"><i class="octicon octicon-trashcan"></i></a>';
		} else {
			c["delete"] = "";
		}

		if(!c.sender) c.sender = this.frm.doc.owner;

		if(c.sender && c.sender.indexOf("<")!==-1) {
			c.sender = c.sender.split("<")[1].split(">")[0];
		}

		if(c.sender) {
			c.user_info = frappe.user_info(c.sender);
		} else {
			c.user_info = frappe.user_info(c.owner);
		}

		c.comment_on = comment_when(c.creation);
		c.fullname = c.sender_full_name || frappe.user.full_name(c.sender);

		if(c.attachments && typeof c.attachments==="string")
			c.attachments = JSON.parse(c.attachments);

		if(c.communication_type=="Comment" && !c.comment_type) {
			c.comment_type = "Comment";
		}

		this.set_icon_and_color(c);

		// label view
		if(c.comment_type==="Workflow" || c.comment_type==="Label") {
			c.comment_html = repl('<span class="label label-%(style)s">%(text)s</span>', {
				style: frappe.utils.guess_style(c.content),
				text: __(c.content)
			});
		} else {
			if(c.communication_type=="Communication" && c.communication_medium=="Email") {
				c.content = c.content.split("<!-- original-reply -->")[0];
				c.content = frappe.utils.strip_original_content(c.content);

				c.original_content = c.content;
				c.content = frappe.utils.toggle_blockquote(c.content);
			}

			if(!frappe.utils.is_html(c.content)) {
				c.content_html = frappe.markdown(__(c.content));
			} else {
				c.content_html = c.content;
				c.content_html = frappe.utils.strip_whitespace(c.content_html);
			}

			// bold @mentions
			if(c.comment_type==="Comment") {
				c.content_html = c.content_html.replace(/(^|\W)(@\w+)/g, "$1<b>$2</b>");
			}

			if (this.is_communication_or_comment(c)) {
				c.user_content = true;
				if (!$.isArray(c._liked_by)) {
					c._liked_by = JSON.parse(c._liked_by || "[]");
				}

				c.liked_by_user = c._liked_by.indexOf(user)!==-1;
			}
		}

		// basic level of XSS protection
		c.content_html = frappe.dom.remove_script_and_style(c.content_html);
	},

	is_communication_or_comment: function(c) {
		return c.communication_type==="Communication" || (c.communication_type==="Comment" && c.comment_type==="Comment");
	},

	set_icon_and_color: function(c) {
		c.icon = {
			"Email": "octicon octicon-mail",
			"Chat": "octicon octicon-comment-discussion",
			"Phone": "octicon octicon-device-mobile",
			"SMS": "octicon octicon-comment",
			"Created": "octicon octicon-plus",
			"Submitted": "octicon octicon-lock",
			"Cancelled": "octicon octicon-x",
			"Assigned": "octicon octicon-person",
			"Assignment Completed": "octicon octicon-check",
			"Comment": "octicon octicon-comment-discussion",
			"Workflow": "octicon octicon-git-branch",
			"Label": "octicon octicon-tag",
			"Attachment": "octicon octicon-cloud-upload",
			"Attachment Removed": "octicon octicon-trashcan",
			"Shared": "octicon octicon-eye",
			"Unshared": "octicon octicon-circle-slash",
			"Like": "octicon octicon-heart"
		}[c.comment_type || c.communication_medium]

		c.color = {
			"Email": "#3498db",
			"Chat": "#3498db",
			"Phone": "#3498db",
			"SMS": "#3498db",
			"Created": "#1abc9c",
			"Submitted": "#1abc9c",
			"Cancelled": "#c0392b",
			"Assigned": "#f39c12",
			"Assignment Completed": "#16a085",
			"Comment": "#f39c12",
			"Workflow": "#2c3e50",
			"Label": "#2c3e50",
			"Attachment": "#7f8c8d",
			"Attachment Removed": "#eee"
		}[c.comment_type || c.communication_medium];

		c.icon_fg = {
			"Attachment Removed": "#333",
		}[c.comment_type || c.communication_medium]

		if(!c.icon_fg)
			c.icon_fg = "#fff";

	},
	get_communications: function() {
		return this.frm.get_docinfo().communications;
	},
	add_comment: function(btn) {
		var txt = this.input.val();

		if(txt) {
			this.insert_comment("Comment", txt, btn, this.input);
		}
	},
	insert_comment: function(comment_type, comment, btn, input) {
		var me = this;
		if(input) input.prop('disabled', true);
		return frappe.call({
			method: "frappe.desk.form.utils.add_comment",
			args: {
				doc:{
					doctype: "Communication",
					communication_type: "Comment",
					comment_type: comment_type || "Comment",
					reference_doctype: this.frm.doctype,
					reference_name: this.frm.docname,
					content: comment,
					sender: user
				}
			},
			btn: btn,
			callback: function(r) {
				if(!r.exc) {
					me.input.val("");

					frappe.utils.play_sound("click");

					var comment = r.message;
					var comments = me.get_communications();
					var comment_exists = false;
					for (var i=0, l=comments.length; i<l; i++) {
						if (comments[i].name==comment.name) {
							comment_exists = true;
							break;
						}
					}
					if (comment_exists) {
						return;
					}

					me.frm.get_docinfo().communications = comments.concat([r.message]);
					me.refresh(true);
				}
			},
			always: function() {
				if(input) input.prop('disabled', false);
			}
		});

	},

	delete_comment: function(name) {
		var me = this;
		return frappe.call({
			method: "frappe.client.delete",
			args: {
				doctype: "Communication",
				name: name
			},
			callback: function(r) {
				if(!r.exc) {
					frappe.utils.play_sound("delete");

					me.frm.get_docinfo().communications =
						$.map(me.frm.get_docinfo().communications,
							function(v) {
								if(v.name==name) return null;
								else return v;
							}
						);
					me.refresh(true);
				}
			}
		});
	},

	get_recipient: function() {
		if(this.frm.email_field) {
			return this.frm.doc[this.frm.email_field];
		} else {
			return this.frm.doc.email_id || this.frm.doc.email || "";
		}
	},

	get_last_email: function(from_recipient) {
		var last_email = null,
			communications = this.frm.get_docinfo().communications,
			email = this.get_recipient();

		$.each(communications.sort(function(a, b) { return a.creation > b.creation ? -1 : 1 }), function(i, c) {
			if(c.communication_type=='Communication' && c.communication_medium=="Email") {
				if(from_recipient) {
					if(c.sender.indexOf(email)!==-1) {
						last_email = c;
						return false;
					}
				} else {
					last_email = c;
					return false;
				}
			}
		});

		return last_email;
	},

	setup_mentions: function() {
		var me = this;

		this.cursor_from = this.cursor_to = 0
		this.codes = $.ui.keyCode;
		this.up = $.Event("keydown", {"keyCode": this.codes.UP});
		this.down = $.Event("keydown", {"keyCode": this.codes.DOWN});
		this.enter = $.Event("keydown", {"keyCode": this.codes.ENTER});

		this.setup_autocomplete_for_mentions();

		this.setup_textarea_event();
	},

	setup_autocomplete_for_mentions: function() {
		var me = this;

		var username_user_map = {};
		for (var name in frappe.boot.user_info) {
			if(name !== "Administrator" && name !== "Guest") {
				var _user = frappe.boot.user_info[name];
				username_user_map[_user.username] = _user;
			}
		}

		this.mention_input = this.wrapper.find(".mention-input");

		var source = Object.keys(username_user_map);
		source.sort();

		this.mention_input.autocomplete({
			minLength: 0,
			autoFocus: true,
			source: source,
			select: function(event, ui) {
				var value = ui.item.value;
				var textarea_value = me.input.val();

				var new_value = textarea_value.substring(0, me.cursor_from)
					+ value
					+ textarea_value.substring(me.cursor_to);

				me.input.val(new_value);

				var new_cursor_location = me.cursor_from + value.length;

				// move cursor to right position
				if (me.input[0].setSelectionRange) {
					me.input.focus();
					me.input[0].setSelectionRange(new_cursor_location, new_cursor_location);

				} else if (me.input[0].createTextRange) {
					var range = input[0].createTextRange();
					range.collapse(true);
					range.moveEnd('character', new_cursor_location);
					range.moveStart('character', new_cursor_location);
					range.select();

				} else {
					me.input.focus();
				}
			}
		});

		this.mention_widget = this.mention_input.autocomplete("widget");

		this.autocomplete_open = false;
		this.mention_input
			.on('autocompleteclose', function() {
				me.autocomplete_open = false;
			})
			.on('autocompleteopen', function() {
				me.autocomplete_open = true;
			});

		// dirty hack to prevent backspace from navigating back to history
		$(document).on("keydown", function(e) {
			if (e.which===me.codes.BACKSPACE && me.autocomplete_open && document.activeElement==me.mention_widget.get(0)) {
				// me.input.focus();

				return false;
			}
		});
	},

	setup_textarea_event: function() {
		var me = this;

		// binding this in keyup to get the value after it is set in textarea
		this.input.keyup(function(e) {
			if (e.which===16) {
				// don't trigger for shift
				return;

			} else if ([me.codes.UP, me.codes.DOWN].indexOf(e.which)!==-1) {
				// focus on autocomplete if up and down arrows
				if (me.autocomplete_open) {
					me.mention_widget.focus();
					me.mention_widget.trigger(e.which===me.codes.UP ? me.up : me.down);
				}
				return;

			} else if ([me.codes.ENTER, me.codes.ESCAPE, me.codes.TAB, me.codes.SPACE].indexOf(e.which)!==-1) {
				me.mention_input.autocomplete("close");
				return;

			} else if (e.which !== 0 && !e.ctrlKey && !e.metaKey && !e.altKey) {
				if(!String.fromCharCode(e.which)) {
					// no point in parsing it if it is not a character key
					return;
				}
			}

			var value = $(this).val() || "";
			var i = e.target.selectionStart;
			var key = value[i-1];
			var substring = value.substring(0, i);
			var mention = substring.match(/(?=[^\w]|^)@([\w]*)$/);

			if (mention && mention.length) {
				var mention = mention[0].slice(1);

				// record location of cursor
				me.cursor_from = i - mention.length;
				me.cursor_to = i;

				// render autocomplete at the bottom of the textbox and search for mention
				me.mention_input.autocomplete("option", "position", {
					of: me.input,
					my: "left top",
					at: "left bottom"
				});
				me.mention_input.autocomplete("search", mention);

			} else {
				me.cursor_from = me.cursor_to = 0;
				me.mention_input.autocomplete("close");
			}
		});

		// binding this in keydown to prevent default action
		this.input.keydown(function(e) {
			// enter, escape, tab
			if (me.autocomplete_open) {
				if ([me.codes.ENTER, me.codes.TAB].indexOf(e.which)!==-1) {
					// set focused value
					me.mention_widget.trigger(me.enter);

					// prevent default
					return false;
				}
			} else {
				if (e.which==me.codes.TAB) {
					me.comment_button.focus();

					return false;
				}
			}
		});
	},

	setup_comment_like: function() {
		this.wrapper.on("click", ".comment-likes .octicon-heart", frappe.ui.click_toggle_like);

		frappe.ui.setup_like_popover(this.wrapper, ".comment-likes");
	}
});

$.extend(frappe.timeline, {
	new_communication: function(communication) {
		var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
		if (docinfo && docinfo.communications) {
			var communications = docinfo.communications;
			var communication_exists = false;
			for (var i=0, l=communications.length; i<l; i++) {
				if (communications[i].name==communication.name) {
					communication_exists = true;
					break;
				}
			}

			if (!communication_exists) {
				docinfo.communications = communications.concat([communication]);
			}
		}

		if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
			cur_frm.timeline && cur_frm.timeline.refresh();
		}
	},

	delete_communication: function(communication) {
		var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
		var index = frappe.timeline.index_of_communication(communication, docinfo);
		if (index !== -1) {
			// remove it from communications list
			docinfo.communications.splice(index, 1);
		}

		if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
			cur_frm.timeline && cur_frm.timeline.refresh();
		}
	},

	update_communication: function(communication) {
		var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
		var index = frappe.timeline.index_of_communication(communication, docinfo);

		if (index !== -1) {
			// update
			$.extend(docinfo.communications[index], communication);
		}

		if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
			cur_frm.timeline && cur_frm.timeline.refresh();
		}
	},

	index_of_communication: function(communication, docinfo) {
		var index = -1;

		if (docinfo && docinfo.communications) {
			var communications = docinfo.communications;

			for (var i=0, l=communications.length; i<l; i++) {
				if (communications[i].name==communication.name) {
					index = i;
					break;
				}
			}
		}

		return index;
	},
})


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/footer/assign_to.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.form");

frappe.ui.form.AssignTo = Class.extend({
	init: function(opts) {
		var me = this;

		$.extend(this, opts);
		this.btn = this.parent.find(".add-assignment").on("click", function() { me.add(); });
		this.btn_wrapper = this.btn.parent();

		this.refresh();
	},
	refresh: function() {
		if(this.frm.doc.__islocal) {
			this.parent.toggle(false);
			return;
		}
		this.parent.toggle(true);
		this.render(this.frm.get_docinfo().assignments);
	},
	render: function(d) {
		var me = this;
		this.frm.get_docinfo().assignments = d;
		this.parent.find(".assignment-row").remove();

		if(me.primary_action) {
			me.primary_action.remove();
			me.primary_action = null;
		}

		if(this.dialog) {
			this.dialog.hide();
		}

		if(d && d.length) {
			for(var i=0; i<d.length; i++) {
				var info = frappe.user_info(d[i].owner);
				info.owner = d[i].owner;
				info.avatar = frappe.avatar(d[i].owner);
				info.description = d[i].description || "";

				info._fullname = info.fullname;
				if(info.fullname.length > 10) {
					info._fullname = info.fullname.substr(0, 10) + '...';
				}

				$(repl('<li class="assignment-row">\
					<a class="close" data-owner="%(owner)s">&times;</a>\
					%(avatar)s\
					<span>%(_fullname)s</span>\
				</li>', info))
					.insertBefore(this.parent.find('.add-assignment'));

				if(d[i].owner===user) {
					me.primary_action = this.frm.page.add_menu_item(__("Assignment Complete"), function() {
						me.remove(user);
					}, "icon-ok", "btn-success")
				}

				if(!(d[i].owner === user || me.frm.perm[0].write)) {
					me.parent.find('a.close').remove();
				}
			}

			// set remove
			this.parent.find('a.close').click(function() {
				me.remove($(this).attr('data-owner'));
				return false;
			});

			//this.btn_wrapper.addClass("hide");
		} else {
			//this.btn_wrapper.removeClass("hide");
		}
	},
	add: function() {
		var me = this;

		if(this.frm.doc.__unsaved == 1) {
			frappe.throw(__("Please save the document before assignment"));
			return;
		}

		if(!me.dialog) {
			me.dialog = frappe.ui.to_do_dialog({
				obj: me,
				method: 'frappe.desk.form.assign_to.add',
				doctype: me.frm.doctype,
				docname: me.frm.docname,
				callback: function(r) {
					me.render(r.message);
					me.frm.reload_doc();
				}
			});
		}
		me.dialog.clear();

		if(me.frm.meta.title_field) {
			me.dialog.set_value("description", me.frm.doc[me.frm.meta.title_field])
		}

		me.dialog.show();

		var myself = me.dialog.get_input("myself").on("click", function() {
			me.toggle_myself(this);
		});
		me.toggle_myself(myself);
	},

	toggle_myself: function(myself) {
		var me = this;
		if($(myself).prop("checked")) {
			me.dialog.set_value("assign_to", user);
			me.dialog.set_value("notify", 0);
			me.dialog.get_field("notify").$wrapper.toggle(false);
			me.dialog.get_field("assign_to").$wrapper.toggle(false);
		} else {
			me.dialog.set_value("assign_to", "");
			me.dialog.set_value("notify", 1);
			me.dialog.get_field("notify").$wrapper.toggle(true);
			me.dialog.get_field("assign_to").$wrapper.toggle(true);
		}
	},

	remove: function(owner) {
		var me = this;

		if(this.frm.doc.__unsaved == 1) {
			frappe.throw(__("Please save the document before removing assignment"));
			return;
		}

		frappe.call({
			method:'frappe.desk.form.assign_to.remove',
			args: {
				doctype: me.frm.doctype,
				name: me.frm.docname,
				assign_to: owner
			},
			callback:function(r,rt) {
				me.render(r.message);
				me.frm.reload_doc();
			}
		});
	}
});


frappe.ui.to_do_dialog = function(opts){
	var dialog = new frappe.ui.Dialog({
		title: __('Add to To Do'),
		fields: [
			{fieldtype:'Check', fieldname:'myself', label:__("Assign to me"), "default":0},
			{fieldtype: 'Section Break'},
			{fieldtype: 'Link', fieldname:'assign_to', options:'User',
				label:__("Assign To"), reqd:true, filters: {'user_type': 'System User'}},
			{fieldtype:'Small Text', fieldname:'description', label:__("Comment"), reqd:true},
			{fieldtype: 'Section Break'},
			{fieldtype: 'Column Break'},
			{fieldtype:'Date', fieldname:'date', label: __("Complete By")},
			{fieldtype:'Check', fieldname:'notify',
				label:__("Notify by Email"), "default":1},
			{fieldtype: 'Column Break'},
			{fieldtype:'Select', fieldname:'priority', label: __("Priority"),
				options:[
					{value: 'Low', label: __('Low')},
					{value:'Medium', label: __('Medium')},
					{value: 'High', label: __('High')}],
				'default':'Medium'},
		],
		primary_action: function() { frappe.ui.add_assignment(opts, dialog); },
		primary_action_label: __("Add")
	});

	dialog.fields_dict.assign_to.get_query = "frappe.core.doctype.user.user.user_query";

	return dialog
}

frappe.ui.add_assignment = function(opts, dialog) {
	var assign_to = opts.obj.dialog.fields_dict.assign_to.get_value();
	var args = opts.obj.dialog.get_values();
	if(args && assign_to) {
		return frappe.call({
			method: opts.method,
			args: $.extend(args, {
				doctype: opts.doctype,
				name: opts.docname,
				assign_to: assign_to,
				bulk_assign:  opts.bulk_assign || false,
				re_assign: opts.re_assign || false
			}),
			callback: function(r,rt) {
				if(!r.exc) {
					if(opts.callback){
						opts.callback(r);
					}
					dialog.hide();
				}
			},
			btn: this
		});
	}
}


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/form/quick_entry.js
 */
frappe.provide('frappe.ui.form');

frappe.ui.form.quick_entry = function(doctype, success) {
	frappe.model.with_doctype(doctype, function() {
		var mandatory = $.map(frappe.get_meta(doctype).fields,
			function(d) { return (d.reqd || d.bold && !d.read_only) ? d : null });
		var meta = frappe.get_meta(doctype);

		var doc = frappe.model.get_new_doc(doctype, null, null, true);

		if(meta.quick_entry != 1) {
			frappe.set_route('Form', doctype, doc.name);
			return;
		}

		if(mandatory.length > 7) {
			// too many fields, show form
			frappe.set_route('Form', doctype, doc.name);
			return;
		}

		if($.map(mandatory, function(d) { return d.fieldtype==='Table' ? d : null }).length) {
			// has mandatory table, quit!
			frappe.set_route('Form', doctype, doc.name);
			return;
		}

		if(meta.autoname && meta.autoname.toLowerCase()==='prompt') {
			mandatory = [{fieldname:'__name', label:__('{0} Name', [meta.name]),
				reqd: 1, fieldtype:'Data'}].concat(mandatory);
		}

		var dialog = new frappe.ui.Dialog({
			title: __("New {0}", [doctype]),
			fields: mandatory,
		});

		var update_doc = function() {
			var data = dialog.get_values(true);
			$.each(data, function(key, value) {
				if(key==='__name') {
					dialog.doc.name = value;
				} else {
					if(!is_null(value)) {
						dialog.doc[key] = value;
					}
				}
			});
			return dialog.doc;
		}

		var open_doc = function() {
			dialog.hide();
			update_doc();
			frappe.set_route('Form', doctype, doc.name);
		}

		dialog.doc = doc;

		// refresh dependencies etc
		dialog.refresh();

		dialog.set_primary_action(__('Save'), function() {
			if(dialog.working) return;
			var data = dialog.get_values();

			if(data) {
				dialog.working = true;
				values = update_doc();
				frappe.call({
					method: "frappe.client.insert",
					args: {
						doc: values
					},
					callback: function(r) {
						dialog.hide();
						// delete the old doc
						frappe.model.clear_doc(dialog.doc.doctype, dialog.doc.name);
						var doc = r.message;
						if(success) {
							success(doc);
						}
						frappe.ui.form.update_calling_link(doc.name);
					},
					error: function() {
						open_doc();
					},
					always: function() {
						dialog.working = false;
					},
					freeze: true
				});
			}
		});

		var $link = $('<div class="text-muted small" style="padding-left: 10px; padding-top: 15px;">\
			Ctrl+enter to save | <a class="edit-full">Edit in full page</a></div>').appendTo(dialog.body);

		$link.find('.edit-full').on('click', function() {
			// edit in form
			open_doc();
		});

		// ctrl+enter to save
		dialog.wrapper.keydown("meta+return ctrl+return", function(e) {
			if(!frappe.request.ajax_count) {
				// not already working -- double entry
				dialog.get_primary_btn().trigger("click");
			}
		});

		dialog.show();

		// set defaults
		$.each(dialog.fields_dict, function(fieldname, field) {
			field.doctype = doc.doctype;
			field.docname = doc.name;

			if(!is_null(doc[fieldname])) {
				field.set_input(doc[fieldname]);
			}
		});

	});
}
