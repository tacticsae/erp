frappe.templates["listing"] = '<div class="frappe-list"> <div class="list-filters" style="display: none;"> <div class="show_filters"> <div class="set-filters"> <button class="btn btn-default btn-xs new-filter text-muted" style="margin-right: 10px;"> {%= __("Add Filter") %}</button> </div> <div class="filter_area"></div> </div> </div> <div style="margin-bottom:9px" class="list-toolbar-wrapper hide"> <div class="list-toolbar btn-group" style="display:inline-block; margin-right: 10px;"> </div> </div> <div style="clear:both"></div> <div class="no-result text-center" style="display: none;"> {%= no_result_message %} </div> <div class="result"> <div class="list-headers"></div> <div class="list-loading text-center"> {%= frappe.messages.get_waiting_message(__("Loading") + "..." ) %} </div> <div class="result-list"></div> </div> <div class="list-paging-area" style="display: none;"> <div class="row"> <div class="col-xs-6"> <button class="btn btn-default btn-more btn-sm">{%= _more %}...</button> </div> <div class="col-xs-6"> <div class="btn-group pull-right btn-group-paging"> <button type="button" class="btn btn-default btn-sm btn-info" data-value="20">20</button> <button type="button" class="btn btn-default btn-sm" data-value="100">100</button> <button type="button" class="btn btn-default btn-sm" data-value="500">500</button> </div> </div> </div> </div> </div> ';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/listing.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// new re-factored Listing object
// removed rarely used functionality
//
// opts:
//   parent

//   method (method to call on server)
//   args (additional args to method)
//   get_args (method to return args as dict)

//   show_filters [false]
//   doctype
//   filter_fields (if given, this list is rendered, else built from doctype)

//   query or get_query (will be deprecated)
//   query_max
//   buttons_in_frame

//   no_result_message ("No result")

//   page_length (20)
//   hide_refresh (False)
//   no_toolbar
//   new_doctype
//   [function] render_row(parent, data)
//   [function] onrun
//   no_loading (no ajax indicator)

frappe.provide('frappe.ui');
frappe.ui.Listing = Class.extend({
	init: function(opts) {
		this.opts = opts || {};
		this.page_length = 20;
		this.start = 0;
		this.data = [];
		if(opts) {
			this.make();
		}
	},
	prepare_opts: function() {
		if(this.opts.new_doctype) {
			if(frappe.boot.user.can_create.indexOf(this.opts.new_doctype)==-1) {
				this.opts.new_doctype = null;
			} else {
				this.opts.new_doctype = this.opts.new_doctype;
			}
		}
		if(!this.opts.no_result_message) {
			this.opts.no_result_message = __('Nothing to show');
		}
		if(!this.opts.page_length) {
			this.opts.page_length = this.list_settings ? (this.list_settings.limit || 20) : 20;
		}
		this.opts._more = __("More");
	},
	make: function(opts) {
		if(opts) {
			this.opts = opts;
		}
		this.prepare_opts();
		$.extend(this, this.opts);

		$(this.parent).html(frappe.render_template("listing", this.opts));
		this.$w = $(this.parent).find('.frappe-list');
		this.set_events();

		if(this.page) {
			this.$w.find('.list-toolbar-wrapper').toggle(false);
		}

		if(this.show_filters) {
			this.make_filters();
		}
	},
	add_button: function(label, click, icon) {
		if(this.page) {
			return this.page.add_menu_item(label, click, icon)
		} else {
			this.$w.find('.list-toolbar-wrapper').removeClass("hide");
			$button = $('<button class="btn btn-default"></button>')
				.appendTo(this.$w.find('.list-toolbar'))
				.html((icon ? ("<i class='"+icon+"'></i> ") : "") + label)
				.click(click);
			return $button
		}
	},
	set_events: function() {
		var me = this;

		// next page
		this.$w.find('.btn-more').click(function() {
			me.run({append: true });
		});

		this.$w.find(".btn-group-paging .btn").click(function() {
			me.page_length = cint($(this).attr("data-value"));
			me.$w.find(".btn-group-paging .btn-info").removeClass("btn-info");
			$(this).addClass("btn-info");
			me.run({append: true});
		});

		// title
		if(this.title) {
			this.$w.find('h3').html(this.title).toggle(true);
		}

		// new
		this.set_primary_action();

		if(me.no_toolbar || me.hide_toolbar) {
			me.$w.find('.list-toolbar-wrapper').toggle(false);
		}
	},

	set_primary_action: function() {
		var me = this;
		if(this.new_doctype) {
			if(this.listview.settings.set_primary_action){
				this.listview.settings.set_primary_action(this);
			} else {
				this.page.set_primary_action(__("New"), function() {
					me.make_new_doc(me.new_doctype); }, "octicon octicon-plus");
			}
		} else {
			this.page.clear_primary_action();
		}
	},

	make_new_doc: function(doctype) {
		var me = this;
		frappe.model.with_doctype(doctype, function() {
			if(me.custom_new_doc) {
				me.custom_new_doc(doctype);
			} else {
				if(me.filter_list) {
					frappe.route_options = {};
					$.each(me.filter_list.get_filters(), function(i, f) {
						if(f[2]==="=" && !in_list(frappe.model.std_fields_list, f[1])) {
							frappe.route_options[f[1]] = f[3];
						}
					});
				}
				frappe.new_doc(doctype, true);
			}
		});
	},

	make_filters: function() {
		this.filter_list = new frappe.ui.FilterList({
			listobj: this,
			$parent: this.$w.find('.list-filters').toggle(true),
			doctype: this.doctype,
			filter_fields: this.filter_fields
		});
		if(frappe.model.is_submittable(this.doctype)) {
			this.filter_list.add_filter(this.doctype, "docstatus", "!=", 2);
		};
	},

	clear: function() {
		this.data = [];
		this.$w.find('.result-list').empty();
		this.$w.find('.result').toggle(true);
		this.$w.find('.no-result').toggle(false);
		this.start = 0;
	},
	run: function(more) {
		var me = this;
		if(!more) {
			this.start = 0;
			if(this.onreset) this.onreset();
		}

		if(!me.opts.no_loading) {
			me.set_working(true);
		}

		var args = this.get_call_args();
		this.save_list_settings_locally(args);

		return frappe.call({
			method: this.opts.method || 'frappe.desk.query_builder.runquery',
			type: "GET",
			freeze: (this.opts.freeze != undefined ? this.opts.freeze : true),
			args: args,
			callback: function(r) {
				if(!me.opts.no_loading)
					me.set_working(false);
				me.dirty = false;
				me.render_results(r);
			},
			no_spinner: this.opts.no_loading
		});
	},
	save_list_settings_locally: function(args) {
		if(this.opts.save_list_settings && this.doctype && !this.docname) {
			// save list settings locally
			list_settings = frappe.model.list_settings[this.doctype];

			if(!list_settings) {
				return
			}

			var different = false;

			if(!frappe.utils.arrays_equal(args.filters, list_settings.filters)) {
				// settings are dirty if filters change
				list_settings.filters = args.filters || [];
				different = true;
			}

			if(list_settings.order_by !== args.order_by) {
				list_settings.order_by = args.order_by;
				different = true;
			}

			if(list_settings.limit != args.limit_page_length) {
				list_settings.limit = args.limit_page_length || 20
				different = true;
			}

			// save fields in list settings
			if(args.save_list_settings_fields) {
				list_settings.fields = args.fields;
			};

			if(different) {
				list_settings.updated_on = moment().toString();
			}
		}
	},
	set_working: function(flag) {
		this.$w.find('.img-load').toggle(flag);
	},
	get_call_args: function() {
		// load query
		if(!this.method) {
			var query = this.get_query ? this.get_query() : this.query;
			query = this.add_limits(query);
			var args={
				query_max: this.query_max,
				as_dict: 1
			}
			args.simple_query = query;
		} else {
			var args = {
				limit_start: this.start,
				limit_page_length: this.page_length
			}
		}

		// append user-defined arguments
		if(this.args)
			$.extend(args, this.args)

		if(this.get_args) {
			$.extend(args, this.get_args());
		}
		return args;
	},
	render_results: function(r) {
		if(this.start===0) this.clear();

		this.$w.find('.list-paging-area, .list-loading').toggle(false);

		if(r.message) {
			r.values = this.get_values_from_response(r.message);
		}

		if(r.values && r.values.length) {
			this.data = this.data.concat(r.values);
			this.render_list(r.values);
			this.update_paging(r.values);
		} else {
			if(this.start===0) {
				this.$w.find('.result').toggle(false);

				var msg = this.get_no_result_message
					? this.get_no_result_message()
					: (this.no_result_message
						? this.no_result_message
						: __("Nothing to show"));

				this.$w.find('.no-result')
					.html(msg)
					.toggle(true);
			}
		}

		// callbacks
		if(this.onrun) this.onrun();
		if(this.callback) this.callback(r);
		this.$w.trigger("render-complete");
	},

	get_values_from_response: function(data) {
		// make dictionaries from keys and values
		if(data.keys && $.isArray(data.keys)) {
			return frappe.utils.dict(data.keys, data.values);
		} else {
			return data;
		}
	},

	render_list: function(values) {
		this.last_page = values;
		if(this.filter_list) {
			this.filter_values = this.filter_list.get_filters();
		}

		this.render_rows(values);
	},
	render_rows: function(values) {
		// render the rows
		if(this.meta && this.meta.image_view){
			var cols = values.slice();
			while (cols.length) {
				row = this.add_row(cols[0]);
				$("<div class='row image-view-marker'></div>").appendTo(row);
				$(row).addClass('no-hover');
				this.render_image_view_row(row, cols.splice(0, 4), this, i);
			}

			this.render_image_gallery();
		} else {
			var m = Math.min(values.length, this.page_length);
			for(var i=0; i < m; i++) {
				this.render_row(this.add_row(values[i]), values[i], this, i);
			}
		}
	},
	render_image_gallery: function(){
		var me = this;
		frappe.require(
			[
				"assets/frappe/js/frappe/list/imageview.js",
				"assets/frappe/js/lib/gallery/js/blueimp-gallery.js",
				"assets/frappe/js/lib/gallery/css/blueimp-gallery.css",
				"assets/frappe/js/lib/gallery/js/blueimp-gallery-indicator.js",
				"assets/frappe/js/lib/gallery/css/blueimp-gallery-indicator.css"
			], function(){
				// remove previous gallery container
				me.$w.find(".blueimp-gallery").remove();
				// append gallery div
				var gallery = frappe.render_template("blueimp-gallery", {});
				$(gallery).appendTo(me.$w);

				me.$w.find(".zoom-view").click(function(event){
					event.preventDefault();
					opts = {
						doctype: me.doctype,
						docname: $(this).parent().attr('data-name'),
						container: me.$w
					};
					new frappe.views.ImageView(opts);
			});
		});
	},
	update_paging: function(values) {
		if(values.length >= this.page_length) {
			this.$w.find('.list-paging-area').toggle(true);
			this.start += this.page_length;
		}
	},
	add_row: function(row) {
		return $('<div class="list-row">')
			.data("data", (this.meta && this.meta.image_view) == 0 ? row : null)
			.appendTo(this.$w.find('.result-list'))
			.get(0);
	},
	refresh: function() {
		this.run();
	},
	add_limits: function(query) {
		query += ' LIMIT ' + this.start + ',' + (this.page_length+1);
		return query
	},
	set_filter: function(fieldname, label, doctype) {
		if(!doctype) doctype = this.doctype;
		var filter = this.filter_list.get_filter(fieldname);
		if(filter) {
			var v = filter.field.get_parsed_value();
			if(v.indexOf(label)!=-1) {
				// already set
				return this;
			} else {
				// second filter set for this field
				if(fieldname=='_user_tags') {
					// and for tags
					this.filter_list.add_filter(doctype, fieldname,
						'like', '%' + label + '%');
				} else {
					// or for rest using "in"
					filter.set_values(doctype, fieldname, 'in', v + ', ' + label);
				}
			}
		} else {
			// no filter for this item,
			// setup one
			if(['_user_tags', '_comments', '_assign', '_liked_by'].indexOf(fieldname)!==-1) {
				this.filter_list.add_filter(doctype, fieldname,
					'like', '%' + label + '%');
			} else {
				this.filter_list.add_filter(doctype, fieldname, '=', label);
			}
		}
		return this;
	},
	init_list_settings: function() {
		if(frappe.model.list_settings[this.doctype]) {
			this.list_settings = frappe.model.list_settings[this.doctype];
		} else {
			this.list_settings = {};
		}
	},
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/model/indicator.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

frappe.get_indicator = function(doc, doctype) {
	if(doc.__unsaved) {
		return [__("Not Saved"), "orange"];
	}

	if(!doctype) doctype = doc.doctype;

	var settings = frappe.listview_settings[doctype] || {};

	var is_submittable = frappe.model.is_submittable(doctype),
		workflow_fieldname = frappe.workflow.get_state_fieldname(doctype);

	if(doc.docstatus==3) {
		return [__("Queued for saving"), "orange", "docstatus,=,3"];
	}

	if(doc.docstatus==4) {
		return [__("Queued for submission"), "orange", "docstatus,=,4"];
	}

	if(doc.docstatus==5) {
		return [__("Queued for cancellation"), "orange", "docstatus,=,5"];
	}

	// workflow
	if(workflow_fieldname) {
		var value = doc[workflow_fieldname];
		if(value) {
			var colour = {
				"Success": "green",
				"Warning": "orange",
				"Danger": "red",
				"Primary": "blue",
			}[locals["Workflow State"][value].style] || "darkgrey";
			return [__(value), colour, workflow_fieldname + ',=,' + value];
		}
	}

	if(is_submittable && doc.docstatus==0 && !settings.has_indicator_for_draft) {
		return [__("Draft"), "red", "docstatus,=,0"];
	}

	if(is_submittable && doc.docstatus==2) {
		return [__("Cancelled"), "red", "docstatus,=,2"];
	}

	if(settings.get_indicator) {
		var indicator = settings.get_indicator(doc);
		if(indicator) return indicator;
	}

	if(is_submittable && doc.docstatus==1) {
		return [__("Submitted"), "blue", "docstatus,=,1"];
	}

	if(doc.status) {
		return [__(doc.status), frappe.utils.guess_colour(doc.status)];
	}
}


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/filters/filters.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.FilterList = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.filters = [];
		this.$w = this.$parent;
		this.set_events();
	},
	set_events: function() {
		var me = this;
		// show filters
		this.$w.find('.new-filter').bind('click', function() {
			me.add_filter(me.doctype, 'name');
		});
	},

	show_filters: function() {
		this.$w.find('.show_filters').toggle();
		if(!this.filters.length) {
			this.add_filter(this.doctype, 'name');
			this.filters[0].$w.find(".filter_field input").focus();
		}
	},

	clear_filters: function() {
		$.each(this.filters, function(i, f) { f.remove(true); });
		this.filters = [];
	},

	add_filter: function(doctype, fieldname, condition, value, hidden) {
		if(doctype && fieldname
			&& !frappe.meta.has_field(doctype, fieldname)
			&& !in_list(frappe.model.std_fields_list, fieldname)) {
			frappe.msgprint({
				message: __('Filter {0} missing', [fieldname.bold()]),
				title: 'Invalid Filter',
				indicator: 'red'
			});
			return;
		}


		this.$w.find('.show_filters').toggle(true);
		var is_new_filter = arguments.length===0;

		if (is_new_filter && this.$w.find(".is-new-filter:visible").length) {
			// only allow 1 new filter at a time!
			return;
		}

		var filter = this.push_new_filter(doctype, fieldname, condition, value);

		if (filter && is_new_filter) {
			filter.$w.addClass("is-new-filter");
		}

		if (filter && hidden) {
			filter.freeze();
			filter.$btn_group.addClass("hide");
		}

		return filter;
	},

	push_new_filter: function(doctype, fieldname, condition, value) {
		if(this.filter_exists(doctype, fieldname, condition, value)) return;

		var filter = new frappe.ui.Filter({
			flist: this,
			_doctype: doctype,
			fieldname: fieldname,
			condition: condition,
			value: value,
        });

		this.filters.push(filter);

		return filter;
	},

	filter_exists: function(doctype, fieldname, condition, value) {
		for(var i in this.filters) {
			if(this.filters[i].field) {
				var f = this.filters[i].get_value();
				if(f[0]==doctype && f[1]==fieldname && f[2]==condition
					&& f[3]==value) return true;

			}
		}
		return false;
	},

	get_filters: function() {
		// get filter values as dict
		var values = [];
		$.each(this.filters, function(i, filter) {
			if(filter.field) {
				filter.freeze();
				values.push(filter.get_value());
			}
		});
		return values;
	},

	// remove hidden filters
	update_filters: function() {
		var fl = [];
		$.each(this.filters, function(i, f) {
			if(f.field) fl.push(f);
		})
		this.filters = fl;
	},

	get_filter: function(fieldname) {
		for(var i in this.filters) {
			if(this.filters[i].field && this.filters[i].field.df.fieldname==fieldname)
				return this.filters[i];
		}
	}
});

frappe.ui.Filter = Class.extend({
	init: function(opts) {
		$.extend(this, opts);

		this.doctype = this.flist.doctype;
		this.make();
		this.make_select();
		this.set_events();
	},
	make: function() {
		this.$w = $(frappe.render_template("edit_filter", {})).appendTo(this.flist.$w.find('.filter_area'));
	},
	make_select: function() {
		var me = this;
		this.fieldselect = new frappe.ui.FieldSelect({
			parent: this.$w.find('.fieldname_select_area'),
			doctype: this.doctype,
			filter_fields: this.filter_fields,
			select: function(doctype, fieldname) {
				me.set_field(doctype, fieldname);
			}
		});
		if(this.fieldname) {
			this.fieldselect.set_value(this._doctype || this.doctype, this.fieldname);
		}
	},
	set_events: function() {
		var me = this;

		this.$w.find("a.remove-filter").on("click", function() {
			me.remove();
		});

		this.$w.find(".set-filter-and-run").on("click", function() {
			me.$w.removeClass("is-new-filter");
			me.flist.listobj.run();
		});

		// add help for "in" codition
		me.$w.find('.condition').change(function() {
			if(!me.field) return;
			var condition = $(this).val();
			if(in_list(["in", "like", "not in", "not like"], condition)) {
				me.set_field(me.field.df.parent, me.field.df.fieldname, 'Data', condition);
				if(!me.field.desc_area) {
					me.field.desc_area = $('<div class="text-muted small">').appendTo(me.field.wrapper);
				}
				// set description
				me.field.desc_area.html((in_list(["in", "not in"], condition)==="in"
					? __("values separated by commas")
					: __("use % as wildcard"))+'</div>');
			} else {
				me.set_field(me.field.df.parent, me.field.df.fieldname, null,
					 condition);
			}
		});

		// set the field
		if(me.fieldname) {
			// pre-sets given (could be via tags!)
			this.set_values(me._doctype, me.fieldname, me.condition, me.value);
		} else {
			me.set_field(me.doctype, 'name');
		}
	},

	remove: function(dont_run) {
		this.$w.remove();
		this.$btn_group && this.$btn_group.remove();
		this.field = null;
		this.flist.update_filters();

		if(!dont_run) {
			this.flist.listobj.dirty = true;
			this.flist.listobj.refresh();
		}
	},

	set_values: function(doctype, fieldname, condition, value) {
		// presents given (could be via tags!)
		this.set_field(doctype, fieldname);
		if(condition) this.$w.find('.condition').val(condition).change();
		if(value!=null) this.field.set_input(value);
	},

	set_field: function(doctype, fieldname, fieldtype, condition) {
		var me = this;

		// set in fieldname (again)
		var cur = me.field ? {
			fieldname: me.field.df.fieldname,
			fieldtype: me.field.df.fieldtype,
			parent: me.field.df.parent,
		} : {};

		var original_docfield = me.fieldselect.fields_by_name[doctype][fieldname];
		if(!original_docfield) {
			msgprint(__("Field {0} is not selectable.", [fieldname]));
			return;
		}

		var df = copy_dict(me.fieldselect.fields_by_name[doctype][fieldname]);

		// filter field shouldn't be read only or hidden
		df.read_only = 0;
		df.hidden = 0;

		this.set_fieldtype(df, fieldtype);

		// called when condition is changed,
		// don't change if all is well
		if(me.field && cur.fieldname == fieldname && df.fieldtype == cur.fieldtype &&
			df.parent == cur.parent) {
			return;
		}

		// clear field area and make field
		me.fieldselect.selected_doctype = doctype;
		me.fieldselect.selected_fieldname = fieldname;

		// save old text
		var old_text = null;
		if(me.field) {
			old_text = me.field.get_parsed_value();
		}

		var field_area = me.$w.find('.filter_field').empty().get(0);
		var f = frappe.ui.form.make_control({
			df: df,
			parent: field_area,
			only_input: true,
		})
		f.refresh();

		me.field = f;
		if(old_text && me.field.df.fieldtype===cur.fieldtype)
			me.field.set_input(old_text);

		if(!condition) this.set_default_condition(df, fieldtype);

		// run on enter
		$(me.field.wrapper).find(':input').keydown(function(ev) {
			if(ev.which==13) {
				me.flist.listobj.run();
			}
		})
	},

	set_fieldtype: function(df, fieldtype) {
		// reset
		if(df.original_type)
			df.fieldtype = df.original_type;
		else
			df.original_type = df.fieldtype;

		df.description = ''; df.reqd = 0;

		// given
		if(fieldtype) {
			df.fieldtype = fieldtype;
			return;
		}

		// scrub
		if(df.fieldname=="docstatus") {
			df.fieldtype="Select",
			df.options=[
				{value:0, label:__("Draft")},
				{value:1, label:__("Submitted")},
				{value:2, label:__("Cancelled")},
				{value:3, label:__("Queued for saving")},
				{value:4, label:__("Queued for submission")},
				{value:5, label:__("Queued for cancellation")},
			]
		} else if(df.fieldtype=='Check') {
			df.fieldtype='Select';
			df.options='No\nYes';
		} else if(['Text','Small Text','Text Editor','Code','Tag','Comments',
			'Dynamic Link','Read Only','Assign'].indexOf(df.fieldtype)!=-1) {
			df.fieldtype = 'Data';
		} else if(df.fieldtype=='Link' && this.$w.find('.condition').val()!="=") {
			df.fieldtype = 'Data';
		}
		if(df.fieldtype==="Data" && (df.options || "").toLowerCase()==="email") {
			df.options = null;
		}
	},

	set_default_condition: function(df, fieldtype) {
		if(!fieldtype) {
			// set as "like" for data fields
			if(df.fieldtype=='Data') {
				this.$w.find('.condition').val('like');
			} else {
				this.$w.find('.condition').val('=');
			}
		}
	},

	get_value: function() {
		return [this.fieldselect.selected_doctype,
			this.field.df.fieldname, this.get_condition(), this.get_selected_value()];
	},

	get_selected_value: function() {
		var val = this.field.get_parsed_value();

		if(typeof val==='string') {
			val = strip(val);
		}

		if(this.field.df.original_type == 'Check') {
			val = (val=='Yes' ? 1 :0);
		}

		if(this.get_condition().indexOf('like', 'not like')!==-1) {
			// automatically append wildcards
			if(val) {
				if(val.slice(0,1) !== "%") {
					val = "%" + val;
				}
				if(val.slice(-1) !== "%") {
					val = val + "%";
				}
			}
		} else if(in_list(["in", "not in"], this.get_condition())) {
			val = $.map(val.split(","), function(v) { return strip(v); });
		} if(val === '%') {
			val = "";
		}

		return val;
	},

	get_condition: function() {
		return this.$w.find('.condition').val();
	},

	freeze: function() {
		if(this.$btn_group) {
			// already made, just hide the condition setter
			this.set_filter_button_text();
			this.$w.toggle(false);
			return;
		}

		var me = this;

		// add a button for new filter if missing
		this.$btn_group = $('<div class="btn-group">\
			<button class="btn btn-default btn-xs toggle-filter"\
				title="'+__("Edit Filter")+'">\
				%(label)s %(condition)s "%(value)s"\
			</button>\
			<button class="btn btn-default btn-xs remove-filter"\
				title="'+__("Remove Filter")+'">\
				<i class="icon-remove text-muted"></i>\
			</button></div>')
			.insertAfter(this.flist.$w.find(".set-filters .new-filter"));

		this.set_filter_button_text();

		this.$btn_group.find(".remove-filter").on("click", function() {
			me.remove();
		});

		this.$btn_group.find(".toggle-filter").on("click", function() {
			me.$w.toggle();
		})
		this.$w.toggle(false);
	},

	set_filter_button_text: function() {
		var value = this.get_selected_value();

		if(this.field.df.fieldname==="docstatus") {
			value = {0:"Draft", 1:"Submitted", 2:"Cancelled"}[value] || value;
		} else if(this.field.df.original_type==="Check") {
			value = {0:"No", 1:"Yes"}[cint(value)];
		} else if (in_list(["Date", "Datetime"], this.field.df.fieldtype)) {
			value = frappe.datetime.str_to_user(value);
		} else {
			value = this.field.get_value();
		}

		this.$btn_group.find(".toggle-filter")
			.html(repl('%(label)s %(condition)s "%(value)s"', {
				label: __(this.field.df.label),
				condition: this.get_condition(),
				value: __(value),
			}));
	}

});

// <select> widget with all fields of a doctype as options
frappe.ui.FieldSelect = Class.extend({
	// opts parent, doctype, filter_fields, with_blank, select
	init: function(opts) {
		var me = this;
		$.extend(this, opts);
		this.fields_by_name = {};
		this.options = [];
		this.$select = $('<input class="form-control">')
			.appendTo(this.parent)
			.on("click", function () { $(this).select(); })
			.autocomplete({
				source: me.options,
				minLength: 0,
				autoFocus: true,
				focus: function(event, ui) {
					event.preventDefault();
				},
				select: function(event, ui) {
					me.selected_doctype = ui.item.doctype;
					me.selected_fieldname = ui.item.fieldname;
					me.$select.val(ui.item.label);
					if(me.select) me.select(ui.item.doctype, ui.item.fieldname);
					return false;
				}
			});

		this.$select.data('ui-autocomplete')._renderItem = function(ul, item) {
			return $(repl('<li class="filter-field-select"><p>%(label)s</p></li>', item))
				.data("item.autocomplete", item)
				.appendTo(ul);
		}

		if(this.filter_fields) {
			for(var i in this.filter_fields)
				this.add_field_option(this.filter_fields[i])
		} else {
			this.build_options();
		}
		this.set_value(this.doctype, "name");
		window.last_filter = this;
	},
	get_value: function() {
		return this.selected_doctype ? this.selected_doctype + "." + this.selected_fieldname : null;
	},
	val: function(value) {
		if(value===undefined) {
			return this.get_value();
		} else {
			this.set_value(value);
		}
	},
	clear: function() {
		this.selected_doctype = null;
		this.selected_fieldname = null;
		this.$select.val("");
	},
	set_value: function(doctype, fieldname) {
		var me = this;
		this.clear();
		if(!doctype) return;

		// old style
		if(doctype.indexOf(".")!==-1) {
			parts = doctype.split(".");
			doctype = parts[0];
			fieldname = parts[1];
		}

		$.each(this.options, function(i, v) {
			if(v.doctype===doctype && v.fieldname===fieldname) {
				me.selected_doctype = doctype;
				me.selected_fieldname = fieldname;
				me.$select.val(v.label);
				return false;
			}
		});
	},
	build_options: function() {
		var me = this;
		me.table_fields = [];
		var std_filters = $.map(frappe.model.std_fields, function(d) {
			var opts = {parent: me.doctype}
			if(d.fieldname=="name") opts.options = me.doctype;
			return $.extend(copy_dict(d), opts);
		});

		// add parenttype column
		var doctype_obj = locals['DocType'][me.doctype];
		if(doctype_obj && cint(doctype_obj.istable)) {
			std_filters = std_filters.concat([{
				fieldname: 'parent',
				fieldtype: 'Data',
				label: 'Parent',
				parent: me.doctype,
			}]);
		}

		// blank
		if(this.with_blank) {
			this.options.push({
				label:"",
				value:"",
			})
		}

		// main table
		var main_table_fields = std_filters.concat(frappe.meta.docfield_list[me.doctype]);
		$.each(frappe.utils.sort(main_table_fields, "label", "string"), function(i, df) {
			if(frappe.perm.has_perm(me.doctype, df.permlevel, "read"))
				me.add_field_option(df);
		});

		// child tables
		$.each(me.table_fields, function(i, table_df) {
			if(table_df.options) {
				var child_table_fields = [].concat(frappe.meta.docfield_list[table_df.options]);
				$.each(frappe.utils.sort(child_table_fields, "label", "string"), function(i, df) {
					if(frappe.perm.has_perm(me.doctype, df.permlevel, "read"))
						me.add_field_option(df);
				});
			}
		});
	},

	add_field_option: function(df) {
		var me = this;
		if(me.doctype && df.parent==me.doctype) {
			var label = __(df.label);
			var table = me.doctype;
			if(df.fieldtype=='Table') me.table_fields.push(df);
		} else {
			var label = __(df.label) + ' (' + __(df.parent) + ')';
			var table = df.parent;
		}
		if(frappe.model.no_value_type.indexOf(df.fieldtype)==-1 &&
			!(me.fields_by_name[df.parent] && me.fields_by_name[df.parent][df.fieldname])) {
				this.options.push({
					label: label,
					value: table + "." + df.fieldname,
					fieldname: df.fieldname,
					doctype: df.parent
				})
			if(!me.fields_by_name[df.parent]) me.fields_by_name[df.parent] = {};
			me.fields_by_name[df.parent][df.fieldname] = df;
		}
	},
})

frappe.templates["edit_filter"] = '<div class="filter-box"> <div class="list_filter row"> <div class="fieldname_select_area col-sm-4 form-group ui-front"></div> <div class="col-sm-2 form-group"> <select class="condition form-control"> <option value="=">{%= __("Equals") %}</option> <option value="like">{%= __("Like") %}</option> <option value="in">{%= __("In") %}</option> <option value="not in">{%= __("Not In") %}</option> <option value="!=">{%= __("Not Equals") %}</option> <option value="not like">{%= __("Not Like") %}</option> <option value=">">{%= __(">") %}</option> <option value="<">{%= __("<") %}</option> <option value=">=">{%= __(">=") %}</option> <option value="<=">{%= __("<=") %}</option> </select> </div> <div class="col-sm-6 col-xs-12"> <div class="filter_field pull-left" style="width: calc(100% - 70px)"></div> <div class="filter-actions pull-left"> <a class="set-filter-and-run btn btn-primary pull-left"><i class="icon-ok"></i></a> <a class="small grey remove-filter pull-left"><i class="octicon octicon-trashcan visible-xs"></i> <span class="hidden-xs">{%= __("Remove") %}</span></a> </div> <div class="clearfix"></div> </div> </div> </div> ';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/tags.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.TagEditor = Class.extend({
	init: function(opts) {
		/* docs:
		Arguments

		- parent
		- user_tags
		- doctype
		- docname
		*/
		$.extend(this, opts);
		var me = this;
		this.$w = $('<div class="tag-line">').appendTo(this.parent)
		this.$tags = $('<ul>').prependTo(this.$w);
		this.$tags.tagit({
			animate: false,
			allowSpaces: true,
			placeholderText: __('Add a tag') + "...",
			onTagAdded: function(ev, tag) {
				if(me.initialized && !me.refreshing) {
					var tag = tag.find('.tagit-label').text();
					return frappe.call({
						method: 'frappe.desk.tags.add_tag',
						args: me.get_args(tag),
						callback: function(r) {
							var user_tags = me.user_tags.split(",");
							user_tags.push(tag)
							me.user_tags = user_tags.join(",");
							me.on_change && me.on_change(me.user_tags);
						}
					});
				}
			},
			onTagRemoved: function(ev, tag) {
				if(!me.refreshing) {
					var tag = tag.find('.tagit-label').text();
					return frappe.call({
						method: 'frappe.desk.tags.remove_tag',
						args: me.get_args(tag),
						callback: function(r) {
							var user_tags = me.user_tags.split(",");
							user_tags.splice(user_tags.indexOf(tag), 1);
							me.user_tags = user_tags.join(",");
							me.on_change && me.on_change(me.user_tags);
						}
					});
				}
			}
		});
		if (!this.user_tags) {
			this.user_tags = "";
		}
		this.initialized = true;
		this.refresh(this.user_tags);
		this.setup_autocomplete();
	},
	setup_autocomplete: function() {
		var me = this;
		this.$w.find("input").autocomplete({
			minLength: 0,
			minChars: 0,
			source: function(request, response) {
				frappe.call({
					method:"frappe.desk.tags.get_tags",
					args:{
						doctype: me.frm.doctype,
						txt: request.term.toLowerCase()
					},
					callback: function(r) {
						response(r.message);
					}
				});
			},
		});
	},
	get_args: function(tag) {
		return {
			tag: tag,
			dt: this.frm.doctype,
			dn: this.frm.docname,
		}
	},
	refresh: function(user_tags) {
		var me = this;

		if(!me.initialized || me.refreshing)
			return;

		me.refreshing = true;
		try {
			me.$tags.tagit("removeAll");

			if(user_tags) {
				$.each(user_tags.split(','), function(i, v) {
					if(v) { me.$tags.tagit("createTag", v); }
				});
			}
		} catch(e) {
			me.refreshing = false;
			// wtf bug
			setTimeout( function() { me.refresh(); }, 100);
		}
		me.refreshing = false;

	}
})


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/like.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.is_liked = function(doc) {
	var liked = frappe.ui.get_liked_by(doc);
	return liked.indexOf(user)===-1 ? false : true;
}

frappe.ui.get_liked_by = function(doc) {
	var liked = doc._liked_by;
	if(liked) {
		liked = JSON.parse(liked);
	}

	return liked || [];
}

frappe.ui.toggle_like = function($btn, doctype, name, callback) {
	var add = $btn.hasClass("not-liked") ? "Yes" : "No";
	// disable click
	$btn.css('pointer-events', 'none');

	frappe.call({
		method: "frappe.desk.like.toggle_like",
		quiet: true,
		args: {
			doctype: doctype,
			name: name,
			add: add,
		},
		callback: function(r) {
			// renable click
			$btn.css('pointer-events', 'auto');

			if(!r.exc) {
				// update in all local-buttons
				var action_buttons = $('.like-action[data-name="'+ name.replace(/"/g, '\"')
					+'"][data-doctype="'+ doctype.replace(/"/g, '\"')+'"]');

				if(add==="Yes") {
					action_buttons.removeClass("not-liked text-extra-muted");
				} else {
					action_buttons.addClass("not-liked text-extra-muted");
				}

				// update in locals (form)
				var doc = locals[doctype] && locals[doctype][name];
				if(doc) {
					var liked_by = JSON.parse(doc._liked_by || "[]"),
						idx = liked_by.indexOf(user);
					if(add==="Yes") {
						if(idx===-1)
							liked_by.push(user);
					} else {
						if(idx!==-1) {
							liked_by = liked_by.slice(0,idx).concat(liked_by.slice(idx+1))
						}
					}
					doc._liked_by = JSON.stringify(liked_by);
				}

				if(callback) {
					callback();
				}
			}
		}
	});
};

frappe.ui.click_toggle_like = function() {
	var $btn = $(this);
	var $count = $btn.siblings(".likes-count");
	var not_liked = $btn.hasClass("not-liked");
	var doctype = $btn.attr("data-doctype");
	var name = $btn.attr("data-name");

	frappe.ui.toggle_like($btn, doctype, name, function() {
		if (not_liked) {
			$count.text(cint($count.text()) + 1);
		} else {
			$count.text(cint($count.text()) - 1);
		}
	});

	return false;
}

frappe.ui.setup_like_popover = function($parent, selector) {
	if (frappe.dom.is_touchscreen()) {
		return;
	}

	$parent.on("mouseover", selector, function() {
		var $wrapper = $(this);

		$wrapper.popover({
			animation: true,
			placement: "right",
			content: function() {
				var liked_by = JSON.parse($wrapper.attr('data-liked-by') || "[]");

				// hack
				if ($wrapper.find(".not-liked").length) {
					if (liked_by.indexOf(user)!==-1) {
						liked_by.splice(liked_by.indexOf(user), 1);
					}
				} else {
					if (liked_by.indexOf(user)===-1) {
						liked_by.push(user);
					}
				}

				if (!liked_by.length) {
					return "";
				}
				return frappe.render_template("liked_by", {"liked_by": liked_by});
			},
			html: true,
			container: 'body'
		});

		$wrapper.popover('show');
	});

	$parent.on("mouseout", selector, function() {
		$(this).popover('destroy');
	});
}

frappe.templates["liked_by"] = '<ul class="list-unstyled liked-by-popover"> {% for (var i in liked_by) { var liked_by_user = liked_by[i]; %} <li> {%= frappe.avatar(liked_by_user) %} <span>{%= frappe.user.full_name(liked_by_user) %}</span> </li> {% } %} </ul> ';
frappe.templates["print_template"] = '<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1"> <meta name="description" content=""> <meta name="author" content=""> <title>{%= title %}</title> <link href="{%= frappe.urllib.get_base_url() %}/assets/frappe/css/bootstrap.css" rel="stylesheet"> <link type="text/css" rel="stylesheet" href="{%= frappe.urllib.get_base_url() %}/assets/frappe/css/font-awesome.css"> <style> {%= frappe.boot.print_css %} </style> </head> <body> <div class="print-format-gutter"> <div class="print-format"> {%= content %} </div> </div> </body> </html> ';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/list/doclistview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.views.doclistview');
frappe.provide('frappe.listviews');

cur_list = null;
frappe.views.ListFactory = frappe.views.Factory.extend({
	make: function(route) {
		var me = this,
			doctype = route[1];

		frappe.model.with_doctype(doctype, function() {
			if(locals["DocType"][doctype].issingle) {
				frappe.set_re_route("Form", doctype);
			} else {
				if(!frappe.views.doclistview[doctype]) {
					frappe.views.doclistview[doctype] = new frappe.views.DocListView({
						doctype: doctype,
						parent: me.make_page(true, "List/" + doctype)
					});
				} else {
					frappe.container.change_to(frappe.views.doclistview[doctype].page_name);
				}
				me.set_cur_list();
			}
		});
	},
	show: function() {
		this.set_module_breadcrumb();
		this._super();
		this.set_cur_list();
		cur_list && cur_list.refresh();
	},
	set_module_breadcrumb: function() {
		if(frappe.route_history.length > 1) {
			var prev_route = frappe.route_history[frappe.route_history.length-2];
			if(prev_route[0]==="modules") {
				// save the last page from the breadcrumb was accessed
				frappe.breadcrumbs.set_doctype_module(frappe.get_route()[1], prev_route[1]);
			}
		}
	},
	set_cur_list: function() {
		var route = frappe.get_route();
		cur_list = frappe.container.page && frappe.container.page.doclistview;
		if(cur_list && cur_list.doctype!==route[1]) {
			// changing...
			cur_list = null;
		}
	}
});

$(document).on("save", function(event, doc) {
	frappe.views.set_list_as_dirty(doc.doctype);
});

frappe.views.set_list_as_dirty = function(doctype) {
	var list_page = "List/" + doctype;
	if(frappe.pages[list_page]) {
		if(frappe.pages[list_page].doclistview) {
			if(frappe.pages[list_page].doclistview.dirty) {
				// already refreshing...
				return;
			}
			frappe.pages[list_page].doclistview.dirty = true;
		}
	}
	var route = frappe.get_route();
	if(route[0]==="List" && route[1]===doctype) {
		setTimeout(function() {
			frappe.pages[list_page].doclistview.refresh();
		}, 100);
	}
}

frappe.views.DocListView = frappe.ui.Listing.extend({
	init: function(opts) {
		$.extend(this, opts);

		if(!frappe.model.can_read(this.doctype)) {
			frappe.show_not_permitted(frappe.get_route_str());
			return;
		};

		this.label = __(this.doctype);
		this.page_name = "List/" + this.doctype;
		this.dirty = true;
		this.tags_shown = false;
		this.label = (this.label.toLowerCase().substr(-4) == 'list') ?
		 	__(this.label) : (__(this.label) + ' ' + __('List'));
		this.make_page();
		this.setup();

		// refresh on init
		this.refresh();
	},

	make_page: function() {
		var me = this;
		this.parent.doclistview = this;
		this.page = this.parent.page;

		this.$page = $(this.parent).css({"min-height": "400px"});

		$('<div class="frappe-list-area"></div>')
			.appendTo(this.page.main);

		this.page.main.addClass("listview-main-section");
		var module = locals.DocType[this.doctype].module;

		this.page.set_title(__(this.doctype));
		frappe.breadcrumbs.add(module, this.doctype);
	},

	setup: function() {
		var me = this;
		this.can_delete = frappe.model.can_delete(this.doctype);
		this.meta = locals.DocType[this.doctype];
		this.$page.find('.frappe-list-area').empty(),
		this.init_list_settings();
		this.setup_listview();
		this.init_list(false);
		this.init_menu();
		this.show_match_help();
		this.init_listview();
		this.setup_filterable();
		this.init_filters();
		this.init_headers();
		this.init_sort_selector();
		this.init_like();
		this.init_select_all();
	},

	init_headers: function() {
		this.header = this.meta.image_view == 0? "list_item_main_head": "image_view_item_main_head";
		var main = frappe.render_template(this.header, {
			columns: this.listview.columns,
			right_column: this.listview.settings.right_column,
			_checkbox: ((frappe.model.can_delete(this.doctype) || this.listview.settings.selectable)
				&& !this.listview.no_delete)
		});

		this.list_header = $(frappe.render_template("list_item_row_head", { main:main, list:this.listview }))
			.appendTo(this.page.main.find(".list-headers"));
	},

	init_listview: function() {
		if(this.listview.settings.onload) {
			this.listview.settings.onload(this);
		}
	},

	set_sidebar_height: function() {
		var h_main = this.page.sidebar.height();
		var h_side = this.$page.find(".layout-side-section").height();
		if(h_side > h_main)
			this.$page.find(".layout-main-section").css({"min-height": h_side});
	},

	setup_filterable: function() {
		var me = this;
		this.$page.on("click", ".filterable", function(e) {
			var filters = $(this).attr("data-filter").split("|");
			var added = false;
			$.each(filters, function(i, f) {
				f = f.split(",");
				if(f[2]==="Today") {
					f[2] = frappe.datetime.get_today();
				} else if(f[2]=="User") {
					f[2] = user;
				}
				var new_filter = me.filter_list.add_filter(me.doctype, f[0], f[1], f.slice(2).join(","));
				if (new_filter) {
					// set it to true if atleast 1 filter is added
					added = true;
				}
			});
			if(added) {
				me.refresh(true);
			}
		});
		this.$page.find(".result-list").on("click", ".list-row-left", function(e) {
			// don't open in case of checkbox, like, filterable
			if ((e.target.className || "").indexOf("filterable")!==-1
				|| (e.target.className || "").indexOf("octicon-heart")!==-1
				|| e.target.type==="checkbox") {
				return;
			}

			var link = $(this).parent().find("a.list-id").get(0);
			window.location.href = link.href;
			return false;
		});
	},

	init_filters: function() {
		var me = this;
		var set_filters = function(filters) {
			$.each(filters, function(i, f) {
				if(f.length===3) {
					f = [me.doctype, f[0], f[1], f[2]]
				}
				me.filter_list.add_filter(f[0], f[1], f[2], f[3]);
			});
		}
		if(this.list_settings.filters) {
			set_filters(this.list_settings.filters);
		} else if(this.listview.settings.filters) {
			set_filters(this.listview.settings.filters);
		}
	},

	init_sort_selector: function() {
		var args = null;
		var me = this;
		if(this.listview.sort_selector) {
			args = this.listview.sort_selector;
		}

		if(this.list_settings.order_by) {
			// last saved settings
			var order_by = this.list_settings.order_by

			if(order_by.indexOf('`.`')!==-1) {
				// scrub table name (separted by dot), like `tabTime Log`.`modified` desc`
				order_by = order_by.split('.')[1];
			}

			parts = order_by.split(' ');
			if(parts.length===2) {
				var fieldname = strip(parts[0], '`');
				args = {
					sort_by: fieldname,
					sort_order: parts[1]
				}
			}
		}
		this.sort_selector = new frappe.ui.SortSelector({
			parent: this.wrapper.find('.list-filters'),
			doctype: this.doctype,
			args: args,
			change: function() {
				me.run();
			}
		});
	},

	show_match_help: function() {
		var me = this;
		var match_rules_list = frappe.perm.get_match_rules(this.doctype);
		var perm = frappe.perm.get_perm(this.doctype);

		if(match_rules_list.length) {
			frappe.utils.set_footnote(this, this.$page.find(".layout-main-section"),
				frappe.render_template("list_permission_footer", {condition_list: match_rules_list}));
			$(this.footnote_area).css({"margin-top":"0px"});
		}
	},
	setup_listview: function() {
		this.listview = frappe.views.get_listview(this.doctype, this);
		this.wrapper = this.$page.find('.frappe-list-area');
		this.page_length = this.list_settings.limit || 20;
		this.allow_delete = true;
	},
	init_list: function(auto_run) {
		var me = this;
		// init list
		this.make({
			method: 'frappe.desk.reportview.get',
			save_list_settings: true,
			get_args: this.get_args,
			parent: this.wrapper,
			freeze: true,
			start: 0,
			page_length: this.page_length,
			show_filters: true,
			show_grid: true,
			new_doctype: this.doctype,
			allow_delete: this.allow_delete,
			no_result_message: this.make_no_result(),
			custom_new_doc: me.listview.make_new_doc || undefined,
		});

		// make_new_doc can be overridden so that default values can be prefilled
		// for example - communication list in customer
		if(this.listview.settings.list_view_doc) {
			this.listview.settings.list_view_doc(this);
		}
		else{
			$(this.wrapper).on("click", 'button[list_view_doc="'+me.doctype+'"]', function(){
				(me.listview.make_new_doc || me.make_new_doc).apply(me, [me.doctype]);
			});
		}

		if((auto_run !== false) && (auto_run !== 0))
			this.refresh();
	},

	refresh: function(dirty) {
		if(dirty!==undefined) this.dirty = dirty;
		this.init_stats();

		if(this.listview.settings.refresh) {
			this.listview.settings.refresh(this);
		}

		this.set_filters_before_run();
		if(this.dirty) {
			this.run();
		} else {
			if(new Date() - (this.last_updated_on || 0) > 30000) {
				// older than 5 mins, refresh
				this.run();
			}
		}
	},

	set_filters_before_run: function() {
		// set filters from frappe.route_options
		// before switching pages, frappe.route_options can have pre-set filters
		// for the list view
		var me = this;

		if(frappe.route_options) {
			this.filter_list.clear_filters();
			$.each(frappe.route_options, function(key, value) {
				var doctype = null;

				// if `Child DocType.fieldname`
				if (key.indexOf(".")!==-1) {
					doctype = key.split(".")[0];
					key = key.split(".")[1];
				}

				// find the table in which the key exists
				// for example the filter could be {"item_code": "X"}
				// where item_code is in the child table.

				// we can search all tables for mapping the doctype
				if(!doctype) {
					if(in_list(frappe.model.std_fields_list, key)) {
						// standard
						doctype = me.doctype;
					} else if(frappe.meta.has_field(me.doctype, key)) {
						// found in parent
						doctype = me.doctype;
					} else {
						frappe.meta.get_table_fields(me.doctype).every(function(d) {
							if(frappe.meta.has_field(d.options, key)) {
								doctype = d.options;
								return false;
							}
							return true;
						});

						if(!doctype) {
							frappe.msgprint(__('Warning: Unable to find {0} in any table related to {1}', [
								key, __(me.doctype)]));
						}
					}
				}

				if(doctype) {
					if($.isArray(value)) {
						me.filter_list.add_filter(doctype, key, value[0], value[1]);
					} else {
						me.filter_list.add_filter(doctype, key, "=", value);
					}
				}
			});
			frappe.route_options = null;
			this.dirty = true;
		} else if(this.list_settings && this.list_settings.filters
				&& this.list_settings.updated_on != this.list_settings_updated_on) {
			// update remembered list settings
			this.filter_list.clear_filters();
			this.list_settings.filters.forEach(function(f) {
				me.filter_list.add_filter(f[0], f[1], f[2], f[3]);
			});
			this.dirty = true;
		}
	},

	run: function(more) {
		// set filter from route
		var me = this;

		if(this.fresh && !more) {
			return;
		}

		if(this.listview.settings.before_run) {
			this.listview.settings.before_run(this);
		}

		if(!this.listview.settings.use_route) {
			var route = frappe.get_route();
			var me = this;
			if(route[2]) {
				$.each(frappe.utils.get_args_dict_from_url(route[2]), function(key, val) {
					me.set_filter(key, val, true);
				});
			}
		}

		this.list_header.find(".list-liked-by-me")
			.toggleClass("text-extra-muted not-liked", !this.is_star_filtered());

		this.last_updated_on = new Date();
		this.dirty = false;

		// set a fresh so that multiple refreshes do not happen
		// at the same time. This is true when deleting.
		// AJAX response will try to refresh and list_update notification
		// via async will also try to update.
		// It is not possible to guess which will reach first
		// (most probably async will) but this is a forced way
		// to prevent instant refreshes on mutilple triggers
		// in a loosly coupled way.
		this.fresh = true;
		setTimeout(function() {
			me.fresh = false;
		}, 1000);

		this._super(more);

		if(this.listview.settings.post_render) {
			this.listview.settings.post_render(this);
		}

		this.list_settings_updated_on = this.list_settings.updated_on;
	},

	make_no_result: function() {
		var new_button = frappe.boot.user.can_create.indexOf(this.doctype)!=-1
			? ('<p><button class="btn btn-default btn-sm" \
				list_view_doc="' + this.doctype + '">'+
				__('Make a new {0}', [__(this.doctype)]) + '</button></p>')
			: '';
		var no_result_message = '<div class="msg-box no-border" style="margin-top: 20px;">\
			<p>' + __("No {0} found", [__(this.doctype)])  + '</p>' + new_button + '</div>';

		return no_result_message;
	},
	render_row: function(row, data) {
		data.doctype = this.doctype;
		this.listview.render(row, data, this);
	},
	render_image_view_row: function(row, data) {
		for (var i = 0; i < data.length; i++) {
			data[i].doctype = this.doctype;
			this.listview.render(row, data[i], this)
		}
	},
	get_args: function() {
		var args = {
			doctype: this.doctype,
			fields: this.listview.fields,
			filters: this.filter_list.get_filters(),
			order_by: this.listview.order_by || undefined,
			group_by: this.listview.group_by || undefined,
			with_comment_count: true
		}

		// apply default filters, if specified for a listing
		$.each((this.listview.default_filters || this.listview.settings.default_filters || []), function(i, f) {
		      args.filters.push(f);
		});

		args.order_by = '`tab' + this.doctype + '`.`' + this.sort_selector.sort_by + '` ' + this.sort_selector.sort_order;

		return args;
	},
	assigned_to_me: function() {
		this.filter_list.add_filter(this.doctype, "_assign", 'like', '%' + user + '%');
		this.run();
	},
	liked_by_me: function() {
		this.filter_list.add_filter(this.doctype, "_liked_by", 'like', '%' + user + '%');
		this.run();
	},
	remove_liked_by_me: function() {
		this.filter_list.get_filter("_liked_by").remove();
	},
	is_star_filtered: function() {
		return this.filter_list.filter_exists(this.doctype, "_liked_by", 'like', '%' + user + '%');
	},
	init_menu: function() {
		var me = this;
		this.$page.on("click", ".list-tag-preview", function() { me.toggle_tags(); });

		this.page.set_secondary_action(__("Refresh"), function() {
			me.dirty = true;
			me.refresh();
		}, "octicon octicon-sync");

		this.page.btn_secondary.addClass("hidden-xs");
		this.page.add_menu_item(__("Refresh"), function() {
			me.dirty = true;
			me.refresh();
		}, "octicon octicon-sync").addClass("visible-xs");

		if(frappe.model.can_import(this.doctype)) {
			this.page.add_menu_item(__("Import"), function() {
				frappe.set_route("data-import-tool", {
					doctype: me.doctype
				});
			}, true);
		}
		if(frappe.model.can_set_user_permissions(this.doctype)) {
			this.page.add_menu_item(__("User Permissions Manager"), function() {
					frappe.route_options = {
						doctype: me.doctype
					};
					frappe.set_route("user-permissions");
				}, true);
		}
		if(in_list(user_roles, "System Manager")) {
			this.page.add_menu_item(__("Role Permissions Manager"), function() {
				frappe.route_options = {
					doctype: me.doctype
				};
				frappe.set_route("permission-manager");
			}, true);
			this.page.add_menu_item(__("Customize"), function() {
				frappe.set_route("Form", "Customize Form", {
					doc_type: me.doctype
				})
			}, true);
		}

		this.make_bulk_assignment();
		this.make_bulk_printing();

		// add to desktop
		this.page.add_menu_item(__("Add to Desktop"), function() {
			frappe.add_to_desktop(me.doctype, me.doctype);
		}, true);

		if (in_list(user_roles, "System Manager") && frappe.boot.developer_mode===1) {
			// edit doctype
			this.page.add_menu_item(__("Edit DocType"), function() {
				frappe.set_route('Form', 'DocType', me.doctype);
			}, true);
		}

	},
	make_bulk_assignment: function() {

		var me = this;

		//bulk assignment
		me.page.add_menu_item(__("Assign To"), function(){

			docname = [];

			$.each(me.get_checked_items(), function(i, doc){
				docname.push(doc.name);
			})

			if(docname.length >= 1){
				me.dialog = frappe.ui.to_do_dialog({
					obj: me,
					method: 'frappe.desk.form.assign_to.add_multiple',
					doctype: me.doctype,
					docname: docname,
					bulk_assign: true,
					re_assign: true,
					callback: function(){
						me.dirty = true;
						me.refresh();
					}
				});
				me.dialog.clear();
				me.dialog.show();
			}
			else{
				frappe.msgprint(__("Select records for assignment"))
			}
		}, true)

	},
	make_bulk_printing: function() {
		var me = this;
		var print_settings = frappe.model.get_doc(":Print Settings", "Print Settings")
		var allow_print_for_draft = cint(print_settings.allow_print_for_draft)
		var is_submittable = frappe.model.is_submittable(me.doctype)
		var allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled)

		//bulk priting
		me.page.add_menu_item(__("Print"), function(){
			var no_print = false
			docname = [];
			$.each(me.get_checked_items(), function(i, doc){
				if(!is_submittable || doc.docstatus == 1  ||
					(allow_print_for_cancelled && doc.docstatus == 2)||
	 				(allow_print_for_draft && doc.docstatus == 0)||
					in_list(user_roles, "Administrator"))

						docname.push(doc.name);
				else
					no_print = true
			})
			if(no_print == true){
				frappe.msgprint("You selected Draft or Cancelled documents")
			}
			if(docname.length >= 1){

				var dialog = new frappe.ui.Dialog({
					title: "Print Documents",
					fields: [
						{"fieldtype": "Check", "label": __("With Letterhead"), "fieldname": "with_letterhead"},
						{"fieldtype": "Select", "label": __("Print Format"), "fieldname": "print_sel"},
					]
				});

				dialog.set_primary_action(__('Print'), function() {
					args = dialog.get_values();
					if(!args) return;
					var default_print_format = locals.DocType[me.doctype].default_print_format;
					with_letterhead = args.with_letterhead ? 1 : 0;
					print_format = args.print_sel ? args.print_sel:default_print_format;

					var json_string = JSON.stringify(docname);
					var w = window.open("/api/method/frappe.utils.print_format.download_multi_pdf?"
						+"doctype="+encodeURIComponent(me.doctype)
						+"&name="+encodeURIComponent(json_string)
						+"&format="+encodeURIComponent(print_format)
						+"&no_letterhead="+(with_letterhead ? "0" : "1"));
					if(!w) {
						msgprint(__("Please enable pop-ups")); return;
					}

				})

				print_formats = frappe.meta.get_print_formats(me.doctype);
				dialog.fields_dict.print_sel.$input.empty().add_options(print_formats);

				dialog.show();
			}
			else{
				frappe.msgprint(__("Select records for assignment"))
			}
		}, true);
	},

	init_like: function() {
		var me = this;
		this.$page.find(".result-list").on("click", ".like-action", frappe.ui.click_toggle_like);
		this.list_header.find(".list-liked-by-me").on("click", function() {
			if (me.is_star_filtered()) {
				me.remove_liked_by_me();
			} else {
				me.liked_by_me();
			}
		});

		if (!frappe.dom.is_touchscreen()) {
			frappe.ui.setup_like_popover(this.$page.find(".result-list"), ".liked-by");
		}
	},

	init_select_all: function() {
		var me = this;

		if(this.can_delete || this.listview.settings.selectable) {
			this.list_header.find(".list-select-all").on("click", function() {
				me.$page.find('.list-delete').prop("checked", $(this).prop("checked"));
				me.toggle_delete();
			});

			this.$page.on("click", ".list-delete", function(event) {
				me.toggle_delete();

				// multi-select using shift key
				var $this = $(this);
				if (event.shiftKey && $this.prop("checked")) {
					var $end_row = $this.parents(".list-row");
					var $start_row = $end_row.prevAll(".list-row")
						.find(".list-delete:checked").last().parents(".list-row");
					if ($start_row) {
						$start_row.nextUntil($end_row).find(".list-delete").prop("checked", true);
					}
				}
			});

			// after delete, hide delete button
			this.$w.on("render-complete", function() {
				me.toggle_delete();
			});
		}
	},

	toggle_delete: function() {
		var me = this;
		if (this.$page.find(".list-delete:checked").length) {
			this.page.set_primary_action(__("Delete"), function() { me.delete_items() },
				"octicon octicon-trashcan");
			this.page.btn_primary.addClass("btn-danger");
		} else {
			this.page.btn_primary.removeClass("btn-danger");
			this.set_primary_action();
		}
	},

	toggle_tags: function() {
		if(this.tags_shown) {
			$(".tag-row").addClass("hide");
			this.tags_shown=false;
		} else {
			$(".tag-row").removeClass("hide");
			this.tags_shown=true;
		}
	},

	get_checked_items: function() {
		var me = this;
		return $.map(this.$page.find('.list-delete:checked'), function(e) {
			if(me.meta.image_view == 0){
				return $(e).parents(".list-row:first").data('data');
			}
			else{
				return $(e).parents(".image-view:first").data('data');
			}
		});
	},

	delete_items: function() {
		var me = this;
		var dl = this.get_checked_items();
		if(!dl.length)
			return;

		frappe.confirm(__('Delete permanently?'),
			function() {
				me.set_working(true);
				return frappe.call({
					method: 'frappe.desk.reportview.delete_items',
					freeze: true,
					args: {
						items: $.map(dl, function(d, i) { return d.name }),
						doctype: me.doctype
					},
					callback: function() {
						me.$page.find('.list-select-all').prop("checked", false);
						frappe.utils.play_sound("delete");
						me.set_working(false);
						me.dirty = true;
						me.refresh();
					}
				})
			}
		);
	},
	init_stats: function() {
		var me = this;
		this.sidebar_stats = new frappe.views.ListSidebar({
			doctype: this.doctype,
			stats: this.listview.stats,
			parent: this.$page.find('.layout-side-section'),
			set_filter: function(fieldname, label) {
				me.set_filter(fieldname, label);
			},
			page: this.page,
			doclistview: this
		})
	},
	set_filter: function(fieldname, label, no_run) {
		var filter = this.filter_list.get_filter(fieldname);
		if(filter) {
			var v = cstr(filter.field.get_parsed_value());
			if(v.indexOf(label)!=-1) {
				// already set
				return false;
			} else {
				// second filter set for this field
				if(fieldname=='_user_tags' || fieldname=="_liked_by") {
					// and for tags
					this.filter_list.add_filter(this.doctype, fieldname, 'like', '%' + label);
				} else {
					// or for rest using "in"
					filter.set_values(this.doctype, fieldname, 'in', v + ', ' + label);
				}
			}
		} else {
			// no filter for this item,
			// setup one
			if(fieldname=='_user_tags' || fieldname=="_liked_by") {
				this.filter_list.add_filter(this.doctype, fieldname, 'like', '%' + label);
			} else {
				this.filter_list.add_filter(this.doctype, fieldname, '=', label);
			}
		}
		if(!no_run)
			this.run();
	},
	call_for_selected_items: function(method, args) {
		var me = this;
		args.names = $.map(this.get_checked_items(), function(d) { return d.name; });

		frappe.call({
			method: method,
			args: args,
			freeze: true,
			callback: function(r) {
				if(!r.exc) {
					me.list_header.find(".list-select-all").prop("checked", false);
					me.refresh();
				}
			}
		});
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_sidebar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.views');

// opts:
// stats = list of fields
// doctype
// parent
// set_filter = function called on click

frappe.views.ListSidebar = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
		this.get_stats();
	},
	make: function() {
		var sidebar_content = frappe.render_template("list_sidebar", {doctype: this.doclistview.doctype});

		this.sidebar = $('<div class="list-sidebar overlay-sidebar hidden-xs hidden-sm"></div>')
			.html(sidebar_content)
			.appendTo(this.page.sidebar.empty());

		this.setup_reports();
		this.setup_assigned_to_me();
		this.setup_list_view_switching();

		if(frappe.views.calendar[this.doctype]) {
			this.sidebar.find(".calendar-link, .gantt-link").removeClass("hide");
		}

		if(frappe.treeview_settings[this.doctype]) {
			this.sidebar.find(".tree-link").removeClass("hide");
		}
	},
	setup_reports: function() {
		// add reports linked to this doctype to the dropdown
		var me = this;
		var added = [];
		var dropdown = this.page.sidebar.find('.reports-dropdown');
		var divider = false;

		var add_reports = function(reports) {
			$.each(reports, function(name, r) {
				if(!r.ref_doctype || r.ref_doctype==me.doctype) {
					var report_type = r.report_type==='Report Builder'
						? 'Report/' + r.ref_doctype : 'query-report';
					var route = r.route || report_type + '/' + r.name;

					if(added.indexOf(route)===-1) {
						// don't repeat
						added.push(route);

						if(!divider) {
							$('<li role="separator" class="divider"></li>').appendTo(dropdown);
							divider = true;
						}

						$('<li><a href="#'+ route + '">'
							+ __(r.name)+'</a></li>').appendTo(dropdown);
					}
				}
			});
		}

		// from reference doctype
		if(this.doclistview.listview.settings.reports) {
			add_reports(this.doclistview.listview.settings.reports)
		}

		// from specially tagged reports
		add_reports(frappe.boot.user.all_reports || []);
	},
	setup_assigned_to_me: function() {
		var me = this;
		this.page.sidebar.find(".assigned-to-me a").on("click", function() {
			me.doclistview.assigned_to_me();
		});
	},
	setup_list_view_switching: function() {
		var me = this;
		if(this.doclistview.meta.image_field) {
			this.page.sidebar.find(".switch-list-view").removeClass("hide");

			var label = this.doclistview.meta.image_view ? __("Show List"): __("Show Images");
			this.page.sidebar.find(".switch-list-view a").html(label)

			var switch_list_view = function(view) {
				var image_view = 0
				if(view == __("Show Images"))
					image_view = 1

				me.doclistview.meta.image_view = image_view;

				// clear and render the headers again while switching
				me.doclistview.page.main.find(".list-headers").empty();
				me.doclistview.init_headers();
				me.doclistview.init_like();
				me.doclistview.init_select_all();

				me.doclistview.refresh(true);
			};

			this.page.sidebar.find(".switch-list-view a").on("click", function() {
				switch_list_view(label)
			});
		}
	},
	get_stats: function() {
		var me = this
		return frappe.call({
			type: "GET",
			method: 'frappe.desk.reportview.get_stats',
			args: {
				stats: me.stats,
				doctype: me.doctype
			},
			callback: function(r) {
				// This gives a predictable stats order
				$.each(me.stats, function(i, v) {
					me.render_stat(v, (r.message || {})[v]);
				});

				// reload button at the end
				// if(me.stats.length) {
				// 	$('<a class="small text-muted">'+__('Refresh Stats')+'</a>')
				// 		.css({"margin-top":"15px", "display":"inline-block"})
				// 		.click(function() {
				// 			me.reload_stats();
				// 			return false;
				// 		}).appendTo($('<div class="stat-wrapper">')
				// 			.appendTo(me.sidebar));
				// }

				me.doclistview.set_sidebar_height();
			}
		});
	},
	render_stat: function(field, stat) {
		var me = this;
		var sum = 0;
		var label = frappe.meta.docfield_map[this.doctype][field] ?
			frappe.meta.docfield_map[this.doctype][field].label : field;
		var show_tags = '<a class="list-tag-preview hidden-xs" title="' + __("Show tags")
			+ '"><i class="octicon octicon-pencil"></i></a>';

		stat = (stat || []).sort(function(a, b) { return b[1] - a[1] });
		$.each(stat, function(i,v) { sum = sum + v[1]; })

		var context = {
			field: field,
			stat: stat,
			sum: sum,
			label: label==='_user_tags' ? (__("Tags") + show_tags) : __(label),
		};

		var sidebar_stat = $(frappe.render_template("list_sidebar_stat", context))
			.on("click", ".stat-link", function() {
				var fieldname = $(this).attr('data-field');
				var label = $(this).attr('data-label');
				me.set_filter(fieldname, label);
			})
			.appendTo(this.sidebar);
	},
	reload_stats: function() {
		this.sidebar.find(".sidebar-stat").remove();
		this.get_stats();
	},
});

frappe.templates["list_sidebar"] = '<ul class="list-unstyled sidebar-menu user-actions hide"> <li class="divider"></li> </ul> <ul class="list-unstyled sidebar-menu standard-actions"> <li class="divider"></li> <li> <div class="btn-group"> <a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> {{ __("Reports") }} <span class="caret"></span> </a> <ul class="dropdown-menu reports-dropdown" style="max-height: 300px; overflow-y: auto;"> <li><a href="#Report/{{ doctype }}">{{ __("Report Builder") }}</a></li> </ul> </div> </li> <li class="divider"></li> <li class="hide tree-link"><a href="#Tree/{%= doctype %}">{%= __("Tree") %}</a></li> <li class="hide calendar-link"><a href="#Calendar/{%= doctype %}">{%= __("Calendar") %}</a></li> <li class="hide gantt-link"><a href="#Gantt/{%= doctype %}">{%= __("Gantt") %}</a></li> <li class="assigned-to-me"> <a>{%= __("Assigned To Me") %}</a> </li> <li class="hide switch-list-view"> <a>{%= __("Show Images") %}</a> </li> {% if(frappe.help.has_help(doctype)) { %} <li><a class="help-link" data-doctype="{{ doctype }}">{{ __("Help") }}</a></li> {% } %} </ul> ';
frappe.templates["list_sidebar_stat"] = '<ul class="list-unstyled sidebar-menu sidebar-stat"> <li class="divider"></li> <li class="h6 stat-label">{%= label %}</li> {% if(!stat.length) { %} <li class="stat-no-records text-muted">{%= __("No records tagged.") %}</li> {% } else { for (var i=0, l=stat.length; i < l; i++) { var stat_label = stat[i][0]; var stat_count = stat[i][1]; %} <li> <a class="stat-link badge-hover" data-label="{%= stat_label %}" data-field="{%= field %}"> <span class="badge">{%= stat_count %}</span> <span>{%= __(stat_label) %}</span> </a> </li> {% } } %} </ul> ';
frappe.templates["list_item_main"] = '<div class="row"> {% var total_cols=0; for (var i=0, l=columns.length; i < l; i++ ) { var col = columns[i], value=data[col.fieldname]; total_cols += parseInt(col.colspan); %} {% if (total_cols <= 12) { %} <div class="col-sm-{%= col.colspan %} list-col text-ellipsis {% if(col.type==="Subject") { if (right_column) { %} col-xs-9 {% } else { %} col-xs-12 {% } %} {% } else if(right_column && col.fieldname===right_column) { %} col-xs-3 {% } else { %} hidden-xs {% } %} {% if(col.df && ["Int", "Float", "Currency", "Percent"].indexOf(col.df.fieldtype)!==-1) { %}text-right{% } %}" {% if(col.type!=="Indicator" && col.title) { %}title="{%= col.title + ": " + value %}"{% } %}> {% if(col.type!=="Indicator") { %}<span class="list-value">{% } %} {% if (col.type==="Subject") { %} {%= subject %} {% } else if (col.type==="Indicator") { %} {%= list.get_indicator(data) %} {% } else if (col.render) { %} {%= col.render(data) %} {% } else if (col.fieldtype==="Image") { %} {% if(data[col.df.options]) { %} <img src="{%= data[col.df.options] %}" style="max-height: 30px; max-width: 100%;"> {% } else { %} <div class="missing-image small"><span class="octicon octicon-circle-slash"></span></div> {% } %} {% } else if(col.fieldtype==="Select") { %} <span class="filterable indicator {%= frappe.utils.guess_colour(value) %}" data-filter="{%= col.fieldname %},=,{%= value %}">{%= __(value) %}</span> {% } else if(col.fieldtype==="Link") { %} <a class="filterable h6 text-muted grey" data-filter="{%= col.fieldname %},=,{%= value %}">{%= value %}</a> {% } else { %} {% if(list.settings.formatters && list.settings.formatters[col.fieldname]) { %} {{ list.settings.formatters[col.fieldname](value, col.df, data) }} {% } else { %} {{ frappe.format(value, col.df, null, data) }} {% } %} {% } %} {% if(col.type!=="Indicator") { %}</span>{% } %} </div> {% } %} {% } %} </div> ';
frappe.templates["list_item_row"] = '<div class="row doclist-row {% if (data._checkbox) { %} has-checkbox {% } %}"> <div class="col-xs-10 {% if (list.meta.title_field && !list.settings.hide_name_column) { %} col-sm-8 {% } else { %} col-sm-10 {% } %} list-row-left">  {%= main %} </div>  {% if (list.meta.title_field && !list.settings.hide_name_column) { var is_different = data.name !== data[list.meta.title_field]; %} <div class="list-col col-sm-2 hidden-xs text-right text-ellipsis list-row-id"> {% if (is_different) { %} <a class="text-muted list-value" href="#Form/{%= data._doctype_encoded %}/{%= data._name_encoded %}"> {%= data.name %}</a> {% } %} </div> {% } %}  <div class="list-col col-sm-2 col-xs-2 text-right list-row-right" style="padding-left:0px"> <div class="visible-xs list-row-indicator">{%= list.get_indicator_dot(data) %}</div>  {%= frappe.render_template("item_assigned_to_comment_count", { data: data }) %} </div> </div> ';
frappe.templates["list_item_main_head"] = '<div class="row"> {% var total_cols=0; for (var i=0, l=columns.length; i < l; i++ ) { var col = columns[i]; total_cols += parseInt(col.colspan); %} {% if (total_cols <= 12) { %} <div class="col-sm-{%= col.colspan %} list-col text-ellipsis h6 text-muted {% if(col.type==="Subject") { if (right_column) { %} col-xs-9 {% } else { %} col-xs-12 {% } %} {% } else if(right_column && col.fieldname===right_column) { %} col-xs-3 {% } else { %} hidden-xs {% } %} {% if(col.df && ["Int", "Float", "Currency", "Percent"].indexOf(col.df.fieldtype)!==-1) { %}text-right{% } %}"> {% if (col.type==="Subject") { %} {%= frappe.render_template("header_select_all_like_filter", { _checkbox: _checkbox }) %} {% } %} <span class="list-value">{%= __(col.title) || __(col.label) || "" %}</span> </div> {% } %} {% } %} </div> ';
frappe.templates["list_item_row_head"] = '<div class="list-row list-row-head"> <div class="row doclist-row"> <div class="col-xs-10 {% if (list.meta.title_field && !list.settings.hide_name_column) { %} col-sm-8 {% } else { %} col-sm-10 {% } %} list-row-left">  {%= main %} </div>  {% if (list.meta.title_field && !list.settings.hide_name_column) { %} <div class="list-col col-sm-2 hidden-xs text-right"> </div> {% } %}  <div class="list-col col-sm-2 hidden-xs text-right list-row-right"></div> </div> </div> ';
frappe.templates["list_item_subject"] = '{% if (_checkbox) { %} <input class="list-delete" type="checkbox" style="margin: 0 7px 0 0; vertical-align: middle;"> {% } %} <span class="liked-by" data-liked-by=\'{{ JSON.stringify(_liked_by) }}\'> <i class="octicon octicon-heart {% if (_liked_by.indexOf(_user)===-1) { %} text-extra-muted not-liked {% }%} icon-fixed-width like-action" data-name="{{ _name }}" data-doctype="{{ doctype }}"> </i> <span class="likes-count">{{ (_liked_by.length > 9 ? "9+" : _liked_by.length) || "" }}</span> </span> <a class="grey list-id {{ css_seen }}" data-name="{{ _name }}" style="margin-right: 7px; margin-left: -8px;" href="#Form/{{ _doctype_encoded }}/{{ _name_encoded }}" title="{{ _full_title }}">{{ strip_html(_title) }}</a> {% if (_workflow && !_without_workflow) { %} <span class="label label-{{ _workflow.style }} filterable" data-filter="{{ _workflow.fieldname }},=,{{ _workflow.value }}"> {%= _workflow.value %}</span> {% } %} ';
frappe.templates["list_permission_footer"] = '<div style="padding-left: 20px;"> <i class="octicon octicon-lock" style="float: left; margin-left: -20px;"></i> {% for(var i=0; i < condition_list.length; i++) { var conditions = condition_list[i]; %} <div style="margin-bottom: 5px;"> {% if (i > 0) { %}<span style="margin-right: 10px;">{{ __("Or") }}</span>{% } %} {% for(key in conditions) { %} <span class="label label-default" style="margin-right: 10px;"> {% if(conditions[key].length) { %} {{ key }} = {{ frappe.utils.comma_or(conditions[key]) }} {% } else { %} {{ __("{0} is not set", [key]) }} {% } %} </span> {% } %} </div> {% } %} </div>  ';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/list/listview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.views.get_listview = function(doctype, parent) {
	if(frappe.listviews[doctype]) {
		var listview = new frappe.listviews[doctype](parent);
	} else {
		var listview = new frappe.views.ListView(parent, doctype);
	}
	return listview;
}

// Renders customized list
// usually based on `in_list_view` property

frappe.views.ListView = Class.extend({
	init: function(doclistview, doctype) {
		this.doclistview = doclistview;
		this.doctype = doctype;
		this.meta = frappe.get_doc("DocType", this.doctype);
		this.settings = frappe.listview_settings[this.doctype] || {};
		if(this.meta.__listview_template) {
			this.template_name = doctype + "_listview";
			frappe.templates[this.template_name] = this.meta.__listview_template;
		}
		this.set_fields();
		this.set_columns();
		this.id_list = [];
		if(this.settings.group_by)
			this.group_by = this.settings.group_by;

		var me = this;
		this.doclistview.onreset = function() {
			me.id_list = [];
		}
		this.order_by = this.settings.order_by;
		this.group_by = this.settings.group_by;
	},
	set_fields: function() {
		var me = this;
		var t = "`tab"+this.doctype+"`.";
		this.fields = [];
		this.stats = ['_user_tags'];

		var add_field = function(fieldname) {
			field = t + "`" + fieldname + "`"
			if(me.fields.indexOf(field)=== -1)
				me.fields.push(field);
		}

		$.each(['name', 'owner', 'docstatus', '_user_tags', '_comments', 'modified',
			'modified_by', '_assign', '_liked_by', '_seen'],
		function(i, fieldname) { add_field(fieldname); })

		// add title field
		if(this.meta.title_field) {
			this.title_field = this.meta.title_field;
			add_field(this.meta.title_field);
		}

		// add workflow field (as priority)
		this.workflow_state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);
		if(this.workflow_state_fieldname) {
			add_field(this.workflow_state_fieldname);
			this.stats.push(this.workflow_state_fieldname);
		}

		$.each(this.meta.fields, function(i,d) {
			if(d.in_list_view && frappe.perm.has_perm(me.doctype, d.permlevel, "read")) {
				if(d.fieldtype=="Image" && d.options) {
					add_field(d.options);
				} else {
					add_field(d.fieldname);
				}

				if(d.fieldtype=="Select") {
					if(me.stats.indexOf(d.fieldname)===-1) me.stats.push(d.fieldname);
				}

				// currency field for symbol (multi-currency)
				if(d.fieldtype=="Currency" && d.options) {
					if(d.options.indexOf(":")!=-1) {
						add_field(d.options.split(":")[1]);
					} else {
						add_field(d.options);
					};
				}
			}
		});

		// additional fields
		if(this.settings.add_fields) {
			$.each(this.settings.add_fields, function(i, d) {
				if(d.indexOf("`tab")===-1) {
					d = "`tab" + me.doctype + "`." + d;
				}
				if(me.fields.indexOf(d)==-1)
					me.fields.push(d);
			});
		}
	},
	set_columns: function() {
		var me = this;
		this.columns = [];
		var name_column = {
			colspan: this.settings.colwidths && this.settings.colwidths.subject || 6,
			type: "Subject",
			title: "Name"
		};
		if (this.meta.title_field) {
			name_column.title = frappe.meta.get_docfield(this.doctype, this.meta.title_field).label;
		}
		this.columns.push(name_column);
		this.total_colspans = this.columns[0].colspan;

		if(frappe.model.is_submittable(this.doctype)
			|| this.settings.get_indicator || this.workflow_state_fieldname) {
			// indicator
			this.columns.push({
				colspan: this.settings.colwidths && this.settings.colwidths.indicator || 3,
				type: "Indicator",
				title: "Status"
			});
			this.total_colspans += this.columns[1].colspan;
		}

		// overridden
		var overridden = $.map(this.settings.add_columns || [], function(d) {
			return d.content;
		});
		var docfields_in_list_view = frappe.get_children("DocType", this.doctype, "fields",
			{"in_list_view":1}).sort(function(a, b) { return a.idx - b.idx })

		$.each(docfields_in_list_view, function(i,d) {
			if(in_list(overridden, d.fieldname) || d.fieldname === me.title_field) {
				return;
			}
			if(me.total_colspans < 12) {
				me.add_column(d);
			}
		});

		// additional columns
		if(this.settings.add_columns) {
			$.each(this.settings.add_columns, function(i, d) {
				if(me.total_colspans < 12) {
					if(typeof d==="string") {
						me.add_column(frappe.meta.get_docfield(me.doctype, d));
					} else {
						me.columns.push(d);
						me.total_colspans += parseInt(d.colspan);
					}
				}
			});
		}

		var empty_cols = flt(12 - this.total_colspans);
		while(empty_cols > 0) {
			for(var i=0, l=this.columns.length; i < l && empty_cols > 0; i++) {
				this.columns[i].colspan = cint(this.columns[i].colspan) + 1;
				empty_cols = empty_cols - 1;
			}
		}
	},
	add_column: function(df) {
		// field width
		var colspan = 3;
		if(in_list(["Int", "Percent"], df.fieldtype)) {
			colspan = 2;
		} else if(in_list(["Check", "Image"], df.fieldtype)) {
			colspan = 1;
		} else if(in_list(["name", "subject", "title"], df.fieldname)) { // subjects are longer
			colspan = 4;
		} else if(df.fieldtype=="Text Editor" || df.fieldtype=="Text") {
			colspan = 4;
		}
		this.total_colspans += parseInt(colspan);
		var col = {
			colspan: colspan,
			content: df.fieldname,
			type: df.fieldtype,
			df:df,
			fieldtype: df.fieldtype,
			fieldname: df.fieldname,
			title:__(df.label)
		};
		if(this.settings.column_render && this.settings.column_render[df.fieldname]) {
			col.render = this.settings.column_render[df.fieldname];
		}
		this.columns.push(col);

	},
	render: function(row, data) {
		this.prepare_data(data);

		// maintain id_list to avoid duplication incase
		// of filtering by child table
		if(in_list(this.id_list, data.name)) {
			$(row).toggle(false);
			return;
		} else {
			this.id_list.push(data.name);
		}

		if(this.meta && this.meta.image_view == 0){
			this.render_list_row(row, data);
		}
		else{
			this.render_list_image(row, data);
		}

		if(this.settings.post_render_item) {
			this.settings.post_render_item(this, row, data);
		}

		this.render_tags(row, data);

	},
	render_list_row: function(row, data) {
		var main = frappe.render_template("list_item_main", {
			data: data,
			columns: this.columns,
			subject: this.get_avatar_and_id(data, true),
			list: this,
			right_column: this.settings.right_column
		});

		$(frappe.render_template("list_item_row", {
			data: data,
			main: main,
			list: this,
			right_column: this.settings.right_column
		})).appendTo(row);
	},
	render_list_image: function(row, data) {
		this.allowed_type = [
			"Check", "Currency", "Data", "Date",
			"Datetime", "Float", "Int", "Link",
			"Percent", "Select", "Read Only", "Time"
		];
		img_col = $(frappe.render_template("image_view_item_row", {
			data: data,
			list: this,
			columns: this.columns,
			allowed_type: this.allowed_type,
			item_image: data.image ? "url('" + data.image + "')" : null,
			color: frappe.get_palette(data.item_name),
			subject: this.get_avatar_and_id(data, true),
			right_column: this.settings.right_column
		}))
		.data("data", data)
		.appendTo($(row).find(".image-view-marker"));
	},
	render_tags: function(row, data) {
		var me = this;
		var row2 = $('<div class="tag-row">\
			<div class="list-tag xs-hidden"></div>\
			<div class="clearfix"></div>\
		</div>').appendTo(row);

		if(!me.doclistview.tags_shown) {
			row2.addClass("hide");
		}

		// add tags
		var tag_editor = new frappe.ui.TagEditor({
			parent: row2.find(".list-tag"),
			frm: {
				doctype: this.doctype,
				docname: data.name
			},
			user_tags: data._user_tags,
			on_change: function(user_tags) {
				data._user_tags = user_tags;
				//me.render_timestamp_and_comments(row, data);
			}
		});
		tag_editor.$w.on("click", ".tagit-label", function() {
			me.doclistview.set_filter("_user_tags",
				$(this).text());
		});
	},

	get_avatar_and_id: function(data, without_workflow) {
		data._without_workflow = without_workflow;
		data.css_seen = '';

		if(data._seen) {
			var seen = JSON.parse(data._seen);
			if(seen && seen.indexOf(frappe.session.user) !== -1) {
				data.css_seen = 'seen'
			}
		}

		return frappe.render_template("list_item_subject", data);
	},

	get_indicator: function(doc) {
        var indicator = frappe.get_indicator(doc, this.doctype);
		if(indicator) {
	        return '<span class="indicator '+indicator[1]+' filterable" data-filter="'
				+indicator[2]+'">'+__(indicator[0])+'<span>';
		} else {
			return "";
		}
	},

	get_indicator_dot: function(doc) {
		var indicator = frappe.get_indicator(doc, this.doctype);
		if (!indicator) {
			return "";
		}
		return '<span class="indicator '+indicator[1]+'" title="'+__(indicator[0])+'"></span>';
	},

	prepare_data: function(data) {
		if(data.modified)
			this.prepare_when(data, data.modified);

		data._liked_by = data._liked_by ?
			JSON.parse(data._liked_by) : [];

		data._checkbox = (frappe.model.can_delete(this.doctype) || this.settings.selectable) && !this.no_delete

		data._doctype_encoded = encodeURIComponent(data.doctype);
		data._name = data.name.replace(/"/g, '\"');
		data._name_encoded = encodeURIComponent(data.name);
		data._submittable = frappe.model.is_submittable(this.doctype);

		data._title = strip_html(data[this.title_field || "name"] || data["name"]);
		data._full_title = data._title;

		if(data._title.length > 40) {
			data._title = data._title.slice(0, 40) + "...";
		}

		data._workflow = null;
		if(this.workflow_state_fieldname) {
			data._workflow = {
				fieldname: this.workflow_state_fieldname,
				value: data[this.workflow_state_fieldname],
				style: frappe.utils.guess_style(data[this.workflow_state_fieldname])
			}
		}
		data._user = user;

		data._tags = $.map((data._user_tags || "").split(","),
			function(v) { return v ? v : null; });
		data._assign_list = data._assign ? JSON.parse(data._assign) : [];

		// nulls as strings
		for(key in data) {
			if(data[key]==null) {
				data[key]='';
			}
		}

		// prepare data in settings
		if(this.settings.prepare_data)
			this.settings.prepare_data(data);
	},

	prepare_when: function(data, date_str) {
		if (!date_str) date_str = data.modified;
		// when
		data.when = (dateutil.str_to_user(date_str)).split(' ')[0];
		var diff = dateutil.get_diff(dateutil.get_today(), date_str.split(' ')[0]);
		if(diff==0) {
			data.when = comment_when(date_str);
		}
		if(diff == 1) {
			data.when = __('Yesterday')
		}
		if(diff == 2) {
			data.when = __('2 days ago')
		}
	},

	render_bar_graph: function(parent, data, field, label) {
		var args = {
			percent: data[field],
			label: __(label)
		}
		$(parent).append(repl('<span class="progress" style="width: 100%; float: left; margin: 5px 0px;"> \
			<span class="progress-bar" title="%(percent)s% %(label)s" \
				style="width: %(percent)s%;"></span>\
		</span>', args));
	},
	render_icon: function(parent, icon_class, label) {
		var icon_html = "<i class='%(icon_class)s' title='%(label)s'></i>";
		$(parent).append(repl(icon_html, {icon_class: icon_class, label: __(label) || ''}));
	}
});


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/views/calendar_base.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.views.CalendarBase = Class.extend({
	add_filters: function() {
		var me = this;
		if(this.filters) {
			$.each(this.filters, function(i, df) {
				df.change = function() {
					me.refresh();
				};
				me.page.add_field(df);
			});
		}
	},
	set_filter: function(doctype, value) {
		var me = this;
		if(this.filters) {
			$.each(this.filters, function(i, df) {
				if(df.options===value)
					me.page.fields_dict[df.fieldname].set_input(value);
					return false;
			});
		}
	},
	get_filters: function() {
		var filter_vals = {},
			me = this;
		if(this.filters) {
			$.each(this.filters, function(i, df) {
				filter_vals[df.fieldname || df.label] =
					me.page.fields_dict[df.fieldname || df.label].get_parsed_value();
			});
		}
		return filter_vals;
	},
	set_filters_from_route_options: function() {
		var me = this;
		if(frappe.route_options) {
			$.each(frappe.route_options, function(k, value) {
				if(me.page.fields_dict[k]) {
					me.page.fields_dict[k].set_input(value);
				};
			})
			frappe.route_options = null;
			me.refresh();
			return false;
		}
	}
})


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/views/calendar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.views.calendar");
frappe.provide("frappe.views.calendars");

frappe.views.CalendarFactory = frappe.views.Factory.extend({
	make: function(route) {
		var me = this;

		frappe.require([
			'assets/frappe/js/lib/fullcalendar/fullcalendar.min.css',
			'assets/frappe/js/lib/fullcalendar/fullcalendar.min.js'
		], function() {
			frappe.model.with_doctype(route[1], function() {
				var options = {
					doctype: route[1]
				};
				$.extend(options, frappe.views.calendar[route[1]] || {});

				frappe.views.calendars[route[1]] = new frappe.views.Calendar(options);
			});
		});
	}
});


frappe.views.Calendar = frappe.views.CalendarBase.extend({
	init: function(options) {
		$.extend(this, options);
		this.make_page();
		this.setup_options();
		this.make();
	},
	make_page: function() {
		var me = this;
		this.parent = frappe.make_page();

		$(this.parent).on("show", function() {
			me.set_filters_from_route_options();
		});

		this.page = this.parent.page;
		var module = locals.DocType[this.doctype].module;
		this.page.set_title(__("Calendar") + " - " + __(this.doctype));

		frappe.breadcrumbs.add(module, this.doctype)

		this.add_filters();

		this.page.add_field({fieldtype:"Date", label:"Date",
			fieldname:"selected",
			"default": frappe.datetime.month_start(),
			input_css: {"z-index": 1},
			change: function() {
				var selected = $(this).val();
				if (selected) {
					me.$cal.fullCalendar("gotoDate", frappe.datetime.user_to_obj(selected));
				}
			}
		});

		this.page.set_primary_action(__("New"), function() {
			var doc = frappe.model.get_new_doc(me.doctype);
			frappe.set_route("Form", me.doctype, doc.name);
		});

		// add links to other calendars
		$.each(frappe.boot.calendars, function(i, doctype) {
			if(frappe.model.can_read(doctype)) {
				me.page.add_menu_item(__(doctype), function() {
					frappe.set_route("Calendar", doctype);
				});
			}
		});

		this.page.page_actions.find(".menu-btn-group-label").text(__("Type"));

		$(this.parent).on("show", function() {
			me.$cal.fullCalendar("refetchEvents");
		})
	},

	make: function() {
		var me = this;
		this.$wrapper = this.page.main;
		this.$cal = $("<div>").appendTo(this.$wrapper);
		footnote = frappe.utils.set_footnote(this, this.$wrapper, __("Select or drag across time slots to create a new event."));
		footnote.css({"border-top": "0px"});
		//
		// $('<div class="help"></div>')
		// 	.html(__("Select dates to create a new ") + __(me.doctype))
		// 	.appendTo(this.$wrapper);

		this.$cal.fullCalendar(this.cal_options);
		this.set_css();
	},
	set_css: function() {
		// flatify buttons
		this.$wrapper.find("button.fc-state-default")
			.removeClass("fc-state-default")
			.addClass("btn btn-default");

		this.$wrapper.find(".fc-button-group").addClass("btn-group");

		var btn_group = this.$wrapper.find(".fc-right .fc-button-group");
		btn_group.find(".fc-state-active").addClass("active");

		btn_group.find(".btn").on("click", function() {
			btn_group.find(".btn").removeClass("active");
			$(this).addClass("active");
		});
	},
	field_map: {
		"id": "name",
		"start": "start",
		"end": "end",
		"allDay": "all_day",
	},
	styles: {
		"standard": {
			"color": "#F0F4F7"
		},
		"important": {
			"color": "#FFDCDC"
		},
		"danger": {
			"color": "#FFDCDC"
		},
		"warning": {
			"color": "#FFE6BF",
		},
		"success": {
			"color": "#E4FFC1",
		},
		"info": {
			"color": "#E8DDFF"
		},
		"inverse": {
			"color": "#D9F6FF"
		},
		"": {
			"color": "#F0F4F7"
		}
	},
	get_system_datetime: function(date) {
		date._offset = moment.user_utc_offset;
		return frappe.datetime.convert_to_system_tz(date);
	},
	setup_options: function() {
		var me = this;
		this.cal_options = {
			header: {
				left: 'prev,next today',
				center: 'title',
				right: 'month,agendaWeek,agendaDay'
			},
			editable: true,
			selectable: true,
			selectHelper: true,
			forceEventDuration: true,
			events: function(start, end, timezone, callback) {
				return frappe.call({
					method: me.get_events_method || "frappe.desk.calendar.get_events",
					type: "GET",
					args: me.get_args(start, end),
					callback: function(r) {
						var events = r.message;
						me.prepare_events(events);
						callback(events);
					}
				})
			},
			eventClick: function(event, jsEvent, view) {
				// edit event description or delete
				var doctype = event.doctype || me.doctype;
				if(frappe.model.can_read(doctype)) {
					frappe.set_route("Form", doctype, event.name);
				}
			},
			eventDrop: function(event, delta, revertFunc, jsEvent, ui, view) {
				me.update_event(event, revertFunc);
			},
			eventResize: function(event, delta, revertFunc, jsEvent, ui, view) {
				me.update_event(event, revertFunc);
			},
			select: function(startDate, endDate, jsEvent, view) {
				if (view.name==="month" && (endDate - startDate)===86400000) {
					// detect single day click in month view
					return;

				}

				var event = frappe.model.get_new_doc(me.doctype);

				event[me.field_map.start] = me.get_system_datetime(startDate);

				if(me.field_map.end)
					event[me.field_map.end] = me.get_system_datetime(endDate);

				if(me.field_map.allDay) {
					var all_day = (startDate._ambigTime && endDate._ambigTime) ? 1 : 0;

					event[me.field_map.allDay] = all_day;

					if (all_day)
						event[me.field_map.end] = me.get_system_datetime(moment(endDate).subtract(1, "s"));
				}

				frappe.set_route("Form", me.doctype, event.name);
			},
			dayClick: function(date, allDay, jsEvent, view) {
				jsEvent.day_clicked = true;
				return false;
			}
		};

		if(this.options) {
			$.extend(this.cal_options, this.options);
		}
	},
	get_args: function(start, end) {
		var args = {
			doctype: this.doctype,
			start: this.get_system_datetime(start),
			end: this.get_system_datetime(end),
			filters: this.get_filters()
		};
		return args;
	},
	refresh: function() {
		this.$cal.fullCalendar('refetchEvents');
	},
	prepare_events: function(events) {
		var me = this;
		$.each(events || [], function(i, d) {
			d.id = d.name;
			d.editable = frappe.model.can_write(d.doctype || me.doctype);

			// do not allow submitted/cancelled events to be moved / extended
			if(d.docstatus && d.docstatus > 0) {
				d.editable = false;
			}

			$.each(me.field_map, function(target, source) {
				d[target] = d[source];
			});

			if(!me.field_map.allDay)
				d.allDay = 1;

			// convert to user tz
			d.start = frappe.datetime.convert_to_user_tz(d.start);
			d.end = frappe.datetime.convert_to_user_tz(d.end);

			me.fix_end_date_for_event_render(d);

			if(me.get_css_class) {
				$.extend(d, me.styles[me.get_css_class(d)] || {});
			} else if(me.style_map) {
				$.extend(d, me.styles[me.style_map[d.status]] || {});
			} else {
				$.extend(d, me.styles[frappe.utils.guess_style(d.status, "standard")]);
			}
			d["textColor"] = "#36414C";
		})
	},
	update_event: function(event, revertFunc) {
		var me = this;
		frappe.model.remove_from_locals(me.doctype, event.name);
		return frappe.call({
			method: me.update_event_method || "frappe.desk.calendar.update_event",
			args: me.get_update_args(event),
			callback: function(r) {
				if(r.exc) {
					show_alert(__("Unable to update event"));
					revertFunc();
				}
			},
			error: function() {
				revertFunc();
			}
		});
	},
	get_update_args: function(event) {
		var me = this;
		var args = {
			name: event[this.field_map.id]
		};

		args[this.field_map.start] = me.get_system_datetime(event.start);

		if(this.field_map.allDay)
			args[this.field_map.allDay] = (event.start._ambigTime && event.end._ambigTime) ? 1 : 0;

		if(this.field_map.end) {
			if (!event.end) {
				event.end = event.start.add(1, "hour");
			}

			if (args[this.field_map.allDay]) {
				args[this.field_map.end] = me.get_system_datetime(moment(event.end).subtract(1, "s"));
			}
		}

		args.doctype = event.doctype || this.doctype;

		return { args: args, field_map: this.field_map };
	},

	fix_end_date_for_event_render: function(event) {
		if (event.allDay) {
			// We use inclusive end dates. This workaround fixes the rendering of events
			event.start = event.start ? $.fullCalendar.moment(event.start).stripTime() : null;
			event.end = event.end ? $.fullCalendar.moment(event.end).add(1, "day").stripTime() : null;
		}
	}
})


/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/views/ganttview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.views.calendar");

frappe.views.GanttFactory = frappe.views.Factory.extend({
	make: function(route) {
		var me = this;
		me.doctype = route[1];

		frappe.require(['assets/frappe/js/lib/jQuery.Gantt/css/style.css',
			'assets/frappe/js/lib/jQuery.Gantt/js/jquery.fn.gantt.js'], function() {

			frappe.model.with_doctype(me.doctype, function() {
				var page = me.make_page();
				$(page).on("show", function() {
					page.ganttview.set_filters_from_route_options();
				});

				var options = {
					doctype: me.doctype,
					parent: page
				};
				$.extend(options, frappe.views.calendar[me.doctype] || {});

				page.ganttview = new frappe.views.Gantt(options);
			});
		});
	}
});

frappe.views.Gantt = frappe.views.CalendarBase.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make_page();
		frappe.route_options ?
			this.set_filters_from_route_options() :
			this.refresh();
	},
	make_page: function() {
		var module = locals.DocType[this.doctype].module,
			me = this;

		this.page = this.parent.page;
		this.page.set_title(__("Gantt Chart") + " - " + __(this.doctype));
		frappe.breadcrumbs.add(module, this.doctype);

		this.page.set_secondary_action(__("Refresh"),
			function() { me.refresh(); }, "icon-refresh")

		this.page.add_field({fieldtype:"Date", label:"From",
			fieldname:"start", "default": frappe.datetime.month_start(),
			change: function() { me.refresh(); },
			input_css: {"z-index": 3}});

		this.page.add_field({fieldtype:"Date", label:"To",
			fieldname:"end", "default": frappe.datetime.month_end(),
			change: function() { me.refresh(); },
			input_css: {"z-index": 3}});

		this.add_filters();
		this.wrapper = $("<div style='position:relative;z-index:1;'></div>").appendTo(this.page.main);

	},
	refresh: function() {
		var me = this;
		return frappe.call({
			method: this.get_events_method,
			type: "GET",
			args: {
				doctype: this.doctype,
				start: this.page.fields_dict.start.get_parsed_value(),
				end: this.page.fields_dict.end.get_parsed_value(),
				filters: this.get_filters()
			},
			callback: function(r) {
				$(me.wrapper).empty();
				if(!r.message || !r.message.length) {
					$(me.wrapper).html('<p class="text-muted" style="padding: 15px;">' + __('Nothing to show for this selection') + '</p>');
				} else {
					var gantt_area = $('<div class="gantt">').appendTo(me.wrapper);
					gantt_area.gantt({
						source: me.get_source(r),
						navigate: "scroll",
						scale: me.gantt_scale || "days",
						minScale: "hours",
						maxScale: "months",
						itemsPerPage: 20,
						onItemClick: function(data) {
							frappe.set_route('Form', me.doctype, data.name);
						},
						onAddClick: function(dt, rowId) {
							frappe.new_doc(me.doctype, true);
						}
					});
				}
			}
		})

	},
	get_source: function(r) {
		var source = [],
			me = this;
		// projects
		$.each(r.message, function(i,v) {

			v["title"] = v[me.field_map["title"]];

			// description
			v.desc = v.title
				+ (v.name ? ("<br>" + v.name) : "");

			$.each(v, function(key, value) {
				if(!in_list(["name", "title", me.field_map["title"], "desc"], key) && value) {
					var label = frappe.meta.get_label(me.doctype, key);
					if(label) {
						v.desc += "<br>" + label + ": " + value;
					}
				}
			});

			// standardize values
			$.each(me.field_map, function(target, source) {
				v[target] = v[source];
			});

			if(v.start && !v.end) {
				v.end = new Date(v.start)
				v.end.setHours(v.end.getHours() + 1);
			}

			// class
			if(me.style_map) {
				v.cssClass = me.style_map[v.status]
			} else if(me.get_css_class) {
				v.cssClass = me.get_css_class(v);
			} else {
				v.cssClass = frappe.utils.guess_style(v.status, "standard")
			}

			if(v.start && v.end) {
				source.push({
					name: v.title,
					desc: v.status,
					values: [{
						name: v.title,
						desc: v.desc,
						from: '/Date('+moment(v.start).format("X")+'000)/',
						to: '/Date('+moment(v.end).format("X")+'000)/',
						customClass: {
							'danger':'ganttRed',
							'warning':'ganttOrange',
							'info':'ganttBlue',
							'success':'ganttGreen',
							'':'ganttGray'
						}[v.cssClass],
						dataObj: v
					}]
				})
			}
		});
		return source
	}
});

frappe.templates["blueimp-gallery"] = '<div id="blueimp-gallery" class="blueimp-gallery blueimp-gallery-controls"> <div class="slides"></div> <h3 class="title"></h3> <a class="prev">‹</a> <a class="next">›</a> <a class="close">×</a> <a class="play-pause"></a> <ol class="indicator"></ol> </div>';
frappe.templates["image_view_item_row"] = '<div class="col-xs-6 col-sm-4 col-md-3 doclist-row has-checkbox image-view text-ellipsis"> <div class="row"> <div class="col-xs-12 image-view-col"> {%= subject %} </div> </div>  <div class="row"> <div class="col-xs-12 image-view-col" align="center"> <a data-name="{{ data.name }}" title="{{ data.name }}" href="#Form/{{ data.doctype }}/{{ data.name }}"> <div class="pos-item-image image-field" data-name="{{ data.name }}" style="{% if (item_image) { %} background-image: {%= item_image %}; {% } else { %} background-color: {{ color }}; {% } %} border: 0px;"> {% if (!item_image) { %}{%= frappe.get_abbr(data.name) %}{% } %} <button class="btn btn-info zoom-view"> <i class="icon-zoom-in"></i> </button> <table class="table table-condensed field-info"> {% for (var i=0, l=columns.length; i < l; i++ ) { var col = columns[i], value=data[col.fieldname]; %} {% if(in_list(allowed_type, col.fieldtype)) { %} <tr> <td align="right" width="40%">{%= col.title %}</td> <td align="left" width="60%">{%= value %}</td> </tr> {% } %} {% } %} </table> </div> </a> </div> </div> <div class="row">  <div class="col-xs-12 image-view-col"> <div class="row"> <div class="col-xs-4">{%= list.get_indicator(data) %}</div> <div class="col-xs-8 text-right">  {%= frappe.render_template("item_assigned_to_comment_count", { data: data }) %} </div> </div> </div> </div> </div> ';
frappe.templates["image_view_item_main_head"] = '<div class="row"> <div class="col-xs-12"> {%= frappe.render_template("header_select_all_like_filter", { _checkbox: _checkbox }) %} </div> </div>';
frappe.templates["header_select_all_like_filter"] = '{% if (_checkbox) { %} <input class="list-select-all" type="checkbox" style="margin-right: 7px; margin-top: 2px;" title="{%= __("Select All") %}"> {% } %} <i class="icon-fixed-width octicon octicon-heart text-extra-muted not-liked like-action list-liked-by-me" title="{%= __("Likes") %}"></i>';
frappe.templates["item_assigned_to_comment_count"] = '<div class="hidden-xs"> <span class="list-row-modified text-muted"> {%= comment_when(data.modified, true) %} </span> {% if (data._assign_list.length) { %} <span class="filterable" data-filter="_assign,like,%{%= data._assign_list[data._assign_list.length - 1] %}%"> {%= frappe.avatar(data._assign_list[data._assign_list.length - 1]) %}</span> {% } else { %} <span class="avatar avatar-small avatar-empty"></span> {% } %} <span class="list-comment-count small {% if(!data._comment_count) { %} text-extra-muted {% } else { %} text-muted {% } %}"> <i class="octicon octicon-comment-discussion"></i> {%= (data._comment_count > 99 ? "99+" : data._comment_count) || 0 %} </span> </div> ';

/*
 *	/home/bilal/frappe-bench/apps/frappe/frappe/public/js/frappe/views/treeview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.treeview_settings")

frappe.views.TreeFactory = frappe.views.Factory.extend({
	make: function(route) {
		frappe.model.with_doctype(route[1], function() {
			var options = {
				doctype: route[1]
			};

			if (!frappe.treeview_settings[route[1]] && !frappe.meta.get_docfield(route[1], "is_group")) {
				msgprint(__("Tree view not available for {0}", [route[1]] ));
				return false;
			}
			$.extend(options, frappe.treeview_settings[route[1]] || {});
			new frappe.views.TreeView(options);
		});
	}
});

frappe.views.TreeView = Class.extend({
	init: function(opts) {
		var me = this;

		this.opts = {};
		this.opts.get_tree_root = true;
		$.extend(this.opts, opts);
		this.doctype = opts.doctype;
		this.args = {doctype: me.doctype};
		this.page_name = frappe.get_route_str();
		this.get_tree_nodes =  me.opts.get_tree_nodes || "frappe.desk.treeview.get_children";

		this.get_permissions();
		this.make_page();
		this.make_filters();

		if (me.opts.get_tree_root) {
			this.get_root();
		}

		this.set_menu_item();
		this.set_primary_action();
	},
	get_permissions: function(){
		this.can_read = frappe.model.can_read(this.doctype);
		this.can_create = frappe.boot.user.can_create.indexOf(this.doctype) !== -1 ||
					frappe.boot.user.in_create.indexOf(this.doctype) !== -1;
		this.can_write = frappe.model.can_write(this.doctype);
		this.can_delete = frappe.model.can_delete(this.doctype);
	},
	make_page: function() {
		var me = this;
		this.parent = frappe.container.add_page(this.page_name);
		frappe.ui.make_app_page({parent:this.parent, single_column:true});

		this.page = this.parent.page;
		frappe.container.change_to(this.page_name);
		frappe.breadcrumbs.add(me.opts.breadcrumb || locals.DocType[me.doctype].module);

		this.page.set_title(me.opts.title || __('{0} Tree',[__(this.doctype)]) );
		this.page.main.css({
			"min-height": "300px",
			"padding-bottom": "25px"
		})
	},
	make_filters: function(){
		var me = this;
		$.each(this.opts.filters || [], function(i, filter){
			if(frappe.route_options && frappe.route_options[filter.fieldname]) {
				filter.default = frappe.route_options[filter.fieldname]
			}
			
			me.page.add_field(filter).$input
				.change(function() {
					me.args[$(this).attr("data-fieldname")] = $(this).val();
					me.make_tree();
				})

			if (filter.default) {
				$("[data-fieldname='"+filter.fieldname+"']").trigger("change");
			}
		})
	},
	get_root: function() {
		var me = this;
		frappe.call({
			method: me.get_tree_nodes,
			args: me.args,
			callback: function(r) {
				if (r.message) {
					me.root = r.message[0]["value"];
					me.make_tree();
				}
			}
		})
	},
	make_tree: function() {
		var me = this;
		$(me.parent).find(".tree").remove()
		this.tree = new frappe.ui.Tree({
			parent: $(me.parent).find(".layout-main-section"),
			label: me.args[me.opts.root_label] || me.opts.root_label || me.root,
			args: me.args,
			method: me.get_tree_nodes,
			toolbar: me.get_toolbar(),
			get_label: me.opts.get_label,
			onrender: me.opts.onrender
		});
	},
	get_toolbar: function(){
		var me = this;
		if(this.opts.toolbar) {
			return this.opts.toolbar;
		} else {
			return [
				{toggle_btn: true},
				{
					label:__("Edit"),
					condition: function(node) {
						return !node.root && me.can_read;
					},
					click: function(node) {
						frappe.set_route("Form", me.doctype, node.label);
					}
				},
				{
					label:__("Add Child"),
					condition: function(node) { return me.can_create && node.expandable; },
					click: function(node) {
						me.new_node();
					},
					btnClass: "hidden-xs"
				},
				{
					label:__("Rename"),
					condition: function(node) { return !node.root && me.can_write; },
					click: function(node) {
						frappe.model.rename_doc(me.doctype, node.label, function(new_name) {
							node.$a.html(new_name);
						});
					},
					btnClass: "hidden-xs"
				},
				{
					label:__("Delete"),
					condition: function(node) { return !node.root && me.can_delete; },
					click: function(node) {
						frappe.model.delete_doc(me.doctype, node.label, function() {
							node.parent.remove();
						});
					},
					btnClass: "hidden-xs"
				}

			]
		}
	},
	new_node: function() {
		var me = this;
		var node = me.tree.get_selected_node();

		if(!(node && node.expandable)) {
			frappe.msgprint(__("Select a group node first."));
			return;
		}

		this.prepare_fields()

		// the dialog
		var d = new frappe.ui.Dialog({
			title: __('New {0}',[__(me.doctype)]),
			fields: me.fields
		})

		d.set_value("is_group", 0);
		// create
		d.set_primary_action(__("Create New"), function() {
			var btn = this;
			var v = d.get_values();
			if(!v) return;

			var node = me.tree.get_selected_node();
			v.parent = node.label;
			v.doctype = me.doctype;

			if(node.root) {
				v.is_root = 1;
				v.parent_account = null;
			} else {
				v.is_root = 0;
				v.root_type = null;
			}

			$.extend(me.args, v)

			return frappe.call({
				method: me.opts.add_tree_node || "frappe.desk.treeview.add_node",
				args: me.args,
				callback: function(r) {
					if(!r.exc) {
						d.hide();
						if(node.expanded) {
							node.toggle_node();
						}
						node.reload();
					}
				}
			});
		});
		d.show();
	},
	prepare_fields: function(){
		var me = this;

		this.fields = [
			{fieldtype:'Data', fieldname: 'name_field',
				label:__('New {0} Name',[__(me.doctype)]), reqd:true},
			{fieldtype:'Check', fieldname:'is_group', label:__('Group Node'),
				description: __("Further nodes can be only created under 'Group' type nodes")}
		]

		if (me.opts.fields) {
			me.fields = me.opts.fields;
		}
	},
	set_primary_action: function(){
		var me = this;
		if (!this.opts.disable_add_node) {
			me.page.set_primary_action(__("New"), function() {
				me.new_node();
			}, "octicon octicon-plus")
		}
	},
	set_menu_item: function(){
		var me = this;

		this.menu_items = [
			{
				label: __('View List'),
				action: function() {
					frappe.set_route('List', me.doctype);
				}
			},
			{
				label: __('Refresh'),
				action: function() {
					me.make_tree();
				}
			},
		]

		if (me.opts.menu_items) {
			me.menu_items.push.apply(me.menu_items, me.opts.menu_items)
		}

		$.each(me.menu_items, function(i, menu_item){
			var has_perm = true;
			if(menu_item["condition"]) {
				has_perm = eval(menu_item["condition"]);
			}

			if (has_perm) {
				me.page.add_menu_item(menu_item["label"], menu_item["action"]);
			}
		})
	}
});









